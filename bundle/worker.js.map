{"mappings":"ACAC,CAAA,SAOmB,EAAI,EAWP,EA06DsB,EAtZF,EAriDnC,IA45DiC,EA0rCd,EAtlGf,EAAW,OAAO,MAAM,CACxB,EAAY,OAAO,cAAc,CACjC,EAAmB,OAAO,wBAAwB,CAClD,EAAoB,OAAO,mBAAmB,CAC9C,EAAe,OAAO,cAAc,CACpC,EAAe,OAAO,SAAS,CAAC,cAAc,CAsB9C,GArBc,EAqBkB,CAClC,yCAAyC,CAAO,CAAE,CAAM,EACtD,IAAI,EAAU,SAAS,CAAU,EAE/B,IAA0D,EAAc,EAAhC,kBAAuD,EAAmB,uCAC9G,EAAuB,AAAkB,YAAlB,OAAO,OAClC,SAAS,EAAQ,CAAC,CAAE,CAAK,CAAE,CAAQ,CAAE,CAAa,SAChD,AAAI,AAAa,KAAA,IAAN,EACF,CAAO,CAAC,EAAE,CACE,KAAA,IAAV,GACF,CAAA,AAAW,IAAX,CAAC,GAAiB,CAAA,EAA2B,EAAU,EAAG,EAAO,EAAU,GAA9C,EAAW,EAEnD,CACA,SAAS,EAAW,CAAK,CAAE,CAAK,EAC9B,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,OAAO,CAAG,CAAA,CACjB,CAEA,SAAS,EAAa,CAAK,EACzB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,IAAI,CAAG,EAAQ,EACpB,IAAI,CAAC,OAAO,CAAG,CAAA,CACjB,CAEA,SAAS,EAAa,CAAK,EACzB,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,SAAS,EAAU,CAAC,EAClB,OAAO,kBAAW,GAAK,EA1Be,gBA2BxC,CACA,SAAS,EAAa,CAAC,SACrB,AAAI,EAAI,IACC,CAAC,EAAE,CACR,EAAI,KACC,CAAC,EAAI,IAAK,KAAK,KAAK,CAAC,EAAI,KAAK,CAChC,CAAC,EAAI,IAAK,KAAK,KAAK,CAAC,EAAI,KAAO,IAAK,KAAK,KAAK,CAAC,EAAI,MAAM,AACnE,CACA,SAAS,EAAa,CAAG,EACvB,EAAM,GACN,IAAI,EAAU,EAAI,MAAM,CACxB,GAAI,EAAU,GAAK,AAA+B,EAA/B,EAAW,EAAK,GACjC,OAAQ,GACN,KAAK,EACH,OAAO,CACT,MAAK,EACH,OAAO,CAAG,CAAC,EAAE,AACf,MAAK,EACH,OAAO,CAAG,CAAC,EAAE,CAAG,AA7Cb,IA6Ca,CAAG,CAAC,EAAE,AACxB,SACE,OAAO,CAAG,CAAC,EAAE,CAAI,AAAA,CAAA,CAAG,CAAC,EAAE,CAAG,AA/CvB,IA+CuB,CAAG,CAAC,EAAE,AAAG,EA/ChC,GAgDP,CAEF,OAAO,CACT,CACA,SAAS,EAAM,CAAC,EAEd,IADA,IAAI,EAAK,EAAE,MAAM,CACV,AAAY,IAAZ,CAAC,CAAC,EAAE,EAAG,GAEd,EAAE,MAAM,CAAG,EAAK,CAClB,CACA,SAAS,EAAY,CAAO,EAG1B,IAFA,IAAI,EAAI,AAAI,MAAM,GACd,EAAK,GACF,EAAE,EAAK,GACZ,CAAC,CAAC,EAAG,CAAG,EAEV,OAAO,CACT,CACA,SAAS,EAAS,CAAC,SACjB,AAAI,EAAI,EACC,KAAK,KAAK,CAAC,GACb,KAAK,IAAI,CAAC,EACnB,CACA,SAAS,EAAI,CAAC,CAAE,CAAC,EACf,IAAgF,EAAK,EAAjF,EAAM,EAAE,MAAM,CAAE,EAAM,EAAE,MAAM,CAAE,EAAI,AAAI,MAAM,GAAM,EAAQ,EAChE,IAAK,EAAK,EAAG,EAAK,EAAK,IAErB,EAAQ,AADR,CAAA,EAAM,CAAC,CAAC,EAAG,CAAG,CAAC,CAAC,EAAG,CAAG,CAAtB,GA1EO,IA2Ee,EAAI,EAC1B,CAAC,CAAC,EAAG,CAAG,EAAM,AA5EP,IA4EO,EAEhB,KAAO,EAAK,GAEV,EAAQ,AAhFD,MA+EP,CAAA,EAAM,CAAC,CAAC,EAAG,CAAG,CAAd,EACuB,EAAI,EAC3B,CAAC,CAAC,IAAK,CAAG,EAAM,AAjFT,IAiFS,EAIlB,OAFI,EAAQ,GACV,EAAE,IAAI,CAAC,GACF,CACT,CACA,SAAS,EAAO,CAAC,CAAE,CAAC,SAClB,AAAI,EAAE,MAAM,EAAI,EAAE,MAAM,CACf,EAAI,EAAG,GACT,EAAI,EAAG,EAChB,CACA,SAAS,EAAS,CAAC,CAAE,CAAK,EACxB,IAAiD,EAAK,EAAlD,EAAI,EAAE,MAAM,CAAE,EAAI,AAAI,MAAM,GAChC,IAAK,EAAK,EAAG,EAAK,EAAG,IAEnB,EAAQ,KAAK,KAAK,CAAC,AADnB,CAAA,EAAM,CAAC,CAAC,EAAG,CA/FJ,IA+Fc,CAArB,EA/FO,KAiGP,CAAC,CAAC,EAAG,CAAG,EAAM,AAjGP,IAiGO,EACd,GAAS,EAEX,KAAO,EAAQ,GACb,CAAC,CAAC,IAAK,CAAG,EArGH,IAsGP,EAAQ,KAAK,KAAK,CAAC,EAtGZ,KAwGT,OAAO,CACT,CAgCA,SAAS,EAAS,CAAC,CAAE,CAAC,EACpB,IAAiF,EAAI,EAAjF,EAAM,EAAE,MAAM,CAAE,EAAM,EAAE,MAAM,CAAE,EAAI,AAAI,MAAM,GAAM,EAAS,EACjE,IAAK,EAAK,EAAG,EAAK,EAAK,IAEjB,AADJ,CAAA,EAAa,CAAC,CAAC,EAAG,CAAG,EAAS,CAAC,CAAC,EAAG,AAAH,EACf,GACf,GA9IK,IA+IL,EAAS,GAET,EAAS,EACX,CAAC,CAAC,EAAG,CAAG,EAEV,IAAK,EAAK,EAAK,EAAK,EAAK,IAAM,CAE7B,GAAI,AADJ,CAAA,EAAa,CAAC,CAAC,EAAG,CAAG,CAArB,EACiB,EACf,GAvJK,QAwJF,CACH,CAAC,CAAC,IAAK,CAAG,EACV,KACF,CACA,CAAC,CAAC,EAAG,CAAG,CACV,CACA,KAAO,EAAK,EAAK,IACf,CAAC,CAAC,EAAG,CAAG,CAAC,CAAC,EAAG,CAGf,OADA,EAAM,GACC,CACT,CAiBA,SAAS,EAAc,CAAC,CAAE,CAAC,CAAE,CAAK,EAChC,IAA6D,EAAI,EAA7D,EAAI,EAAE,MAAM,CAAE,EAAI,AAAI,MAAM,GAAI,EAAQ,CAAC,EAC7C,IAAK,EAAK,EAAG,EAAK,EAAG,IAEnB,EAAQ,KAAK,KAAK,CAAC,AADnB,CAAA,EAAa,CAAC,CAAC,EAAG,CAAG,CAArB,EAvLO,KAyLP,GAzLO,IA0LP,CAAC,CAAC,EAAG,CAAG,EAAa,EAAI,EA1LlB,IA0LsC,QAG/C,AAAI,AAAa,UAAb,MADJ,CAAA,EAAI,EAAa,EAAjB,GAEM,GACF,CAAA,EAAI,CAAC,CAAA,EACA,IAAI,EAAa,IAEnB,IAAI,EAAW,EAAG,EAC3B,CAkDA,SAAS,EAAa,CAAC,CAAE,CAAC,EACxB,IAAoF,EAAU,EAAO,EAAI,EAArG,EAAM,EAAE,MAAM,CAAE,EAAM,EAAE,MAAM,CAAiB,EAAI,EAAf,EAAM,GAC9C,IAAK,EAAK,EAAG,EAAK,EAAK,EAAE,EAAI,CAC3B,EAAM,CAAC,CAAC,EAAG,CACX,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,EAAE,EAGzB,EAAQ,KAAK,KAAK,CAAC,AADnB,CAAA,EAAW,EADL,CAAC,CAAC,EAAE,CACa,CAAC,CAAC,EAAK,EAAE,AAAF,EA3PzB,KA6PL,CAAC,CAAC,EAAK,EAAE,CAAG,EAAW,AA7PlB,IA6PkB,EACvB,CAAC,CAAC,EAAK,EAAI,EAAE,EAAI,CAErB,CAEA,OADA,EAAM,GACC,CACT,CACA,SAAS,EAAc,CAAC,CAAE,CAAC,EACzB,IAA4D,EAAU,EAAlE,EAAI,EAAE,MAAM,CAAE,EAAI,AAAI,MAAM,GAAiB,EAAQ,EACzD,IAAK,EAAK,EAAG,EAAK,EAAG,IAEnB,EAAQ,KAAK,KAAK,CAAC,AADnB,CAAA,EAAW,CAAC,CAAC,EAAG,CAAG,EAAI,CAAvB,EAvQO,KAyQP,CAAC,CAAC,EAAG,CAAG,EAAW,AAzQZ,IAyQY,EAErB,KAAO,EAAQ,GACb,CAAC,CAAC,IAAK,CAAG,EA5QH,IA6QP,EAAQ,KAAK,KAAK,CAAC,EA7QZ,KA+QT,OAAO,CACT,CACA,SAAS,EAAU,CAAC,CAAE,CAAC,EAErB,IADA,IAAI,EAAI,EAAE,CACH,KAAM,GACX,EAAE,IAAI,CAAC,GACT,OAAO,EAAE,MAAM,CAAC,EAClB,CAmCA,SAAS,EAAsB,CAAC,CAAE,CAAC,CAAE,CAAK,SACxC,AAAI,EA1TK,IA2TA,IAAI,EAAW,EAAc,EAAG,GAAI,GAEtC,IAAI,EAAW,EAAa,EAAG,EAAa,IAAK,EAC1D,CAwBA,SAAS,EAAO,CAAC,EACf,IAAuD,EAAU,EAAO,EAAI,EAAxE,EAAI,EAAE,MAAM,CAAE,EAAI,EAAY,EAAI,GACtC,IAAK,EAAK,EAAG,EAAK,EAAG,IAAM,CAEzB,EAAQ,EAAI,AADZ,CAAA,EAAM,CAAC,CAAC,EAAG,AAAH,EACU,EAClB,IAAK,IAAI,EAAI,EAAI,EAAI,EAAG,IAGtB,EAAQ,KAAK,KAAK,CAAC,AADnB,CAAA,EAAW,AAAK,EADV,CAAC,CAAC,EAAE,CACC,EAAkB,CAAC,CAAC,EAAK,EAAE,CAAG,CAAzC,EA7VK,KA+VL,CAAC,CAAC,EAAK,EAAE,CAAG,EAAW,AA/VlB,IA+VkB,CAEzB,CAAA,CAAC,CAAC,EAAK,EAAE,CAAG,CACd,CAEA,OADA,EAAM,GACC,CACT,CAwFA,SAAS,EAAY,CAAK,CAAE,CAAM,EAChC,IAA0E,EAAI,EAAG,EAAY,EAAzF,EAAU,EAAM,MAAM,CAAE,EAAW,EAAY,GAEnD,IADA,EAAa,EACR,EAAK,EAAU,EAAG,GAAM,EAAG,EAAE,EAEhC,EAAI,EAAS,AADb,CAAA,EAAU,AAjcH,IAicG,EAAoB,CAAK,CAAC,EAAG,AAAH,EACb,GACvB,EAAa,EAAU,EAAI,EAC3B,CAAQ,CAAC,EAAG,CAAG,AAAI,EAAJ,EAEjB,MAAO,CAAC,EAAU,AAAa,EAAb,EAAe,AACnC,CACA,SAAS,EAAU,CAAK,CAAE,CAAC,EACzB,IAKI,EALA,EAAO,EAAI,EAAW,GAC1B,GAAI,EACF,MAAO,CAAC,IAAI,EAAa,EAAM,KAAK,CAAG,EAAE,KAAK,EAAG,IAAI,EAAa,EAAM,KAAK,CAAG,EAAE,KAAK,EAAE,CAE3F,IAAI,EAAI,EAAM,KAAK,CAAE,EAAI,EAAE,KAAK,CAEhC,GAAI,AAAM,IAAN,EACF,MAAM,AAAI,MAAM,yBAClB,GAAI,EAAM,OAAO,QACf,AAAI,EAAE,OAAO,CACJ,CAAC,IAAI,EAAa,EAAS,EAAI,IAAK,IAAI,EAAa,EAAI,GAAG,CAE9D,CAAC,CAAO,CAAC,EAAE,CAAE,EAAM,CAE5B,GAAI,EAAE,OAAO,CAAE,CACb,GAAI,AAAM,IAAN,EACF,MAAO,CAAC,EAAO,CAAO,CAAC,EAAE,CAAC,CAC5B,GAAI,AAAK,IAAL,EACF,MAAO,CAAC,EAAM,MAAM,GAAI,CAAO,CAAC,EAAE,CAAC,CACrC,IAAI,EAAO,KAAK,GAAG,CAAC,GACpB,GAAI,EA7dG,IA6dU,CAEf,EAAW,EAAa,AADxB,CAAA,EAAQ,EAAY,EAAG,EAAvB,CAC6B,CAAC,EAAE,EAChC,IAAI,EAAa,CAAK,CAAC,EAAE,OAGzB,CAFI,EAAM,IAAI,EACZ,CAAA,EAAa,CAAC,CADhB,EAEI,AAAoB,UAApB,OAAO,IACL,EAAM,IAAI,GAAK,EAAE,IAAI,EACvB,CAAA,EAAW,CAAC,CADd,EAEO,CAAC,IAAI,EAAa,GAAW,IAAI,EAAa,GAAY,EAE5D,CAAC,IAAI,EAAW,EAAU,EAAM,IAAI,GAAK,EAAE,IAAI,EAAG,IAAI,EAAa,GAAY,AACxF,CACA,EAAI,EAAa,EACnB,CACA,IAAI,EAAa,EAAW,EAAG,GAC/B,GAAI,AAAe,KAAf,EACF,MAAO,CAAC,CAAO,CAAC,EAAE,CAAE,EAAM,CAC5B,GAAI,AAAe,IAAf,EACF,MAAO,CAAC,CAAO,CAAC,EAAM,IAAI,GAAK,EAAE,IAAI,CAAG,EAAI,GAAG,CAAE,CAAO,CAAC,EAAE,CAAC,CAK9D,EAAW,CAHT,EADE,EAAE,MAAM,CAAG,EAAE,MAAM,EAAI,IACjB,AAhIZ,SAAiB,CAAC,CAAE,CAAC,EACnB,IAAoQ,EAAe,EAAO,EAAO,EAAQ,EAAI,EAAG,EAA5S,EAAM,EAAE,MAAM,CAAE,EAAM,EAAE,MAAM,CAAe,EAAS,EAAY,EAAE,MAAM,EAAG,EAA8B,CAAC,CAAC,EAAM,EAAE,CAAE,EAAS,KAAK,IAAI,CAAC,AAnXrI,IAmX6I,CAAA,EAAI,CAAA,GAA+B,EAAa,EAAc,EAAG,GAAS,EAAU,EAAc,EAAG,GAK3P,IAJI,EAAW,MAAM,EAAI,GACvB,EAAW,IAAI,CAAC,GAClB,EAAQ,IAAI,CAAC,GACb,EAA8B,CAAO,CAAC,EAAM,EAAE,CACzC,EAAQ,EAAM,EAAK,GAAS,EAAG,IAAS,CAQ3C,IAPA,EAAgB,AAzXT,IAyXgB,EACnB,CAAU,CAAC,EAAQ,EAAI,GAAK,GAC9B,CAAA,EAAgB,KAAK,KAAK,CAAE,AAAA,CAAA,AA3XvB,IA2XuB,CAAU,CAAC,EAAQ,EAAI,CAAU,CAAU,CAAC,EAAQ,EAAM,EAAE,AAAF,EAAM,EAD9F,EAGA,EAAQ,EACR,EAAS,EACT,EAAI,EAAQ,MAAM,CACb,EAAK,EAAG,EAAK,EAAG,IACnB,GAAS,EAAgB,CAAO,CAAC,EAAG,CACpC,EAAI,KAAK,KAAK,CAAC,EAlYV,KAmYL,GAAU,CAAU,CAAC,EAAQ,EAAG,CAAI,CAAA,EAAQ,AAnYvC,IAmYuC,CAAI,EAChD,EAAQ,EACJ,EAAS,GACX,CAAU,CAAC,EAAQ,EAAG,CAAG,EAtYtB,IAuYH,EAAS,KAET,CAAU,CAAC,EAAQ,EAAG,CAAG,EACzB,EAAS,GAGb,KAAO,AAAW,IAAX,GAAc,CAGnB,IAFA,GAAiB,EACjB,EAAQ,EACH,EAAK,EAAG,EAAK,EAAG,IAEf,AADJ,CAAA,GAAS,CAAU,CAAC,EAAQ,EAAG,CAjZ5B,IAiZsC,CAAO,CAAC,EAAG,AAAH,EACrC,GACV,CAAU,CAAC,EAAQ,EAAG,CAAG,EAnZxB,IAoZD,EAAQ,IAER,CAAU,CAAC,EAAQ,EAAG,CAAG,EACzB,EAAQ,GAGZ,GAAU,CACZ,CACA,CAAM,CAAC,EAAM,CAAG,CAClB,CAEA,OADA,EAAa,EAAY,EAAY,EAAO,CAAC,EAAE,CACxC,CAAC,EAAa,GAAS,EAAa,GAAY,AACzD,EAkFoB,EAAG,GAEX,AAnFZ,SAAiB,CAAC,CAAE,CAAC,EAEnB,IADA,IAAyE,EAAO,EAAM,EAAO,EAAO,EAAhG,EAAM,EAAE,MAAM,CAAE,EAAM,EAAE,MAAM,CAAE,EAAS,EAAE,CAAE,EAAO,EAAE,CACnD,GAAK,CAGV,GAFA,EAAK,OAAO,CAAC,CAAC,CAAC,EAAE,EAAI,EACrB,EAAM,GACF,AAAsB,EAAtB,EAAW,EAAM,GAAQ,CAC3B,EAAO,IAAI,CAAC,GACZ,QACF,CACA,EAAO,EAAK,MAAM,CAClB,EAAQ,AA3aD,IA2aC,CAAI,CAAC,EAAO,EAAE,CAAU,CAAI,CAAC,EAAO,EAAE,CAC9C,EAAQ,AA5aD,IA4aC,CAAC,CAAC,EAAM,EAAE,CAAU,CAAC,CAAC,EAAM,EAAE,CAClC,EAAO,GACT,CAAA,EAAS,AAAA,CAAA,EAAQ,CAAA,EA9aZ,GA6aP,EAGA,EAAQ,KAAK,IAAI,CAAC,EAAQ,GAC1B,EAAG,CAED,GAAI,AAA2B,GAA3B,EADJ,EAAQ,EAAc,EAAG,GACH,GACpB,KACF,CAAA,GACF,OAAS,EAAO,AAChB,EAAO,IAAI,CAAC,GACZ,EAAO,EAAS,EAAM,EACxB,CAEA,OADA,EAAO,OAAO,GACP,CAAC,EAAa,GAAS,EAAa,GAAM,AACnD,EAwDoB,EAAG,GACL,CAAC,EAAE,CACnB,IAAI,EAAQ,EAAM,IAAI,GAAK,EAAE,IAAI,CAAE,EAAM,CAAK,CAAC,EAAE,CAAE,EAAQ,EAAM,IAAI,CAarE,MAZI,AAAoB,UAApB,OAAO,GACL,GACF,CAAA,EAAW,CAAC,CADd,EAEA,EAAW,IAAI,EAAa,IAE5B,EAAW,IAAI,EAAW,EAAU,GAClC,AAAe,UAAf,OAAO,GACL,GACF,CAAA,EAAM,CAAC,CADT,EAEA,EAAM,IAAI,EAAa,IAEvB,EAAM,IAAI,EAAW,EAAK,GACrB,CAAC,EAAU,EAAI,AACxB,CA0GA,SAAS,EAAW,CAAC,CAAE,CAAC,EACtB,GAAI,EAAE,MAAM,GAAK,EAAE,MAAM,CACvB,OAAO,EAAE,MAAM,CAAG,EAAE,MAAM,CAAG,EAAI,GAEnC,IAAK,IAAI,EAAK,EAAE,MAAM,CAAG,EAAG,GAAM,EAAG,IACnC,GAAI,CAAC,CAAC,EAAG,GAAK,CAAC,CAAC,EAAG,CACjB,OAAO,CAAC,CAAC,EAAG,CAAG,CAAC,CAAC,EAAG,CAAG,EAAI,GAE/B,OAAO,CACT,CAyJA,SAAS,EAAa,CAAC,EACrB,IAAI,EAAI,EAAE,GAAG,SACb,CAAI,EAAE,MAAM,OAER,CAAA,EAAE,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,IAAM,EAAE,MAAM,CAAC,EAAA,IAEvC,CAAA,EAAE,MAAM,IAAM,EAAE,aAAa,CAAC,IAAM,EAAE,aAAa,CAAC,EAAA,MAEpD,EAAE,MAAM,CAAC,aAEf,CACA,SAAS,EAAgB,CAAC,CAAE,CAAC,EAE3B,IADA,IAAwC,EAAM,EAAI,EAA9C,EAAQ,EAAE,IAAI,GAAI,EAAI,EAAO,EAAI,EAC9B,EAAE,MAAM,IACb,EAAI,EAAE,MAAM,CAAC,GAAI,IACnB,EACE,IAAK,EAAK,EAAG,EAAK,EAAE,MAAM,CAAE,IAC1B,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,EAAG,IAGd,CAAA,AADJ,CAAA,EAAI,EAAQ,CAAC,CAAC,EAAG,EAAE,MAAM,CAAC,EAAG,EAA7B,EACM,MAAM,IAAM,EAAE,MAAM,CAAC,EAAA,GAE3B,IAAK,EAAI,EAAI,EAEX,AAFmB,GAAL,IAEV,AADJ,CAAA,EAAI,EAAE,MAAM,GAAG,GAAG,CAAC,EAAnB,EACM,MAAM,GAFU,IAItB,GAAI,EAAE,MAAM,CAAC,GACX,SAAS,EAEb,MAAO,CAAA,EAEX,MAAO,CAAA,CACT,CAlyBA,EAAW,SAAS,CAAG,OAAO,MAAM,CAAC,EAAQ,SAAS,EAMtD,EAAa,SAAS,CAAG,OAAO,MAAM,CAAC,EAAQ,SAAS,EAIxD,EAAa,SAAS,CAAG,OAAO,MAAM,CAAC,EAAQ,SAAS,EAkFxD,EAAW,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACnC,IAAI,EAAI,EAAW,GACnB,GAAI,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CACtB,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,IAE/B,IAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,QAC/B,AAAI,EAAE,OAAO,CACJ,IAAI,EAAW,EAAS,EAAG,KAAK,GAAG,CAAC,IAAK,IAAI,CAAC,IAAI,EAEpD,IAAI,EAAW,EAAO,EAAG,GAAI,IAAI,CAAC,IAAI,CAC/C,EACA,EAAW,SAAS,CAAC,IAAI,CAAG,EAAW,SAAS,CAAC,GAAG,CACpD,EAAa,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACrC,IAAI,EAAI,EAAW,GACf,EAAI,IAAI,CAAC,KAAK,CAClB,GAAI,EAAI,IAAM,EAAE,IAAI,CAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,IAE/B,IAAI,EAAI,EAAE,KAAK,CACf,GAAI,EAAE,OAAO,CAAE,CACb,GAAI,EAAU,EAAI,GAChB,OAAO,IAAI,EAAa,EAAI,GAC9B,EAAI,EAAa,KAAK,GAAG,CAAC,GAC5B,CACA,OAAO,IAAI,EAAW,EAAS,EAAG,KAAK,GAAG,CAAC,IAAK,EAAI,EACtD,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,EAAa,SAAS,CAAC,GAAG,CACxD,EAAa,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACrC,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,EAAW,GAAG,KAAK,CAC1D,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,EAAa,SAAS,CAAC,GAAG,CA4DxD,EAAW,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EACxC,IAjCyB,EACrB,EAgCA,EAAI,EAAW,GACnB,GAAI,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CACtB,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAE1B,IAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,QAC/B,AAAI,EAAE,OAAO,CACJ,EAAc,EAAG,KAAK,GAAG,CAAC,GAAI,IAAI,CAAC,IAAI,GAvCvB,EAwCA,IAAI,CAAC,IAAI,CA/BlC,CAPI,EAsCe,EAAG,IAtCE,EACtB,EAAQ,EAqCS,EAAG,IAnCpB,EAAQ,EAmCY,EAAH,GAlCjB,EAAQ,CAAC,GAGP,AAAiB,UAAjB,MADJ,CAAA,EAAQ,EAAa,EAArB,IAEM,GACF,CAAA,EAAQ,CAAC,CADX,EAEO,IAAI,EAAa,IAEnB,IAAI,EAAW,EAAO,GA2B/B,EACA,EAAW,SAAS,CAAC,KAAK,CAAG,EAAW,SAAS,CAAC,QAAQ,CAC1D,EAAa,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EAC1C,IAAI,EAAI,EAAW,GACf,EAAI,IAAI,CAAC,KAAK,CAClB,GAAI,EAAI,IAAM,EAAE,IAAI,CAClB,OAAO,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,IAE1B,IAAI,EAAI,EAAE,KAAK,QACf,AAAI,EAAE,OAAO,CACJ,IAAI,EAAa,EAAI,GAEvB,EAAc,EAAG,KAAK,GAAG,CAAC,GAAI,GAAK,EAC5C,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,EAAa,SAAS,CAAC,QAAQ,CAC9D,EAAa,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EAC1C,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,EAAW,GAAG,KAAK,CAC1D,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,EAAa,SAAS,CAAC,QAAQ,CAC9D,EAAW,SAAS,CAAC,MAAM,CAAG,WAC5B,OAAO,IAAI,EAAW,IAAI,CAAC,KAAK,CAAE,CAAC,IAAI,CAAC,IAAI,CAC9C,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,IAAI,EAAQ,IAAI,CAAC,IAAI,CACjB,EAAQ,IAAI,EAAa,CAAC,IAAI,CAAC,KAAK,EAExC,OADA,EAAM,IAAI,CAAG,CAAC,EACP,CACT,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,OAAO,IAAI,EAAa,CAAC,IAAI,CAAC,KAAK,CACrC,EACA,EAAW,SAAS,CAAC,GAAG,CAAG,WACzB,OAAO,IAAI,EAAW,IAAI,CAAC,KAAK,CAAE,CAAA,EACpC,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,WAC3B,OAAO,IAAI,EAAa,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAC7C,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,WAC3B,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,EAAI,EAAI,IAAI,CAAC,KAAK,CAAG,CAAC,IAAI,CAAC,KAAK,CACpE,EAiDA,EAAW,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EACxC,IAJoB,EAAI,EAI0D,EAA9E,EAAI,EAAW,GAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,CAAE,EAAQ,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CAChF,GAAI,EAAE,OAAO,CAAE,CACb,GAAI,AAAM,IAAN,EACF,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,AAAM,IAAN,EACF,OAAO,IAAI,CACb,GAAI,AAAM,KAAN,EACF,OAAO,IAAI,CAAC,MAAM,GAEpB,GAAI,AADJ,CAAA,EAAO,KAAK,GAAG,CAAC,EAAhB,EA9SO,IAgTL,OAAO,IAAI,EAAW,EAAc,EAAG,GAAO,GAEhD,EAAI,EAAa,EACnB,QACA,AAjBO,OADa,EAkBH,EAAE,MAAM,EAjBJ,MADG,EAkBG,EAAE,MAAM,EAjBD,MAAQ,EAAK,EAAK,EAkB3C,IAAI,EAAW,AA9B1B,SAAS,EAAkB,CAAC,CAAE,CAAC,EAC7B,IAAI,EAAI,KAAK,GAAG,CAAC,EAAE,MAAM,CAAE,EAAE,MAAM,EACnC,GAAI,GAAK,GACP,OAAO,EAAa,EAAG,GACzB,EAAI,KAAK,IAAI,CAAC,EAAI,GAClB,IAAI,EAAI,EAAE,KAAK,CAAC,GAAI,EAAI,EAAE,KAAK,CAAC,EAAG,GAAI,EAAI,EAAE,KAAK,CAAC,GAAI,EAAI,EAAE,KAAK,CAAC,EAAG,GAClE,EAAK,EAAkB,EAAG,GAAI,EAAK,EAAkB,EAAG,GAAI,EAAO,EAAkB,EAAO,EAAG,GAAI,EAAO,EAAG,IAC7G,EAAW,EAAO,EAAO,EAAI,EAAU,EAAS,EAAS,EAAM,GAAK,GAAK,IAAK,EAAU,EAAI,EAAI,IAEpG,OADA,EAAM,GACC,CACT,EAoB4C,EAAG,GAAI,GAC1C,IAAI,EAAW,EAAa,EAAG,GAAI,EAC5C,EACA,EAAW,SAAS,CAAC,KAAK,CAAG,EAAW,SAAS,CAAC,QAAQ,CAO1D,EAAa,SAAS,CAAC,gBAAgB,CAAG,SAAS,CAAC,SAClD,AAAI,EAAU,EAAE,KAAK,CAAG,IAAI,CAAC,KAAK,EACzB,IAAI,EAAa,EAAE,KAAK,CAAG,IAAI,CAAC,KAAK,EAEvC,EAAsB,KAAK,GAAG,CAAC,EAAE,KAAK,EAAG,EAAa,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAI,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CAC1G,EACA,EAAW,SAAS,CAAC,gBAAgB,CAAG,SAAS,CAAC,SAChD,AAAI,AAAY,IAAZ,EAAE,KAAK,CACF,CAAO,CAAC,EAAE,CACf,AAAY,IAAZ,EAAE,KAAK,CACF,IAAI,CACT,AAAY,KAAZ,EAAE,KAAK,CACF,IAAI,CAAC,MAAM,GACb,EAAsB,KAAK,GAAG,CAAC,EAAE,KAAK,EAAG,IAAI,CAAC,KAAK,CAAE,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CAClF,EACA,EAAa,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EAC1C,OAAO,EAAW,GAAG,gBAAgB,CAAC,IAAI,CAC5C,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,EAAa,SAAS,CAAC,QAAQ,CAC9D,EAAa,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAC,EAC1C,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,EAAW,GAAG,KAAK,CAC1D,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,EAAa,SAAS,CAAC,QAAQ,CAiB9D,EAAW,SAAS,CAAC,MAAM,CAAG,WAC5B,OAAO,IAAI,EAAW,EAAO,IAAI,CAAC,KAAK,EAAG,CAAA,EAC5C,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,IAAI,EAAQ,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,QACnC,AAAI,EAAU,GACL,IAAI,EAAa,GACnB,IAAI,EAAW,EAAO,EAAa,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,IAAK,CAAA,EACpE,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACxC,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CACjD,EAoJA,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACtC,IAAI,EAAS,EAAU,IAAI,CAAE,GAC7B,MAAO,CACL,SAAU,CAAM,CAAC,EAAE,CACnB,UAAW,CAAM,CAAC,EAAE,AACtB,CACF,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,MAAM,CAC3F,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACtC,OAAO,EAAU,IAAI,CAAE,EAAE,CAAC,EAAE,AAC9B,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACtE,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,EAAW,GAAG,KAAK,CAC1D,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,IAAI,CAAG,EAAW,SAAS,CAAC,MAAM,CACrH,EAAW,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACnC,OAAO,EAAU,IAAI,CAAE,EAAE,CAAC,EAAE,AAC9B,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,SAAS,CAAG,SAAS,CAAC,EACxE,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,EAAW,GAAG,KAAK,CAC1D,EACA,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,SAAS,CAAG,EAAW,SAAS,CAAC,GAAG,CACzH,EAAW,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACnC,IAAoD,EAAO,EAAG,EAA1D,EAAI,EAAW,GAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,CAClD,GAAI,AAAM,IAAN,EACF,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,AAAM,IAAN,EACF,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,AAAM,IAAN,EACF,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,AAAM,KAAN,EACF,OAAO,EAAE,MAAM,GAAK,CAAO,CAAC,EAAE,CAAG,CAAO,CAAC,GAAG,CAC9C,GAAI,EAAE,IAAI,CACR,OAAO,CAAO,CAAC,EAAE,CAEnB,GAAI,CAAC,EAAE,OAAO,CACZ,MAAM,AAAI,MAAM,gBAAkB,EAAE,QAAQ,GAAK,kBACnD,GAAI,IAAI,CAAC,OAAO,EACV,EAAU,EAAQ,KAAK,GAAG,CAAC,EAAG,IAChC,OAAO,IAAI,EAAa,EAAS,IAIrC,IAFA,EAAI,IAAI,CACR,EAAI,CAAO,CAAC,EAAE,CAEJ,CAAA,EAAJ,IACF,EAAI,EAAE,KAAK,CAAC,GACZ,EAAE,GAEA,AAAM,IAAN,GAEJ,GAAK,EACL,EAAI,EAAE,MAAM,GAEd,OAAO,CACT,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,GAAG,CACrD,EAAa,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACrC,IAAI,EAAI,EAAW,GACf,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,CAC3B,EAAK,OAAO,GAAI,EAAK,OAAO,GAAI,EAAK,OAAO,GAChD,GAAI,IAAM,EACR,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,IAAM,EACR,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,IAAM,EACR,OAAO,CAAO,CAAC,EAAE,CACnB,GAAI,IAAM,OAAO,IACf,OAAO,EAAE,MAAM,GAAK,CAAO,CAAC,EAAE,CAAG,CAAO,CAAC,GAAG,CAC9C,GAAI,EAAE,UAAU,GACd,OAAO,IAAI,EAAa,GAG1B,IAFA,IAAI,EAAI,IAAI,CACR,EAAI,CAAO,CAAC,EAAE,CAEX,CAAA,EAAI,CAAA,IAAQ,IACf,EAAI,EAAE,KAAK,CAAC,GACZ,EAAE,GAEA,IAAM,GAEV,GAAK,EACL,EAAI,EAAE,MAAM,GAEd,OAAO,CACT,EACA,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAI,CAAE,CAAG,EAG9C,GAFA,EAAO,EAAW,GAEd,AADJ,CAAA,EAAM,EAAW,EAAjB,EACQ,MAAM,GACZ,MAAM,AAAI,MAAM,qCAClB,IAAI,EAAI,CAAO,CAAC,EAAE,CAAE,EAAO,IAAI,CAAC,GAAG,CAAC,GAKpC,IAJI,EAAK,UAAU,KACjB,EAAO,EAAK,QAAQ,CAAC,CAAO,CAAC,GAAG,EAChC,EAAO,EAAK,MAAM,CAAC,IAEd,EAAK,UAAU,IAAI,CACxB,GAAI,EAAK,MAAM,GACb,OAAO,CAAO,CAAC,EAAE,CACf,EAAK,KAAK,IACZ,CAAA,EAAI,EAAE,QAAQ,CAAC,GAAM,GAAG,CAAC,EAD3B,EAEA,EAAO,EAAK,MAAM,CAAC,GACnB,EAAO,EAAK,MAAM,GAAG,GAAG,CAAC,EAC3B,CACA,OAAO,CACT,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,MAAM,CAW3F,EAAW,SAAS,CAAC,UAAU,CAAG,SAAS,CAAC,EAC1C,IAAI,EAAI,EAAW,GAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,QAClD,AAAI,EAAE,OAAO,CACJ,EACF,EAAW,EAAG,EACvB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,SAAS,CAAC,EAC5C,IAAI,EAAI,EAAW,GAAI,EAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,EAAG,EAAI,EAAE,KAAK,QAC5D,AAAI,EAAE,OAAO,CAEJ,IADP,CAAA,EAAI,KAAK,GAAG,CAAC,EAAb,EACiB,EAAI,EAAI,EAAI,EAAI,GAE5B,EACT,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,SAAS,CAAC,EAC5C,IAAI,EAAI,IAAI,CAAC,KAAK,CACd,EAAI,EAAW,GAAG,KAAK,CAG3B,MAAO,AAFP,CAAA,EAAI,GAAK,EAAI,EAAI,CAAC,CAAA,IAClB,CAAA,EAAI,GAAK,EAAI,EAAI,CAAC,CAAA,EACD,EAAI,EAAI,EAAI,EAAI,EACnC,EACA,EAAW,SAAS,CAAC,OAAO,CAAG,SAAS,CAAC,EACvC,GAAI,IAAM,IACR,OAAO,GAET,GAAI,IAAM,CAAC,IACT,OAAO,EAET,IAAI,EAAI,EAAW,GAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,QAClD,AAAI,IAAI,CAAC,IAAI,GAAK,EAAE,IAAI,CACf,EAAE,IAAI,CAAG,EAAI,GAElB,EAAE,OAAO,CACJ,IAAI,CAAC,IAAI,CAAG,GAAK,EAEnB,EAAW,EAAG,GAAM,CAAA,IAAI,CAAC,IAAI,CAAG,GAAK,CAAA,CAC9C,EACA,EAAW,SAAS,CAAC,SAAS,CAAG,EAAW,SAAS,CAAC,OAAO,CAC7D,EAAa,SAAS,CAAC,OAAO,CAAG,SAAS,CAAC,EACzC,GAAI,IAAM,IACR,OAAO,GAET,GAAI,IAAM,CAAC,IACT,OAAO,EAET,IAAI,EAAI,EAAW,GAAI,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,KAAK,QAClD,AAAI,EAAE,OAAO,CACJ,GAAK,EAAI,EAAI,EAAI,EAAI,EAAI,GAE9B,EAAI,IAAM,EAAE,IAAI,CACX,EAAI,EAAI,GAAK,EAEf,EAAI,EAAI,EAAI,EACrB,EACA,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,OAAO,CACjE,EAAa,SAAS,CAAC,OAAO,CAAG,SAAS,CAAC,EACzC,GAAI,IAAM,IACR,OAAO,GAET,GAAI,IAAM,CAAC,IACT,OAAO,EAET,IAAI,EAAI,IAAI,CAAC,KAAK,CACd,EAAI,EAAW,GAAG,KAAK,CAC3B,OAAO,IAAM,EAAI,EAAI,EAAI,EAAI,EAAI,EACnC,EACA,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,OAAO,CACjE,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACtC,OAAO,AAAoB,IAApB,IAAI,CAAC,OAAO,CAAC,EACtB,EACA,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,EAAE,CAAG,EAAW,SAAS,CAAC,MAAM,CAC7K,EAAW,SAAS,CAAC,SAAS,CAAG,SAAS,CAAC,EACzC,OAAO,AAAoB,IAApB,IAAI,CAAC,OAAO,CAAC,EACtB,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,SAAS,CAAG,EAAW,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,SAAS,CACzL,EAAW,SAAS,CAAC,OAAO,CAAG,SAAS,CAAC,EACvC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAK,CAC3B,EACA,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,OAAO,CAAG,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,OAAO,CAAG,EAAW,SAAS,CAAC,EAAE,CAAG,EAAW,SAAS,CAAC,OAAO,CAChL,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EACtC,OAAO,AAAkB,EAAlB,IAAI,CAAC,OAAO,CAAC,EACtB,EACA,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,EAAE,CAAG,EAAW,SAAS,CAAC,MAAM,CAC7K,EAAW,SAAS,CAAC,eAAe,CAAG,SAAS,CAAC,EAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAM,CAC5B,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,eAAe,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,eAAe,CAAG,EAAW,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,eAAe,CAC3M,EAAW,SAAS,CAAC,cAAc,CAAG,SAAS,CAAC,EAC9C,OAAO,AAAmB,GAAnB,IAAI,CAAC,OAAO,CAAC,EACtB,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,cAAc,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,cAAc,CAAG,EAAW,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,cAAc,CACxM,EAAW,SAAS,CAAC,MAAM,CAAG,WAC5B,MAAO,AAAC,CAAA,AAAgB,EAAhB,IAAI,CAAC,KAAK,CAAC,EAAE,AAAG,GAAO,CACjC,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,MAAQ,AAAA,CAAA,AAAa,EAAb,IAAI,CAAC,KAAK,AAAG,GAAO,CAC9B,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,MAAO,AAAC,CAAA,IAAI,CAAC,KAAK,CAAG,OAAO,EAAA,IAAQ,OAAO,EAC7C,EACA,EAAW,SAAS,CAAC,KAAK,CAAG,WAC3B,MAAO,AAAC,CAAA,AAAgB,EAAhB,IAAI,CAAC,KAAK,CAAC,EAAE,AAAG,GAAO,CACjC,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,WAC7B,MAAQ,AAAA,CAAA,AAAa,EAAb,IAAI,CAAC,KAAK,AAAG,GAAO,CAC9B,EACA,EAAa,SAAS,CAAC,KAAK,CAAG,WAC7B,MAAO,AAAC,CAAA,IAAI,CAAC,KAAK,CAAG,OAAO,EAAA,IAAQ,OAAO,EAC7C,EACA,EAAW,SAAS,CAAC,UAAU,CAAG,WAChC,MAAO,CAAC,IAAI,CAAC,IAAI,AACnB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,WAClC,OAAO,IAAI,CAAC,KAAK,CAAG,CACtB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,EAAa,SAAS,CAAC,UAAU,CACrE,EAAW,SAAS,CAAC,UAAU,CAAG,WAChC,OAAO,IAAI,CAAC,IAAI,AAClB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,WAClC,OAAO,IAAI,CAAC,KAAK,CAAG,CACtB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,EAAa,SAAS,CAAC,UAAU,CACrE,EAAW,SAAS,CAAC,MAAM,CAAG,WAC5B,MAAO,CAAA,CACT,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,OAAO,AAAyB,IAAzB,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAC5B,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,OAAO,IAAI,CAAC,GAAG,GAAG,KAAK,GAAK,OAAO,EACrC,EACA,EAAW,SAAS,CAAC,MAAM,CAAG,WAC5B,MAAO,CAAA,CACT,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,OAAO,AAAe,IAAf,IAAI,CAAC,KAAK,AACnB,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,WAC9B,OAAO,IAAI,CAAC,KAAK,GAAK,OAAO,EAC/B,EACA,EAAW,SAAS,CAAC,aAAa,CAAG,SAAS,CAAC,EAC7C,IAAI,EAAI,EAAW,SACnB,CAAI,EAAE,MAAM,OAER,EAAE,MAAM,KAER,AAAoB,IAApB,EAAE,UAAU,CAAC,GACR,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,IAC3B,EACA,EAAa,SAAS,CAAC,aAAa,CAAG,EAAa,SAAS,CAAC,aAAa,CAAG,EAAW,SAAS,CAAC,aAAa,CAkChH,EAAW,SAAS,CAAC,OAAO,CAAG,SAAS,CAAM,EAC5C,IAAI,EAAU,EAAa,IAAI,EAC/B,GAAI,AArzBe,KAAA,IAqzBf,EACF,OAAO,EACT,IAAI,EAAI,IAAI,CAAC,GAAG,GACZ,EAAO,EAAE,SAAS,GACtB,GAAI,GAAQ,GACV,OAAO,EAAgB,EAAG,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAG,EAGxE,IAAK,IAFD,EAAO,KAAK,GAAG,CAAC,GAAK,EAAK,UAAU,GACpC,EAAI,KAAK,IAAI,CAAC,AAAW,CAAA,IAAX,EAAkB,EAAI,KAAK,GAAG,CAAC,EAAM,GAAK,GACnD,EAAI,EAAE,CAAE,EAAK,EAAG,EAAK,EAAG,IAC/B,EAAE,IAAI,CAAC,EAAQ,EAAK,IAEtB,OAAO,EAAgB,EAAG,EAC5B,EACA,EAAa,SAAS,CAAC,OAAO,CAAG,EAAa,SAAS,CAAC,OAAO,CAAG,EAAW,SAAS,CAAC,OAAO,CAC9F,EAAW,SAAS,CAAC,eAAe,CAAG,SAAS,CAAU,CAAE,CAAG,EAC7D,IAAI,EAAU,EAAa,IAAI,EAC/B,GAAI,AAr0Be,KAAA,IAq0Bf,EACF,OAAO,EAGT,IAAK,IAFD,EAAI,IAAI,CAAC,GAAG,GACZ,EAAI,AAx0BW,KAAA,IAw0BX,EAA4B,EAAI,EAC/B,EAAI,EAAE,CAAE,EAAK,EAAG,EAAK,EAAG,IAC/B,EAAE,IAAI,CAAC,EAAQ,WAAW,CAAC,EAAG,EAAE,KAAK,CAAC,GAAI,IAE5C,OAAO,EAAgB,EAAG,EAC5B,EACA,EAAa,SAAS,CAAC,eAAe,CAAG,EAAa,SAAS,CAAC,eAAe,CAAG,EAAW,SAAS,CAAC,eAAe,CACtH,EAAW,SAAS,CAAC,MAAM,CAAG,SAAS,CAAC,EAEtC,IADA,IAAgF,EAAG,EAAO,EAAtF,EAAI,EAAQ,IAAI,CAAE,EAAO,EAAQ,GAAG,CAAE,EAAI,EAAW,GAAI,EAAO,IAAI,CAAC,GAAG,GACrE,CAAC,EAAK,MAAM,IACjB,EAAI,EAAE,MAAM,CAAC,GACb,EAAQ,EACR,EAAQ,EACR,EAAI,EACJ,EAAI,EACJ,EAAO,EAAM,QAAQ,CAAC,EAAE,QAAQ,CAAC,IACjC,EAAO,EAAM,QAAQ,CAAC,EAAE,QAAQ,CAAC,IAEnC,GAAI,CAAC,EAAE,MAAM,GACX,MAAM,AAAI,MAAM,IAAI,CAAC,QAAQ,GAAK,QAAU,EAAE,QAAQ,GAAK,2BAI7D,CAHqB,KAAjB,EAAE,OAAO,CAAC,IACZ,CAAA,EAAI,EAAE,GAAG,CAAC,EADZ,EAGI,IAAI,CAAC,UAAU,IACV,EAAE,MAAM,GAEV,CACT,EACA,EAAa,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,MAAM,CAC3F,EAAW,SAAS,CAAC,IAAI,CAAG,WAC1B,IAAI,EAAQ,IAAI,CAAC,KAAK,QACtB,AAAI,IAAI,CAAC,IAAI,CACJ,EAAc,EAAO,EAAG,IAAI,CAAC,IAAI,EAEnC,IAAI,EAAW,EAAS,EAAO,GAAI,IAAI,CAAC,IAAI,CACrD,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,WAC5B,IAAI,EAAQ,IAAI,CAAC,KAAK,QACtB,AAAI,EAAQ,EA52B0B,iBA62B7B,IAAI,EAAa,EAAQ,GAC3B,IAAI,EAAW,EAAa,CAAA,EACrC,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,WAC5B,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,OAAO,GAC9C,EACA,EAAW,SAAS,CAAC,IAAI,CAAG,WAC1B,IAAI,EAAQ,IAAI,CAAC,KAAK,QACtB,AAAI,IAAI,CAAC,IAAI,CACJ,IAAI,EAAW,EAAS,EAAO,GAAI,CAAA,GAErC,EAAc,EAAO,EAAG,IAAI,CAAC,IAAI,CAC1C,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,WAC5B,IAAI,EAAQ,IAAI,CAAC,KAAK,QACtB,AAAI,EAAQ,EAAI,kBACP,IAAI,EAAa,EAAQ,GAC3B,IAAI,EAAW,EAAa,CAAA,EACrC,EACA,EAAa,SAAS,CAAC,IAAI,CAAG,WAC5B,OAAO,IAAI,EAAa,IAAI,CAAC,KAAK,CAAG,OAAO,GAC9C,EAEA,IADA,IAAI,EAAc,CAAC,EAAE,CACd,EAAI,CAAW,CAAC,EAAY,MAAM,CAAG,EAAE,EAp4BnC,KAq4BT,EAAY,IAAI,CAAC,EAAI,CAAW,CAAC,EAAY,MAAM,CAAG,EAAE,EAC1D,IAAI,EAAgB,EAAY,MAAM,CAAE,EAAgB,CAAW,CAAC,EAAgB,EAAE,CACtF,SAAS,EAAc,CAAC,EACtB,OAAO,AAx4BE,KAw4BF,KAAK,GAAG,CAAC,EAClB,CAsCA,SAAS,EAAQ,CAAC,CAAE,CAAC,CAAE,CAAE,EACvB,EAAI,EAAW,GAMf,IALA,IAAI,EAAQ,EAAE,UAAU,GAAI,EAAQ,EAAE,UAAU,GAC5C,EAAO,EAAQ,EAAE,GAAG,GAAK,EAAG,EAAO,EAAQ,EAAE,GAAG,GAAK,EACrD,EAAS,EAAG,EAAS,EACrB,EAAU,KAAM,EAAU,KAC1B,EAAS,EAAE,CACR,CAAC,EAAK,MAAM,IAAM,CAAC,EAAK,MAAM,IAEnC,EAAS,AADT,CAAA,EAAU,EAAU,EAAM,EAA1B,CACgB,CAAC,EAAE,CAAC,UAAU,GAC1B,GACF,CAAA,EAAS,EAAgB,EAAI,CAD/B,EAIA,EAAS,AADT,CAAA,EAAU,EAAU,EAAM,EAA1B,CACgB,CAAC,EAAE,CAAC,UAAU,GAC1B,GACF,CAAA,EAAS,EAAgB,EAAI,CAD/B,EAGA,EAAO,CAAO,CAAC,EAAE,CACjB,EAAO,CAAO,CAAC,EAAE,CACjB,EAAO,IAAI,CAAC,EAAG,EAAQ,IAGzB,IAAK,IADD,EAAM,AAAqC,IAArC,EAAG,EAAQ,EAAI,EAAG,EAAQ,EAAI,GAAW,EAAQ,IAAM,EAAQ,GAChE,EAAK,EAAO,MAAM,CAAG,EAAG,GAAM,EAAG,GAAM,EAC9C,EAAM,EAAI,QAAQ,CAAC,GAAe,GAAG,CAAC,EAAQ,CAAM,CAAC,EAAG,GAE1D,OAAO,CACT,CAwBA,SAAS,EAAS,CAAC,EACjB,IAAI,EAAI,EAAE,KAAK,CAAE,EAAI,AAAa,UAAb,OAAO,EAAiB,AAF/B,WAE+B,EAAgB,AAAa,UAAb,OAAO,EAAiB,EAAI,OAF3E,YAE+F,CAAC,CAAC,EAAE,CAAG,AAn+B3G,IAm+B2G,CAAC,CAAC,EAAE,CAFpF,WAGpC,OAAO,EAAI,CAAC,CACd,CAsBA,SAAS,EAAK,CAAC,CAAE,CAAC,EAGhB,OAFA,EAAI,EAAW,GACf,EAAI,EAAW,GACR,EAAE,OAAO,CAAC,GAAK,EAAI,CAC5B,CACA,SAAS,EAAK,CAAC,CAAE,CAAC,EAGhB,OAFA,EAAI,EAAW,GACf,EAAI,EAAW,GACR,EAAE,MAAM,CAAC,GAAK,EAAI,CAC3B,CACA,SAAS,EAAI,CAAC,CAAE,CAAC,EAGf,GAFA,EAAI,EAAW,GAAG,GAAG,GACrB,EAAI,EAAW,GAAG,GAAG,GACjB,EAAE,MAAM,CAAC,GACX,OAAO,EACT,GAAI,EAAE,MAAM,GACV,OAAO,EACT,GAAI,EAAE,MAAM,GACV,OAAO,EAET,IADA,IAAoB,EAAG,EAAnB,EAAI,CAAO,CAAC,EAAE,CACX,EAAE,MAAM,IAAM,EAAE,MAAM,IAC3B,EAAI,EAAK,EAAS,GAAI,EAAS,IAC/B,EAAI,EAAE,MAAM,CAAC,GACb,EAAI,EAAE,MAAM,CAAC,GACb,EAAI,EAAE,QAAQ,CAAC,GAEjB,KAAO,EAAE,MAAM,IACb,EAAI,EAAE,MAAM,CAAC,EAAS,IAExB,EAAG,CACD,KAAO,EAAE,MAAM,IACb,EAAI,EAAE,MAAM,CAAC,EAAS,IAEpB,EAAE,OAAO,CAAC,KACZ,EAAI,EACJ,EAAI,EACJ,EAAI,GAEN,EAAI,EAAE,QAAQ,CAAC,EACjB,OAAS,CAAC,EAAE,MAAM,GAAI,AACtB,OAAO,EAAE,MAAM,GAAK,EAAI,EAAE,QAAQ,CAAC,EACrC,CA1JA,EAAW,SAAS,CAAC,SAAS,CAAG,SAAS,CAAC,EACzC,IAAI,EAAI,EAAW,GAAG,UAAU,GAChC,GAAI,CAAC,EAAc,GACjB,MAAM,AAAI,MAAM,OAAO,GAAK,+BAE9B,GAAI,EAAI,EACN,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,GAC1B,IAAI,EAAS,IAAI,CACjB,GAAI,EAAO,MAAM,GACf,OAAO,EACT,KAAO,GAAK,GACV,EAAS,EAAO,QAAQ,CAAC,GACzB,GAAK,EAAgB,EAEvB,OAAO,EAAO,QAAQ,CAAC,CAAW,CAAC,EAAE,CACvC,EACA,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,SAAS,CAAG,EAAW,SAAS,CAAC,SAAS,CACpG,EAAW,SAAS,CAAC,UAAU,CAAG,SAAS,CAAC,EAE1C,IADI,EACA,EAAI,EAAW,GAAG,UAAU,GAChC,GAAI,CAAC,EAAc,GACjB,MAAM,AAAI,MAAM,OAAO,GAAK,+BAE9B,GAAI,EAAI,EACN,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,GAEzB,IADA,IAAI,EAAS,IAAI,CACV,GAAK,GAAe,CACzB,GAAI,EAAO,MAAM,IAAM,EAAO,UAAU,IAAM,EAAO,MAAM,GACzD,OAAO,EAET,EAAS,AADT,CAAA,EAAS,EAAU,EAAQ,EAA3B,CACe,CAAC,EAAE,CAAC,UAAU,GAAK,CAAM,CAAC,EAAE,CAAC,IAAI,GAAK,CAAM,CAAC,EAAE,CAC9D,GAAK,EAAgB,CACvB,CAEA,MAAO,AADP,CAAA,EAAS,EAAU,EAAQ,CAAW,CAAC,EAAE,CAAA,CAC5B,CAAC,EAAE,CAAC,UAAU,GAAK,CAAM,CAAC,EAAE,CAAC,IAAI,GAAK,CAAM,CAAC,EAAE,AAC9D,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,EAAa,SAAS,CAAC,UAAU,CAAG,EAAW,SAAS,CAAC,UAAU,CA6BvG,EAAW,SAAS,CAAC,GAAG,CAAG,WACzB,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,EAC3B,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,GAAG,CAClF,EAAW,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACnC,OAAO,EAAQ,IAAI,CAAE,EAAG,SAAS,CAAC,CAAE,CAAC,EACnC,OAAO,EAAI,CACb,EACF,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,GAAG,CAClF,EAAW,SAAS,CAAC,EAAE,CAAG,SAAS,CAAC,EAClC,OAAO,EAAQ,IAAI,CAAE,EAAG,SAAS,CAAC,CAAE,CAAC,EACnC,OAAO,EAAI,CACb,EACF,EACA,EAAa,SAAS,CAAC,EAAE,CAAG,EAAa,SAAS,CAAC,EAAE,CAAG,EAAW,SAAS,CAAC,EAAE,CAC/E,EAAW,SAAS,CAAC,GAAG,CAAG,SAAS,CAAC,EACnC,OAAO,EAAQ,IAAI,CAAE,EAAG,SAAS,CAAC,CAAE,CAAC,EACnC,OAAO,EAAI,CACb,EACF,EACA,EAAa,SAAS,CAAC,GAAG,CAAG,EAAa,SAAS,CAAC,GAAG,CAAG,EAAW,SAAS,CAAC,GAAG,CAgBlF,EAAW,SAAS,CAAC,SAAS,CAAG,WAC/B,IAAI,EAAI,IAAI,OAIZ,CAH8B,EAA1B,EAAE,SAAS,CAAC,EAAQ,KACtB,CAAA,EAAI,EAAE,MAAM,GAAG,QAAQ,CAAC,EAAQ,GADlC,EAGI,AAA4B,IAA5B,EAAE,SAAS,CAAC,EAAQ,KACf,EAAQ,GAEV,EAAQ,AAlBjB,SAAS,EAAiB,CAAK,CAAE,CAAI,EACnC,GAAI,AAAyB,GAAzB,EAAK,SAAS,CAAC,GAAa,CAC9B,IAAI,EAAM,EAAiB,EAAO,EAAK,MAAM,CAAC,IAC1C,EAAI,EAAI,CAAC,CACT,EAAI,EAAI,CAAC,CACT,EAAI,EAAE,QAAQ,CAAC,GACnB,OAAO,AAAsB,GAAtB,EAAE,SAAS,CAAC,GAAc,CAAE,EAAG,EAAG,EAAG,AAAI,EAAJ,EAAQ,CAAE,EAAI,CAAE,EAAA,EAAG,EAAG,AAAI,EAAJ,CAAM,CAC1E,CACA,MAAO,CAAE,EAAG,EAAQ,GAAI,EAAG,CAAE,CAC/B,EASkC,EAAG,EAAQ,IAAI,CAAC,EAAE,GAAG,CAAC,EAAQ,GAChE,EACA,EAAa,SAAS,CAAC,SAAS,CAAG,EAAa,SAAS,CAAC,SAAS,CAAG,EAAW,SAAS,CAAC,SAAS,CAmEpG,IAAI,EAAY,SAAS,CAAI,CAAE,CAAI,CAAE,CAAQ,CAAE,CAAa,EAC1D,EAAW,GAAY,EACvB,EAAO,OAAO,GACT,IACH,EAAO,EAAK,WAAW,GACvB,EAAW,EAAS,WAAW,IAEjC,IACI,EADA,EAAU,EAAK,MAAM,CAErB,EAAU,KAAK,GAAG,CAAC,GACnB,EAAiB,CAAC,EACtB,IAAK,EAAK,EAAG,EAAK,EAAS,MAAM,CAAE,IACjC,CAAc,CAAC,CAAQ,CAAC,EAAG,CAAC,CAAG,EAEjC,IAAK,EAAK,EAAG,EAAK,EAAS,IAAM,CAC/B,IAAI,EAAI,CAAI,CAAC,EAAG,CAChB,GAAI,AAAM,MAAN,GAEA,KAAK,GACH,CAAc,CAAC,EAAE,EAAI,EAAS,CAChC,GAAI,AAAM,MAAN,GAAa,AAAY,IAAZ,EACf,QACF,OAAM,AAAI,MAAM,EAAI,iCAAmC,EAAO,IAChE,CAEJ,CACA,EAAO,EAAW,GAClB,IAAI,EAAS,EAAE,CACX,EAAa,AAAY,MAAZ,CAAI,CAAC,EAAE,CACxB,IAAK,EAAK,EAAa,EAAI,EAAG,EAAK,EAAK,MAAM,CAAE,IAAM,CACpD,IAAI,EAAI,CAAI,CAAC,EAAG,CAChB,GAAI,KAAK,EACP,EAAO,IAAI,CAAC,EAAW,CAAc,CAAC,EAAE,QACrC,GAAI,AAAM,MAAN,EAAW,CAClB,IAAI,EAAQ,EACZ,GACE,UACO,AAAa,MAAb,CAAI,CAAC,EAAG,EAAY,EAAK,EAAK,MAAM,CAAE,AAC/C,EAAO,IAAI,CAAC,EAAW,EAAK,KAAK,CAAC,EAAQ,EAAG,IAC/C,MACE,MAAM,AAAI,MAAM,EAAI,4BACxB,CACA,OAAO,EAAmB,EAAQ,EAAM,EAC1C,EACA,SAAS,EAAmB,CAAM,CAAE,CAAI,CAAE,CAAU,EAClD,IAAyC,EAArC,EAAM,CAAO,CAAC,EAAE,CAAE,EAAO,CAAO,CAAC,EAAE,CACvC,IAAK,EAAK,EAAO,MAAM,CAAG,EAAG,GAAM,EAAG,IACpC,EAAM,EAAI,GAAG,CAAC,CAAM,CAAC,EAAG,CAAC,KAAK,CAAC,IAC/B,EAAO,EAAK,KAAK,CAAC,GAEpB,OAAO,EAAa,EAAI,MAAM,GAAK,CACrC,CAQA,SAAS,EAAQ,CAAC,CAAE,CAAI,EAEtB,GAAI,AADJ,CAAA,EAAO,EAAQ,EAAf,EACS,MAAM,GAAI,CACjB,GAAI,EAAE,MAAM,GACV,MAAO,CAAE,MAAO,CAAC,EAAE,CAAE,WAAY,CAAA,CAAM,CACzC,OAAM,AAAI,MAAM,4CAClB,CACA,GAAI,EAAK,MAAM,CAAC,IAAK,CACnB,GAAI,EAAE,MAAM,GACV,MAAO,CAAE,MAAO,CAAC,EAAE,CAAE,WAAY,CAAA,CAAM,EACzC,GAAI,EAAE,UAAU,GACd,MAAO,CACL,MAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CACpB,EAAE,CACF,MAAM,KAAK,CAAC,KAAM,MAAM,CAAC,EAAE,UAAU,KAAK,GAAG,CAAC,MAAM,SAAS,CAAC,OAAO,CAAE,CAAC,EAAG,EAAE,GAE/E,WAAY,CAAA,CACd,EACF,IAAI,EAAM,MAAM,KAAK,CAAC,KAAM,MAAM,EAAE,UAAU,GAAK,IAAI,GAAG,CAAC,MAAM,SAAS,CAAC,OAAO,CAAE,CAAC,EAAG,EAAE,EAE1F,OADA,EAAI,OAAO,CAAC,CAAC,EAAE,EACR,CACL,MAAO,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAE,GAC3B,WAAY,CAAA,CACd,CACF,CACA,IAAI,EAAM,CAAA,EAKV,GAJI,EAAE,UAAU,IAAM,EAAK,UAAU,KACnC,EAAM,CAAA,EACN,EAAI,EAAE,GAAG,IAEP,EAAK,MAAM,UACb,AAAI,EAAE,MAAM,GACH,CAAE,MAAO,CAAC,EAAE,CAAE,WAAY,CAAA,CAAM,EAClC,CACL,MAAO,MAAM,KAAK,CAAC,KAAM,MAAM,EAAE,UAAU,KAAK,GAAG,CAAC,OAAO,SAAS,CAAC,OAAO,CAAE,GAC9E,WAAY,CACd,EAIF,IAFA,IACc,EADV,EAAM,EAAE,CACR,EAAO,EACJ,EAAK,UAAU,IAAM,EAAK,UAAU,CAAC,IAAS,GAAG,CAEtD,EAAO,AADP,CAAA,EAAS,EAAK,MAAM,CAAC,EAArB,EACc,QAAQ,CACtB,IAAI,EAAQ,EAAO,SAAS,CACxB,EAAM,UAAU,KAClB,EAAQ,EAAK,KAAK,CAAC,GAAO,GAAG,GAC7B,EAAO,EAAK,IAAI,IAElB,EAAI,IAAI,CAAC,EAAM,UAAU,GAC3B,CAEA,OADA,EAAI,IAAI,CAAC,EAAK,UAAU,IACjB,CAAE,MAAO,EAAI,OAAO,GAAI,WAAY,CAAI,CACjD,CACA,SAAS,EAAa,CAAC,CAAE,CAAI,CAAE,CAAQ,EACrC,IAAI,EAAM,EAAQ,EAAG,GACrB,MAAQ,AAAA,CAAA,EAAI,UAAU,CAAG,IAAM,EAAA,EAAM,EAAI,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,MA9DpC,EA+DvB,OA7DF,AAAI,AA6DgB,EA7DR,AADZ,CAAA,EAAW,CADc,EA+DF,IA9DA,CAAvB,EACqB,MAAM,CAClB,CAAQ,CA4DG,EA5DI,CAEjB,IA0Da,EA1DC,GA2DrB,GAAG,IAAI,CAAC,GACV,CA6CA,SAAS,EAAiB,CAAC,EACzB,GAAI,EAAU,CAAC,GAAI,CACjB,IAAI,EAAI,CAAC,EACT,GAAI,IAAM,EAAS,GACjB,OAAO,EAAuB,IAAI,EAAa,OAAO,IAAM,IAAI,EAAa,EAC/E,OAAM,AAAI,MAAM,oBAAsB,EACxC,CACA,IAAI,EAAQ,AAAS,MAAT,CAAC,CAAC,EAAE,CACZ,GACF,CAAA,EAAI,EAAE,KAAK,CAAC,EADd,EAEA,IAAI,EAAS,EAAE,KAAK,CAAC,MACrB,GAAI,EAAO,MAAM,CAAG,EAClB,MAAM,AAAI,MAAM,oBAAsB,EAAO,IAAI,CAAC,MACpD,GAAI,AAAkB,IAAlB,EAAO,MAAM,CAAQ,CACvB,IAAI,EAAO,CAAM,CAAC,EAAE,CAIpB,GAHgB,MAAZ,CAAI,CAAC,EAAE,EACT,CAAA,EAAO,EAAK,KAAK,CAAC,EADpB,EAGI,AADJ,CAAA,EAAO,CAAC,CAAR,IACa,EAAS,IAAS,CAAC,EAAU,GACxC,MAAM,AAAI,MAAM,oBAAsB,EAAO,6BAC/C,IAAI,EAAO,CAAM,CAAC,EAAE,CAChB,EAAe,EAAK,OAAO,CAAC,KAKhC,GAJI,GAAgB,IAClB,GAAQ,EAAK,MAAM,CAAG,EAAe,EACrC,EAAO,EAAK,KAAK,CAAC,EAAG,GAAgB,EAAK,KAAK,CAAC,EAAe,IAE7D,EAAO,EACT,MAAM,AAAI,MAAM,sDAClB,GAAQ,AAAI,MAAM,EAAO,GAAG,IAAI,CAAC,KACjC,EAAI,CACN,CAEA,GAAI,CADU,kBAAkB,IAAI,CAAC,GAEnC,MAAM,AAAI,MAAM,oBAAsB,GACxC,GAAI,EACF,OAAO,IAAI,EAAa,OAAO,EAAQ,IAAM,EAAI,IAGnD,IADA,IAAI,EAAI,EAAE,CAAE,EAAO,EAAE,MAAM,CAAgB,EAAO,EApwCzB,EAqwClB,EAAO,GACZ,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,EAAM,IACtB,CAAA,GAvwCuB,CAuwCf,EACG,GACT,CAAA,EAAO,CAAA,EACT,GA1wCuB,EA6wCzB,OADA,EAAM,GACC,IAAI,EAAW,EAAG,EAC3B,CAYA,SAAS,EAAW,CAAC,QACnB,AAAI,AAAa,UAAb,OAAO,EACF,AAbX,SAA0B,CAAC,EACzB,GAAI,EACF,OAAO,IAAI,EAAa,OAAO,IAEjC,GAAI,EAAU,GAAI,CAChB,GAAI,IAAM,EAAS,GACjB,MAAM,AAAI,MAAM,EAAI,uBACtB,OAAO,IAAI,EAAa,EAC1B,CACA,OAAO,EAAiB,EAAE,QAAQ,GACpC,EAG4B,GAEtB,AAAa,UAAb,OAAO,EACF,EAAiB,GAEtB,AAAa,UAAb,OAAO,EACF,IAAI,EAAa,GAEnB,CACT,CAlHA,EAAW,SAAS,CAAC,OAAO,CAAG,SAAS,CAAK,EAC3C,OAAO,EAAQ,IAAI,CAAE,EACvB,EACA,EAAa,SAAS,CAAC,OAAO,CAAG,SAAS,CAAK,EAC7C,OAAO,EAAQ,IAAI,CAAE,EACvB,EACA,EAAa,SAAS,CAAC,OAAO,CAAG,SAAS,CAAK,EAC7C,OAAO,EAAQ,IAAI,CAAE,EACvB,EACA,EAAW,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAK,CAAE,CAAQ,EAGtD,GAjsCmB,KAAA,IA+rCf,GACF,CAAA,EAAQ,EADV,EAEI,AAAU,KAAV,GAAgB,EAClB,OAAO,EAAa,IAAI,CAAE,EAAO,GAEnC,IADA,IAA2E,EAAvE,EAAI,IAAI,CAAC,KAAK,CAAE,EAAI,EAAE,MAAM,CAAE,EAAM,OAAO,CAAC,CAAC,EAAE,EAAE,EAC9C,EAAE,GAAK,GACZ,EAAQ,OAAO,CAAC,CAAC,EAAE,EACnB,GAAO,AAHuD,UAGjD,KAAK,CAAC,EAAM,MAAM,EAAI,EAGrC,MAAO,AADK,CAAA,IAAI,CAAC,IAAI,CAAG,IAAM,EAA9B,EACe,CACjB,EACA,EAAa,SAAS,CAAC,QAAQ,CAAG,SAAS,CAAK,CAAE,CAAQ,QAGxD,CAFI,IAAU,GACZ,CAAA,EAAQ,EADV,EAEI,AAAS,IAAT,GAAe,GACV,EAAa,IAAI,CAAE,EAAO,GAC5B,OAAO,IAAI,CAAC,KAAK,CAC1B,EACA,EAAa,SAAS,CAAC,QAAQ,CAAG,EAAa,SAAS,CAAC,QAAQ,CACjE,EAAa,SAAS,CAAC,MAAM,CAAG,EAAW,SAAS,CAAC,MAAM,CAAG,EAAa,SAAS,CAAC,MAAM,CAAG,WAC5F,OAAO,IAAI,CAAC,QAAQ,EACtB,EACA,EAAW,SAAS,CAAC,OAAO,CAAG,WAC7B,OAAO,SAAS,IAAI,CAAC,QAAQ,GAAI,GACnC,EACA,EAAW,SAAS,CAAC,UAAU,CAAG,EAAW,SAAS,CAAC,OAAO,CAC9D,EAAa,SAAS,CAAC,OAAO,CAAG,WAC/B,OAAO,IAAI,CAAC,KAAK,AACnB,EACA,EAAa,SAAS,CAAC,UAAU,CAAG,EAAa,SAAS,CAAC,OAAO,CAClE,EAAa,SAAS,CAAC,OAAO,CAAG,EAAa,SAAS,CAAC,UAAU,CAAG,WACnE,OAAO,SAAS,IAAI,CAAC,QAAQ,GAAI,GACnC,EAwEA,IAAK,IAAI,EAAI,EAAG,EAAI,IAAK,IACvB,CAAO,CAAC,EAAE,CAAG,EAAW,GACpB,EAAI,GACN,CAAA,CAAO,CAAC,CAAC,EAAE,CAAG,EAAW,CAAC,EAD5B,EAiBF,OAdA,EAAQ,GAAG,CAAG,CAAO,CAAC,EAAE,CACxB,EAAQ,IAAI,CAAG,CAAO,CAAC,EAAE,CACzB,EAAQ,QAAQ,CAAG,CAAO,CAAC,GAAG,CAC9B,EAAQ,GAAG,CAAG,EACd,EAAQ,GAAG,CAAG,EACd,EAAQ,GAAG,CAAG,EACd,EAAQ,GAAG,CA5QX,SAAa,CAAC,CAAE,CAAC,EAGf,OAFA,EAAI,EAAW,GAAG,GAAG,GACrB,EAAI,EAAW,GAAG,GAAG,GACd,EAAE,MAAM,CAAC,EAAI,EAAG,IAAI,QAAQ,CAAC,EACtC,EAyQA,EAAQ,UAAU,CAAG,SAAS,CAAC,EAC7B,OAAO,aAAa,GAAc,aAAa,GAAgB,aAAa,CAC9E,EACA,EAAQ,WAAW,CA3QnB,SAAqB,CAAC,CAAE,CAAC,CAAE,CAAG,EAC5B,EAAI,EAAW,GAEf,IAAI,EAAU,GAAO,KAAK,MAAM,CAC5B,EAAM,EAAK,EAFf,EAAI,EAAW,IAGX,EAAS,AADgB,EAAK,EAAG,GACnB,QAAQ,CAAC,GAAK,GAAG,CAAC,GACpC,GAAI,EAAO,OAAO,CAChB,OAAO,EAAI,GAAG,CAAC,KAAK,KAAK,CAAC,IAAY,IAGxC,IAAK,IAFD,EAAS,EAAQ,EAljCZ,KAkjC0B,KAAK,CACpC,EAAS,EAAE,CAAE,EAAa,CAAA,EACrB,EAAK,EAAG,EAAK,EAAO,MAAM,CAAE,IAAM,CACzC,IAAI,EAAM,EAAa,CAAM,CAAC,EAAG,CAAI,CAAA,EAAK,EAAI,EAAO,MAAM,CAAG,CAAM,CAAC,EAAK,EAAE,CArjCrE,IAqjC+E,CAAA,EArjC/E,IAsjCH,EAAQ,EAAS,IAAY,GACjC,EAAO,IAAI,CAAC,GACR,EAAQ,CAAM,CAAC,EAAG,EACpB,CAAA,EAAa,CAAA,CADf,CAEF,CACA,OAAO,EAAI,GAAG,CAAC,EAAQ,SAAS,CAAC,EA3jCxB,IA2jCsC,CAAA,GACjD,EA0PA,EAAQ,SAAS,CAAG,SAAS,CAAM,CAAE,CAAI,CAAE,CAAU,EACnD,OAAO,EAAmB,EAAO,GAAG,CAAC,GAAa,EAAW,GAAQ,IAAK,EAC5E,EACO,CACT,GACsB,MAAA,IAAX,GAA0B,EAAO,cAAc,CAAC,YACzD,CAAA,EAAO,OAAO,CAAG,CADnB,EAGsB,YAAlB,OAAO,QAAyB,OAAO,GAAG,EAC5C,OAAO,WACL,OAAO,CACT,EAEJ,CACF,EA71C8B,WAC5B,OAAO,GAAO,AAAC,CAAA,EAAG,CAAE,CAAC,EAAkB,EAAG,CAAC,EAAE,CAAC,AAAD,EAAG,AAAC,CAAA,EAAM,CAAE,QAAS,CAAC,CAAE,CAAA,EAAG,OAAO,CAAE,GAAM,EAAI,OAAO,AACpG,GA81CA,SAAS,IACP,MAAM,AAAI,MAAM,uBAClB,CAoBA,IAAI,EADkB,CAAE,IAAK,OAAQ,EAejC,EAAS,CAAC,EAAK,IAAQ,CAAA,CAAE,IAAA,EAAK,GAAA,CAAG,CAAA,EACjC,EAA0B,EAAO,WACjC,EAAO,AAAC,GAAW,EAAO,OAAQ,GAYlC,EAAW,SAAS,CAAE,EACxB,OAAO,SAAS,CAAG,EAGjB,IAAK,IAFD,EAAI,EAAI,MAAM,CACd,EAAS,AAAI,MAAM,GACd,EAAI,EAAG,EAAI,EAAG,IACrB,CAAM,CAAC,EAAE,CAAG,EAAG,CAAG,CAAC,EAAE,EAEvB,OAAO,CACT,CACF,EAGI,EAAe,CAAE,IAAK,CAAS,EAG/B,EAAY,SAAS,CAAG,EAC1B,OAAO,SAAS,CAAE,EAEhB,IAAK,IADD,EAAS,EAAE,CACN,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,EAAI,EAAG,IACrC,MAAM,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAQ,EAAG,CAAG,CAAC,EAAE,GAE9C,OAAO,CACT,CACF,EAGI,EAAU,CAAC,EAAK,IAAQ,CAAA,CAAE,IAAA,EAAK,GAAA,CAAG,CAAA,EAClC,EAAQ,AAAC,GAAW,EAAQ,QAAS,GACrC,EAAgB,CAClB,IAAK,AAAC,GAAO,AAAC,GACZ,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAQ,OAAQ,EAAE,EAAE,EAEzB,AAAU,UAAV,EAAE,GAAG,CACA,EAAQ,QAAS,EAAG,EAAE,EAAE,QAEjC,GAEJ,EACI,EAAc,CAChB,MAAO,AAAC,GAAM,AAAC,IACb,GAAI,AAAU,SAAV,EAAE,GAAG,CACP,OAAO,EAAQ,OAAQ,EAAE,EAAE,EAE7B,GAAI,AAAU,UAAV,EAAE,GAAG,CAAc,CACrB,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAE,EAE9B,GAAI,AAAW,UAAX,EAAG,GAAG,CACR,OAAO,EAAQ,QAAS,EAAE,EAAE,CAAC,EAAG,EAAE,EAEtC,CACA,GACF,EACA,SAAU,IAAM,CAClB,EACI,EAAoB,CAAE,KAAM,EAAO,OAAQ,IAAM,CAAY,EAG7D,EAAW,SAAS,CAAI,CAAE,CAAO,CAAE,CAAC,CAAE,CAAE,EAC1C,OAAO,GAAK,GAAK,EAAI,EAAG,MAAM,CAAG,EAAK,CAAE,CAAC,EAAE,EAAI,CACjD,EACI,EAAW,SAAS,CAAC,CAAE,CAAC,CAAE,CAAE,EAC9B,IAAI,EAAM,GAAK,GAAK,EAAI,EAAG,MAAM,CAGjC,OAFI,GACF,CAAA,CAAE,CAAC,EAAE,CAAG,CAAA,EACH,CACT,EAGI,EAAY,CAAC,EAAI,IAAQ,CAAA,CAAE,IAAK,WAAY,GAAA,EAAI,GAAA,CAAG,CAAA,EACnD,EAAY,AAAC,GAAM,AAAC,GAAS,AAAC,GAAU,KAC1C,IAAI,EAAU,CAAA,EACR,EAAK,EAAK,EAAE,CAClB,KAES,CADI,GAEP,CACJ,IAAM,EAAI,EAAG,KAAK,CACZ,EAAK,EAAK,EAAE,CAAC,GACnB,GAAI,AAAW,SAAX,EAAG,GAAG,EAAe,EAAE,EAAG,EAAE,EAAG,CACjC,EAAM,IAAI,CAAC,EAAG,EAAE,EAChB,EAAK,EAAE,CAAC,KAAK,CACb,IAAM,EAAK,EAAK,EAAE,CAAC,KAAK,AACxB,CAAA,EAAK,EAAE,CAAC,KAAK,CAAG,EAAK,EAAI,EACzB,QACF,CACA,EAAU,CAAA,CACZ,CACF,EACI,EAAU,AAAC,GAAS,AAAC,GAAO,KAC9B,IAAI,EAAU,CAAA,EACR,EAAK,EAAK,EAAE,CAClB,KAES,CADI,GAEP,CACJ,IAAM,EAAI,EAAG,KAAK,CACZ,EAAK,EAAG,KAAK,AACnB,CAAA,EAAG,KAAK,CAAG,EAAK,EAAI,EACpB,IAAM,EAAK,EAAK,EAAE,CAAC,GACnB,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,EAAG,EAAG,EAAE,IACR,QACF,CACA,GAAI,AAAW,YAAX,EAAG,GAAG,CAAgB,CACxB,EAAU,CAAA,EACV,QACF,CACA,GACF,CACF,EAeI,EAAa,SAAS,CAAE,EAC1B,OAAO,SAAS,CAAI,EAClB,OAAO,SAAS,CAAE,EAGhB,IAAK,IAFD,EAAM,EACN,EAAM,EAAG,MAAM,CACV,EAAI,EAAG,EAAI,EAAK,IACvB,EAAM,EAAG,GAAK,CAAE,CAAC,EAAE,EAErB,OAAO,CACT,CACF,CACF,EAaI,EAAgB,CAClB,MArCe,SAAS,CAAE,EAC1B,OAAO,SAAS,CAAI,EAClB,OAAO,SAAS,CAAE,EAGhB,IAAK,IAFD,EAAM,EACN,EAAM,EAAG,MAAM,CACV,EAAI,EAAM,EAAG,GAAK,EAAG,IAC5B,EAAM,EAAG,CAAE,CAAC,EAAE,EAAE,GAElB,OAAO,CACT,CACF,CACF,EA2BE,MAAO,EACP,QAAS,AAAC,IACR,IAAM,EAAS,EAAW,MAAM,CAChC,OAAO,AAAC,GAAO,EAAc,KAAK,CAAC,AAAC,GAAM,AAAC,GAAQ,EAAW,UAAU,GAAG,MAAM,CAAC,EAAG,IAAI,IAAM,EACjG,CACF,EAOI,EAAS,CAAC,EAAI,IAAQ,CAAA,CAAE,IAAK,QAAS,GAAA,EAAI,GAAA,CAAG,CAAA,EAkB7C,EAAwB,CAAE,aAZN,SAAS,CAAE,EACjC,OAAO,SAAS,CAAE,EAGhB,IAAK,IAFD,EAAI,EAAG,MAAM,CACb,EAAS,MAAM,GACV,EAAI,EAAG,EAAI,EAAG,IACrB,CAAM,CAAC,EAAE,CAAG,EAAG,GAAG,CAAE,CAAC,EAAE,EAEzB,OAAO,CACT,CACF,EAG+D,SAAU,IAAM,CAAa,EAGxF,EAAQ,SAAS,CAAE,EACrB,OAAO,SAAS,CAAE,EAChB,OAAO,IAAO,CAChB,CACF,EAKI,EAAW,CAAE,GAHE,CAGe,EAC9B,EAAQ,CAAE,GALE,CAKY,EAGxB,EAAoB,SAAS,CAAE,EACjC,OAAO,SAAS,CAAE,EAChB,OAAO,SAAS,CAAE,EAChB,OAAO,SAAS,CAAC,EACf,OAAO,SAAS,CAAC,EACf,OAAO,EAAI,EAAI,EAAK,IAAM,EAAI,EAAK,CACrC,CACF,CACF,CACF,CACF,EAKI,EAAY,CAAE,QAAyB,AAHvB,EArOe,MAEA,MADA,MAuOmC,IAAK,IAAM,CAAS,EACtF,EAAS,CAAE,QAAyB,AALvB,EApOkB,MAEA,MADA,MAwO6B,IAAK,IAAM,CAAM,EAG7E,EAAoC,WACtC,SAAS,EAAO,CAAC,EACf,MAAO,CAAC,EAAE,AACZ,CACA,SAAS,EAAO,CAAC,EACf,OAAO,SAAS,CAAC,EACf,MAAO,CAAC,EAAG,EAAE,AACf,CACF,CACA,SAAS,EAAO,CAAC,EACf,OAAO,SAAS,CAAC,EACf,OAAO,SAAS,CAAC,EACf,MAAO,CAAC,EAAG,EAAG,EAAE,AAClB,CACF,CACF,CACA,SAAS,EAAQ,CAAE,EACjB,OAAO,SAAS,CAAE,EAChB,OAAO,EAAG,MAAM,CAAC,EACnB,CACF,CACA,OAAO,SAAS,CAAK,EACnB,OAAO,SAAS,CAAG,EACjB,OAAO,SAAS,CAAI,EAClB,OAAO,SAAS,CAAE,EAChB,OAAO,SAAS,CAAK,EAgBnB,OAAO,AAfP,SAAS,EAAG,CAAG,CAAE,CAAG,EAClB,OAAQ,EAAM,GACZ,KAAK,EACH,OAAO,EAAK,EAAE,CAChB,MAAK,EACH,OAAO,EAAI,GAAQ,EAAG,CAAK,CAAC,EAAI,EAClC,MAAK,EACH,OAAO,EAAM,EAAI,GAAQ,EAAG,CAAK,CAAC,EAAI,IAAI,EAAG,CAAK,CAAC,EAAM,EAAE,EAC7D,MAAK,EACH,OAAO,EAAM,EAAM,EAAI,GAAQ,EAAG,CAAK,CAAC,EAAI,IAAI,EAAG,CAAK,CAAC,EAAM,EAAE,IAAI,EAAG,CAAK,CAAC,EAAM,EAAE,EACxF,SACE,IAAI,EAAQ,EAAM,AAA8B,EAA9B,KAAK,KAAK,CAAC,AAAC,CAAA,EAAM,CAAA,EAAO,GAC3C,OAAO,EAAM,EAAI,GAAS,EAAG,EAAK,KAAS,EAAG,EAAO,GACzD,CACF,EACU,EAAG,EAAM,MAAM,CAC3B,CACF,CACF,CACF,CACF,CACF,IAGI,EAAY,AAAC,GAAM,EACnB,EAAmB,CACrB,SAAU,AAAC,IACT,IAAM,EAAS,EAAgB,MAAM,GACrC,OAAO,EAAkB,EAAO,KAAK,EAAE,EAAO,QAAQ,GAAG,GAAG,EAAE,EAAgB,IAAI,CACpF,EACA,SAAU,AAAC,GAAoB,EAAiB,QAAQ,CAAC,GAAiB,GAC1E,SAAU,IAAM,EAChB,UAAW,IAAM,CACnB,EAGI,EAAY,SAAS,CAAK,CAAE,CAAG,EAIjC,IAHA,IAAI,EAAO,EAAQ,EAAM,GAAK,EAC1B,EAAS,AAAI,MAAM,EAAQ,CAAA,EAAM,CAAA,EAAS,GAC1C,EAAI,EAAO,EAAI,EACZ,IAAM,GACX,CAAM,CAAC,IAAI,CAAG,EACd,GAAK,EAGP,OADA,CAAM,CAAC,EAAE,CAAG,EACL,CACT,EAgBI,EAAgB,AAAgC,YAAhC,OAAO,MAAM,SAAS,CAAC,IAAI,CAf3B,SAAS,CAAK,CAAE,CAAK,SACvC,AAAI,EAAQ,EACH,EAAE,CAGJ,AADM,AAAI,MAAM,GACT,IAAI,CAAC,EACrB,EACwB,SAAS,CAAK,CAAE,CAAK,EAG3C,IAAK,IAFD,EAAS,EAAE,CACX,EAAI,EACC,EAAI,EAAG,EAAI,EAAO,IACzB,CAAM,CAAC,IAAI,CAAG,EAEhB,OAAO,CACT,EAEI,EAAmC,WACrC,SAAS,EAAM,CAAI,CAAE,CAAI,EACvB,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,IAAI,CAAG,CACd,CACA,IAAI,EAAY,CAAC,EACjB,SAAS,EAAU,CAAI,EACrB,OAAO,SAAS,CAAI,EAClB,OAAO,IAAI,EAAM,EAAM,EACzB,CACF,CAWA,OAAO,SAAS,CAAK,CAAE,CAAE,EACvB,OAAO,AAXT,SAAqB,CAAI,EAIvB,IAHA,IAAI,EAAS,EAAE,CACX,EAAQ,EACR,EAAK,EACF,IAAO,GACZ,CAAM,CAAC,IAAQ,CAAG,EAAG,IAAI,CACzB,EAAK,EAAG,IAAI,CAEd,OAAO,CACT,EAEqB,EAAM,GAAW,GAAW,GACjD,CACF,IACI,EAAS,SAAS,CAAE,EACtB,OAAO,EAAG,MAAM,AAClB,EACI,EAAa,SAAS,CAAM,CAAE,CAAI,CAAE,CAAE,EACxC,OAAO,AAAc,IAAd,EAAG,MAAM,CAAS,EAAO,CAAC,GAAK,EAAK,CAAE,CAAC,EAAE,EAAE,EAAG,KAAK,CAAC,GAC7D,EACI,EAAgB,SAAS,CAAI,CAAE,CAAO,CAAE,CAAE,CAAE,CAAE,EAChD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,MAAM,CAAE,EAAI,EAAG,IACpC,GAAI,EAAG,CAAE,CAAC,EAAE,EACV,OAAO,EAAK,GAEhB,OAAO,CACT,EACI,EAAoB,SAAS,CAAI,CAAE,CAAO,CAAE,CAAE,CAAE,CAAE,EACpD,IAAK,IAAI,EAAI,EAAG,MAAM,CAAG,EAAG,GAAK,EAAG,IAClC,GAAI,EAAG,CAAE,CAAC,EAAE,EACV,OAAO,EAAK,GAEhB,OAAO,CACT,EACI,EAAS,SAAS,CAAG,EACvB,GAAI,EAAI,MAAM,EAAI,IAChB,OAAO,MAAM,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAE,GAG1C,IAAK,IADD,EAAS,EAAE,CACN,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,EAAI,EAAG,IAErC,IAAK,IADD,EAAK,CAAG,CAAC,EAAE,CACN,EAAI,EAAG,EAAI,EAAG,MAAM,CAAE,EAAI,EAAG,IACpC,EAAO,IAAI,CAAC,CAAE,CAAC,EAAE,EAGrB,OAAO,CACT,EACI,EAAa,SAAS,CAAE,CAAE,CAAE,EAC9B,OAAO,EAAG,MAAM,CAAC,EACnB,EACI,GAoCK,SAAS,CAAO,CAAE,CAAY,CAAE,CAAE,EACvC,IAAI,SACJ,AAAI,EAAG,MAAM,CAAG,EACP,IAET,AAxCF,SAAS,EAAY,CAAO,CAAE,CAAY,CAAE,CAAG,CAAE,CAAG,CAAE,CAAI,CAAE,CAAE,MACxD,EACA,EACA,EACA,EACA,EACA,EAUJ,IARA,CAAA,EAAM,EAAQ,CAAA,EAAK,GAAQ,CAAA,CAAA,EACjB,EAAO,GACf,EAAY,EAAS,EAAc,EAAK,EAAK,EAAM,GACjD,EAAK,EAAM,GACb,EAAY,EAAS,EAAc,EAAK,EAAK,EAAK,GACpD,EAAI,EACJ,EAAI,EACJ,EAAI,EACG,EAAI,GAAO,EAAI,GACpB,EAAI,CAAG,CAAC,EAAE,CACV,EAAI,CAAG,CAAC,EAAE,CAEN,AADA,EAAa,EAAQ,GAAG,IACpB,GACN,CAAG,CAAC,IAAI,CAAG,EACX,EAAE,IAEF,CAAG,CAAC,IAAI,CAAG,EACX,EAAE,GAGN,KAAO,EAAI,GACT,CAAG,CAAC,IAAI,CAAG,CAAG,CAAC,IAAI,CAErB,KAAO,EAAI,GACT,CAAG,CAAC,IAAI,CAAG,CAAG,CAAC,IAAI,AAEvB,EAMc,EAAS,EADrB,EAAM,EAAG,KAAK,CAAC,GACyB,EAAG,KAAK,CAAC,GAAI,EAAG,EAAG,MAAM,EAC1D,EACT,EAEE,GAAY,SAAS,CAAC,CAAE,CAAC,CAAE,CAAC,EAC9B,OAAO,EAAE,KAAK,CAAC,EAAG,EACpB,EACI,GAAc,SAAS,CAAE,CAAE,CAAE,CAAE,CAAE,EAGnC,IAAK,IAFD,EAAI,EAAG,MAAM,CAAG,EAAG,MAAM,CAAG,EAAG,MAAM,CAAG,EAAG,MAAM,CACjD,EAAS,AAAI,MAAM,GACd,EAAI,EAAG,EAAI,EAAG,IACrB,CAAM,CAAC,EAAE,CAAG,EAAG,CAAE,CAAC,EAAE,EAAE,CAAE,CAAC,EAAE,EAE7B,OAAO,CACT,EACI,GAAU,SAAS,CAAC,CAAE,CAAE,EAE1B,IAAK,IADD,EAAM,EAAG,MAAM,CACV,EAAI,EAAG,EAAI,EAAK,IACvB,GAAI,EAAE,CAAE,CAAC,EAAE,EACT,MAAO,CAAA,EAEX,MAAO,CAAA,CACT,EACI,GAAU,SAAS,CAAC,CAAE,CAAE,EAE1B,IAAK,IADD,EAAM,EAAG,MAAM,CACV,EAAI,EAAG,EAAI,EAAK,IACvB,GAAI,CAAC,EAAE,CAAE,CAAC,EAAE,EACV,MAAO,CAAA,EAEX,MAAO,CAAA,CACT,EAGI,GAAU,AAAC,GAAO,AAAC,GAAO,AAAC,GAAO,GAAY,EAAI,EAAI,GACtD,GAAS,AAAC,GAAS,AAAC,GAAO,GAC7B,EACA,AAAC,GACC,AAAI,AAAM,OAAN,EACK,EAEL,AAAM,OAAN,EACK,EAEL,AAAM,OAAN,EACK,QAET,IAEF,GAEE,GAAY,AAAC,GAAM,CAAC,EAAE,CACtB,GAAU,AAAC,GAAO,AAAC,IACrB,IAAM,EAAS,EAAE,CAEX,EAAO,EACX,AAAC,GACC,AAAI,GAAK,GAAK,EAAI,EAAG,MAAM,CAClB,EAAO,OAAQ,CAAE,CAAC,EAAE,EAEtB,EANA,CAAE,MAAO,CAAE,GAgBtB,OANA,EAAQ,GAAM,AAAC,GAAM,KACnB,IAAM,EAAO,EAAE,CACf,EAAK,IAAI,CAAC,GACV,EAAU,EAAG,IAAI,GAAM,KACvB,EAAO,IAAI,CAAC,EACd,KACO,CACT,EACI,GAAa,AAAC,IAChB,IAAM,EAAK,GAAQ,AAAC,GAAM,AAAC,GAAM,AAAc,OAAd,EAAI,GAAG,IACxC,OAAO,AAAC,GAAM,EAAG,GAAO,GAAK,GAC/B,EACI,GAAO,AAAC,GAAO,AAAC,IAClB,IAAM,EAAK,EAAc,EAAM,EAAS,EAAI,SAC5C,AAAI,AAAW,SAAX,EAAG,GAAG,CACD,EAAO,OAAQ,CAAE,CAAC,EAAG,EAAE,CAAC,EAE1B,CACT,EACI,GAAM,AAAC,GAAO,AAAC,GAAO,GAAQ,EAAI,GAwDlC,GAAmB,CAAE,SAA0B,CA9BlB,EA/gBjB,AAAC,GACf,AAAe,YAAX,EAAG,GAAG,EAGK,SAAX,EAAG,GAAG,OAGV,IAygBO,SAAS,CAAS,EACvB,OAAO,SAAS,CAAI,EAClB,OAAO,SAAS,CAAI,EAClB,OAAO,SAAS,CAAE,EAChB,OAAO,SAAS,CAAC,EAGf,IAFA,IAAI,EAAS,EAAE,CACX,EAAQ,IACC,CACX,IAAI,EAAQ,EAAG,GACf,EAAO,IAAI,CAAC,EAAK,IACjB,IAAI,EAAQ,EAAK,GACjB,GAAI,EAAW,GACb,OAAO,EACT,EAAQ,EAAU,EACpB,CACF,CACF,CACF,CACF,CACF,GAIa,AAAC,IACd,GAAI,AAAU,SAAV,EAAE,GAAG,CACP,OAAO,EAAE,EAAE,CAEb,GACF,GA1XU,AAAC,GAAM,EAAE,EAAE,EADX,AAAC,GAAM,EAAE,EAAE,CA4X+E,EA+BpG,SAAS,GAAU,CAAM,CAAE,CAAM,CAAE,CAAK,CAAE,CAAK,CAAE,CAAK,CAAE,CAAK,CAAE,CAAC,SAC9D,AAAI,AAAK,MAAL,EACK,IACA,AAAa,WAAb,OAAO,EACP,EAAO,GACP,AAAa,UAAb,OAAO,EACP,EAAM,GACN,AAAa,UAAb,OAAO,EACP,EAAM,GACN,AAAsC,mBAAtC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAC/B,EAAM,GAEN,EAAM,EACjB,CAGA,IAAI,GAAmB,CAAC,EAAK,EAAI,IAAQ,CAAA,CAAE,IAAA,EAAK,GAAA,EAAI,GAAA,CAAG,CAAA,EACnD,GAAU,AAAC,GAAW,AAAC,GAAW,GAAiB,UAAW,EAAQ,GACtE,GAAQ,AAAC,GAAW,AAAC,GAAW,GAAiB,QAAS,EAAQ,GAClE,GAAQ,AAAC,GAAW,AAAC,GAAW,GAAiB,QAAS,EAAQ,GAClE,GAA+B,GAAiB,gBAChD,GAAuB,AAAC,IAC1B,IAAM,EAAK,AAAC,GACV,AAAI,AAAU,iBAAV,EAAE,GAAG,CACA,6BAA+B,EAAE,EAAE,CAAG,KAE3C,AAAU,oBAAV,EAAE,GAAG,CACA,sBA7BJ,KAAK,SAAS,CA6BwB,EAAE,EAAE,EAAI,IAE/C,AAAU,YAAV,EAAE,GAAG,CACA,oBAvnBJ,AAunBsC,EAAE,EAAE,CAvnBxC,QAAQ,GAunBoC,MAAQ,EAAG,EAAE,EAAE,EAElE,AAAI,AAAU,UAAV,EAAE,GAAG,CACA,oBAAsB,EAAE,EAAE,CAAG,OAAS,EAAG,EAAE,EAAE,EAElD,AAAU,UAAV,EAAE,GAAG,CACA,YAAc,EAAE,EAAE,CAAG,OAAS,EAAG,EAAE,EAAE,EAE1C,AAAU,iBAAV,EAAE,GAAG,CACA,6BAET,IAEF,MAAO,mDAAqD,EAAG,EACjE,EAyCI,GAAQ,CAAC,EAAK,EAAI,IAAQ,CAAA,CAAE,IAAA,EAAK,GAAA,EAAI,GAAA,CAAG,CAAA,EACxC,GAAsB,GAAM,OAC5B,GAAe,CACjB,MAAO,AAAC,GAAO,AAAC,IACd,IAAM,EAAK,GAAa,KAAK,CAAC,AAAC,GAAQ,AAAC,GAAM,EAAG,GAAG,IAAM,GAmBpD,EAlBqB,AAAC,IAC1B,IAAI,EAiBQ,GAjBY,EAAQ,EAAY,EAAO,CAAA,EAAM,EACzD,KAAO,GAAM,CACX,IAAM,EAAI,EAAO,EAAK,EACtB,GAAI,AAAW,QAAX,EAAG,GAAG,CAAY,CACpB,EAAO,CAAA,EACP,EAAO,EACP,QACF,CACA,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,EAAQ,GAAM,OAAQ,EAAG,EAAE,CAAE,GAC7B,EAAQ,EAAG,EAAE,CACb,QACF,CACA,GACF,CACA,OAAO,CACT,EAEA,OAAO,AAAC,GAAM,EAAG,EAAG,GACtB,EACA,MAAO,AAAC,GACK,AAAC,GAAe,AAAC,IAC1B,IAAI,EAAQ,EAAY,EAAQ,EAAY,EAAO,CAAA,EAAM,EACzD,KAAO,GAAM,CACX,IAAM,EAAI,EAAO,EAAI,EACrB,GAAI,AAAU,QAAV,EAAE,GAAG,CAAY,CACnB,EAAO,CAAA,EACP,EAAO,EACP,QACF,CACA,GAAI,AAAU,SAAV,EAAE,GAAG,CAAa,CACpB,EAAQ,EAAG,GAAG,EAAE,EAAE,EAClB,EAAQ,EAAE,EAAE,CACZ,QACF,CACA,GACF,CACA,OAAO,CACT,CAUJ,EAGc,OAAO,YAAY,CAAC,OAsBV,AAAkB,aAAlB,OAAO,QAA0B,AAAU,MAAV,QAAkB,AAA2B,KAAA,IAApB,OAAO,QAAQ,EAA2B,OAAO,SAAS,CAAC,OAAO,QAAQ,CAAC,CAC/H,OAAO,SAAS,CAAC,aAAa,CAChC,OAAO,SAAS,CAAC,WAAW,CAGxD,IAAI,GAA4B,CAC9B,kBAAmB,AAAC,IAClB,IAAM,EAAY,GAA0B,YAAY,GAAG,QAAQ,CAAC,GACpE,OAAO,AAAC,IACN,IAAM,EAAK,GAA0B,iBAAiB,GAAG,YAAY,CAAC,GACtE,OAAO,AAAC,GAAM,EAAU,EAAG,GAC7B,CACF,EACA,kBAAmB,IAAM,EAEzB,aAAc,IAAM,CACtB,EAGI,GAAmC,EAAiB,QAAQ,CAAC,GAC7D,GAA2C,GAA0B,iBAAiB,CAAC,GACvF,GAAe,AAAC,IAClB,IAAM,EAAK,GACT,AAAC,GAAM,EACP,AAAC,GAAM,EACP,AAAC,GAAM,EACP,AAAC,GAAM,EACP,EACA,AAAC,GAAM,EACP,SAEF,AAAI,AAAW,YAAX,EAAG,GAAG,CACD,EAAQ,OAAQ,GAAiB,eAAgB,UAEtD,AAAW,SAAX,EAAG,GAAG,CACD,EAAQ,QAAS,EAAG,EAAE,OAE/B,GACF,EACI,GAAsB,AAAC,IACzB,IAAM,EAAK,GAAM,iBACX,EAAK,GAAU,GACrB,OAAO,AAAC,IACN,IAAM,EAAK,GAAa,GACxB,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAE,EAE9B,GAAI,AAAW,UAAX,EAAG,GAAG,CAAc,CACtB,IAAM,EAAK,EAAW,AAAC,GAAM,EAAS,AAAC,GAAM,AAAC,GAAO,EAAO,OAAQ,CAAE,KAAM,EAAG,KAAM,CAAG,GAAI,EAAG,EAAE,EACjG,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,GAAiB,eAAgB,kBAE1D,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,IAAM,EAAK,EAAG,CAAC,EAAG,EAAE,CAAC,IAAI,IAAK,EAAG,EAAE,CAAC,IAAI,CAAC,EACzC,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAG,EAAE,GAEjC,GAAI,AAAW,UAAX,EAAG,GAAG,CACR,OAAO,EAAQ,QAAS,EAAG,EAAE,CAEjC,CACF,CACA,GACF,CACF,EACI,GAAY,AAAC,IACf,IAAM,EAAK,GACT,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EACA,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,GAEF,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAE,EAE9B,GAAI,AAAW,UAAX,EAAG,GAAG,CAAc,KA7LN,EA8LhB,IAAM,EA7LI,AAAA,CAAA,AAAI,GADE,EA8LM,EAAG,EAAE,CA7Lb,IAAO,EAAI,AASmB,EATd,GASoB,EAqLlD,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,GAAiB,eAAgB,YAE1D,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,QAAS,EAAG,EAAE,CAEjC,CACA,GACF,EACI,GAAc,AAAC,IACjB,IAAM,EAAK,GAAM,SACX,EAAK,GAAkB,AAAC,IAC5B,IAAM,EAAM,GAAQ,GACpB,OAAO,AAAC,IACN,IAAM,EAAK,EAAQ,SACnB,AAAI,AAAW,SAAX,EAAG,GAAG,CACD,EAAQ,OAAQ,EAAI,EAAG,EAAE,GAE9B,AAAW,UAAX,EAAG,GAAG,CACD,EAAQ,QAAS,EAAG,EAAE,OAE/B,GACF,CACF,GACA,OAAO,AAAC,IACN,IAAM,EAAK,GAAa,GACxB,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAE,EAE9B,GAAI,AAAW,UAAX,EAAG,GAAG,CAAc,CACtB,IAAM,EAAK,EAAG,EAAG,EAAE,EACnB,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAG,EAAE,GAEjC,GAAI,AAAW,UAAX,EAAG,GAAG,CACR,OAAO,EAAQ,QAAS,EAAG,EAAE,CAEjC,CACA,GACF,CACF,EAGI,GAAiB,CAAE,YAAa,AAAC,GAAM,AAAC,GAAO,EAAQ,QAAS,CAAC,EAAG,EACpE,GAAe,AAAC,GAAoB,IAAO,CAAA,CAC7C,WAAY,AAAC,IACX,IAAM,EAAI,GACR,AAAC,GAAO,EACR,AAAC,GAAO,EACR,AAAC,GAAO,EACR,AAAC,GAAO,EACR,AAAC,GAAO,EACR,EACA,SAEF,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAgB,WAAW,CAAC,EAAE,EAAE,EAAE,GAEvC,AAAU,YAAV,EAAE,GAAG,CACA,EAAQ,OAAQ,GAAiB,eAAgB,gBAE1D,GACF,CACF,CAAA,EACI,GAAkB,AAAC,GAAwB,AAAC,GAAoB,AAAC,GAAiB,IAAM,IAAO,CAAA,CACjG,YAAa,AAAC,GAAW,AAAC,IACxB,IAAM,EAAY,EAAa,aAAa,CAAC,GACvC,EAAK,EAAoB,eAAe,CA9UzC,AA8UiE,KAAW,EA9UnE,AA8UkD,EA9U9C,AA8U+D,CA9U9D,CA8UmD,EA9UhD,EA8UiC,GACvD,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,IAAM,EAAK,GAAM,GACjB,GAAI,AAAc,SAAd,EAAG,EAAE,CAAC,GAAG,CACX,OAAO,EAAQ,OAAQ,EAAG,EAAG,EAAE,CAAC,EAAE,GAEpC,GAAI,AAAc,UAAd,EAAG,EAAE,CAAC,GAAG,CAAc,CACzB,IAAM,EAAK,EAAG,EAAE,CAAC,EAAE,CACb,EAAK,EAAgB,WAAW,CAAC,GAAQ,GAC/C,MAAQ,AAAA,CAAA,KACN,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,IAAM,EAAK,EAAG,EAAE,CAChB,OAAO,AAAC,GAAQ,EAAQ,OAAQ,EAClC,CACA,GAAI,AAAW,UAAX,EAAG,GAAG,CAAc,CACtB,IAAM,EAAK,EAAG,EAAE,CAChB,OAAO,AAAC,GAAO,EAAG,EACpB,CACA,GACF,CAAA,IAAK,AAAC,QAx7BW,SAw7BF,EAAQ,QAAS,CAx7Bf,EAw7ByB,EAAa,aAAa,CAAC,GAv7BpE,SAAS,CAAK,EACnB,OAAO,SAAS,CAAG,EACjB,IAAI,EAAO,CAAC,EACZ,IAAK,IAAI,KAAO,EACV,AAAA,CAAA,CAAC,CAAA,EAAE,cAAc,CAAC,IAAI,CAAC,EAAK,IAC9B,CAAA,CAAI,CAAC,EAAI,CAAG,CAAG,CAAC,EAAI,AAAJ,EAIpB,OADA,CAAI,CAAC,EAAM,CAAG,EACP,CACT,CACF,GA46BqF,GAAI,KACrF,CACA,GACF,CACA,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,GAAiB,QAAS,EAAW,KAE9D,GACF,CACF,CAAA,EAGI,GA9xEiG,AARnF,CAAA,CAAC,EAAI,EAAM,EAAQ,KACnC,GAAI,GAAQ,AAAgB,UAAhB,OAAO,GAAqB,AAAgB,YAAhB,OAAO,EAC7C,IAAK,IAAI,KAAO,EAAkB,GAC3B,EAAa,IAAI,CAAC,EAAI,IAAQ,AAHZ,KAAA,IAGY,GACjC,EAAU,EAAI,EAAK,CAAE,IAAK,IAAM,CAAI,CAAC,EAAI,CAAE,WAAY,CAAE,CAAA,EAAO,EAAiB,EAAM,EAAA,GAAS,EAAK,UAAU,AAAC,GAEtH,OAAO,CACT,CAAA,EAM0C,EALW,AAAO,OAA7C,EA8xEkB,KA9xEkC,EAAS,EAAa,IAAQ,CAAC,EAKtC,UAAW,CAAE,MAAO,EAAK,WAAY,CAAA,CAAK,GACpG,GAyxEF,SAAS,GAAQ,CAAC,EAChB,MAAQ,AAAA,CAAA,EAAG,GAAmB,OAAM,AAAN,EAAS,EACzC,CASA,SAAS,GAAM,CAAC,EACd,OAAO,SAAS,CAAC,EACf,OAAO,EAAE,GAAG,CAAC,EACf,CACF,CACA,SAAS,GAAM,CAAC,EACd,OAAO,SAAS,CAAC,EACf,OAAO,EAAE,QAAQ,CAAC,EACpB,CACF,CACA,SAAS,GAAM,CAAC,EACd,OAAO,SAAS,CAAC,EACf,OAAO,EAAE,KAAK,CAAC,EACjB,CACF,CACA,SAAS,GAAM,CAAC,EACd,OAAO,SAAS,CAAC,EACf,OAAO,EAAE,GAAG,CAAC,EACf,CACF,CAWA,IACI,GAAiB,CAAE,IAAK,GAAO,KAAsB,GAAQ,GAAI,IAAK,GAAO,IAAqB,GAAQ,EAAG,EAG7G,GAAsB,CAExB,IAAK,AAAC,GAAM,AAAC,IACX,IAAM,EAXD,AAWW,EAXT,GAAG,GAYV,OAAO,GAAM,GAAM,GAAM,GAAG,IAAK,IAAK,EACxC,CAGF,EAiBI,GAAa,SAAS,CAAE,CAAE,CAAE,EAG9B,IAAK,IAFD,EAAM,CAAE,CAAC,EAAE,CACX,EAAM,EAAG,MAAM,CACV,EAAI,EAAG,EAAI,EAAK,IACvB,EAAM,EAAG,GAAK,CAAE,CAAC,EAAE,EAErB,OAAO,CACT,KAaU,AAAC,GAAO,AAAC,GAAO,GAAW,EAAI,GAoBrC,GAAwB,CAAE,GAAI,CAAA,EAAO,GAAI,CAAA,EAAM,QAAS,AAAC,GAAM,AAAC,GAAM,GAAsB,IAAI,CAAC,GAAsB,GAAG,CAAC,IAAI,GAAI,KAfxH,SAAS,CAAE,EACxB,OAAO,SAAS,CAAE,EAChB,OAAO,GAAM,CACf,CACF,EAWuJ,KAVxI,SAAS,CAAE,EACxB,OAAO,SAAS,CAAE,EAChB,OAAO,GAAM,CACf,CACF,EAMuK,IALzJ,SAAS,CAAC,EACtB,MAAO,CAAC,CACV,CAGoL,EAGhL,GAAS,AAAC,GAAM,AAAC,GAAM,AAAC,GAAO,KACjC,IAAM,EAAI,EAAS,EAAM,EAAS,EAAG,GAC/B,EAAI,EAAS,EAAM,EAAS,EAAG,EACvB,CAAA,SAAV,EAAE,GAAG,EAAe,AAAU,SAAV,EAAE,GAAG,GAC3B,EAAS,EAAG,EAAE,EAAE,CAAE,GAClB,EAAS,EAAG,EAAE,EAAE,CAAE,GAEtB,EAGI,GAAY,AAAC,GAAM,EACnB,GAAkC,EAAW,IAAO,GAAe,GAAG,EA8DtE,GANK,CAziB4B,EA+iBqB,GA/iBf,AAAC,GAAO,AAAC,GAAM,AAyiBxC,GAziBwD,QAAQ,CAAC,AAAC,GAAM,EACxF,EAAE,EAAE,CACJ,EAAE,EAAE,CAAG,EAAI,EAAO,OAAQ,EAAO,EAAG,EAAE,EAAE,EAAG,EAAE,EAAE,CAAG,EAAI,IAAM,IAC3D,EAAO,EAAG,AA4iB6C,GA5iBzC,EAAI,KAsiBkB,AAAC,GAAM,GAC1C,GACA,CAAC,GAAe,IAAI,IAAK,EAAE,CAC3B,IAAI,EAAG,GAAe,IAAI,CAAC,GAC1B,CAAC,GAAe,GAAG,CAAC,EAGrB,GAAe,AAAC,GAAM,AAAC,IACzB,GAAI,AAAM,IAAN,EACF,MAAO,CAAC,EAAE,CAAC,CAEb,GAAI,EAAE,MAAM,GAAK,EACf,MAAO,CAAC,EAAE,CAEZ,GAAI,EAAE,MAAM,CAAG,EACb,MAAO,EAAE,CAEX,GAAI,AAAM,IAAN,EACF,OAAO,EAAS,IAAW,GAE7B,IAAM,EAAI,EAAW,AAAC,GAAO,EAAS,AAAC,GAAM,AAAC,GAAO,EAAO,OAAQ,CAAE,KAAM,EAAG,KAAM,CAAG,GAAI,GAC5F,GAAI,AAAU,SAAV,EAAE,GAAG,CAAa,CACpB,IAAM,EAAK,EAAE,EAAE,CAAC,IAAI,CACpB,MAAO,IAAI,EAAS,AAAC,GAAO,CAAC,KAAO,EAAG,EAAE,GAAa,EAAI,EAAI,GAAG,EAAE,EAAE,CAAC,IAAI,MAAO,GAAa,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,AAC9G,CACA,MAAO,EAAE,AACX,EACI,GAAoB,AAAC,GAA8B,AAAC,IACtD,IAAI,EAAuB,EAA2B,EAAuB,EAA2B,EAAsB,CAAA,EAAM,EACpI,KAAO,GAAqB,CAC1B,IAAM,EAAI,EAAsB,EAAI,EACpC,GAAI,EAAI,GAAK,EAAI,EAAG,CAClB,EAAsB,CAAA,EACtB,EAAsB,GAAe,IAAI,CACzC,QACF,CACA,GAAI,AAAM,IAAN,EAAS,CACX,EAAsB,CAAA,EACtB,EAAsB,GAAe,GAAG,CACxC,QACF,CACA,GAAI,AAAM,IAAN,EAAS,CACX,EAAsB,CAAA,EACtB,EAAsB,GAAQ,GAC9B,QACF,CACA,GAAK,AAAA,CAAA,EAAI,EAAI,CAAA,EAAK,EAAG,CACnB,EAAuB,EACvB,EAAuB,EAAI,EAAI,EAC/B,QACF,CACA,GAAI,EAAI,GAAI,CACV,EAAsB,CAAA,EACtB,EAAsB,EAAc,CAAC,EAAE,CAAC,EAAE,CAC1C,QACF,CACA,IAAM,EAAK,EAAS,IACd,EAAK,GAAS,EAAG,EAAU,AAAC,CAAA,EAAI,EAAI,CAAA,EAAK,EAAI,EAAG,KAChD,EAAK,GAAS,EAAG,EAAU,EAAG,KACpC,EAAsB,CAAA,EACtB,EAAsB,AAjN1B,CAAA,SAAe,CAAC,EACd,OAAO,SAAS,CAAC,EACf,OAAO,EAAE,MAAM,CAAC,EAClB,CACF,CAAA,EA6MgC,GAAM,GAAI,GAAoB,GAAG,CAAC,GAAI,KAAM,EAC1E,CACA,OAAO,CACT,EACI,GAAwB,AAAC,IAC3B,GAAI,AAAM,IAAN,EACF,OAAO,GAAM,OAAQ,CAAC,EAAE,CAAC,CAAE,IAE7B,IAAM,EAAQ,AAAC,GAAO,AAAC,GACrB,AAAI,AAAW,SAAX,EAAG,GAAG,CACD,IACF,EAAM,EAAG,EAAE,EAAE,EAAK,EAAI,MACtB,EAAS,AAAC,GAAO,CAAC,KAAO,EAAG,EAAE,EAC/B,AAAC,GACC,AAAI,EAAI,EAAE,MAAM,CACP,CAAC,CAAC,EAAE,EAAI,EAEV,GAAK,EAEd,EAAG,EAAE,GAER,CAEI,EAAE,CAEL,EAAO,GAAsB,EAAI,EAAI,GAC3C,OAAO,GAAM,OAAQ,EAAM,GAAM,GAAI,EACvC,EACI,GAAkB,AAAC,IACrB,GAAI,EAAI,EACN,MAAO,EAAE,CAEX,GAAI,AAAM,IAAN,EACF,MAAO,CAAC,EAAE,CAAC,CAEb,IAAM,EAAK,GAAsB,SACjC,AAAI,AAAW,QAAX,EAAG,GAAG,CACD,EAAE,CAEP,AAAW,SAAX,EAAG,GAAG,CACD,EAAG,EAAE,MAEd,GACF,EACI,GAAmB,AAAC,GACtB,AAAI,EAAI,EACC,EAAE,CAEP,AAAM,IAAN,EACK,CAAC,CAAC,EAAE,CAAC,CAAC,CAER,EAAiB,GAAa,KAAK,CAAE,GAAsB,IAIhE,GAAgB,sHAMhB,GAHJ,SAAkB,CAAI,EACpB,MAAO,AAAgB,UAAhB,OAAO,GAAqB,GAAc,IAAI,CAAC,EACxD,EAII,GAAY,EAAE,CAClB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAK,EAAE,EACzB,GAAU,IAAI,CAAC,AAAC,CAAA,EAAI,GAAA,EAAK,QAAQ,CAAC,IAAI,KAAK,CAAC,IA+B9C,IAAI,GAxBJ,SAAe,CAAI,MAIb,EAHJ,GAAI,CAAC,GAAiB,GACpB,MAAM,UAAU,gBAGlB,IAAM,EAAM,IAAI,WAAW,IAiB3B,OAhBA,CAAG,CAAC,EAAE,CAAG,AAAC,CAAA,EAAI,SAAS,EAAK,KAAK,CAAC,EAAG,GAAI,GAAA,IAAS,GAClD,CAAG,CAAC,EAAE,CAAG,IAAM,GAAK,IACpB,CAAG,CAAC,EAAE,CAAG,IAAM,EAAI,IACnB,CAAG,CAAC,EAAE,CAAG,AAAI,IAAJ,EACT,CAAG,CAAC,EAAE,CAAG,AAAC,CAAA,EAAI,SAAS,EAAK,KAAK,CAAC,EAAG,IAAK,GAAA,IAAS,EACnD,CAAG,CAAC,EAAE,CAAG,AAAI,IAAJ,EACT,CAAG,CAAC,EAAE,CAAG,AAAC,CAAA,EAAI,SAAS,EAAK,KAAK,CAAC,GAAI,IAAK,GAAA,IAAS,EACpD,CAAG,CAAC,EAAE,CAAG,AAAI,IAAJ,EACT,CAAG,CAAC,EAAE,CAAG,AAAC,CAAA,EAAI,SAAS,EAAK,KAAK,CAAC,GAAI,IAAK,GAAA,IAAS,EACpD,CAAG,CAAC,EAAE,CAAG,AAAI,IAAJ,EACT,CAAG,CAAC,GAAG,CAAG,AAAC,CAAA,EAAI,SAAS,EAAK,KAAK,CAAC,GAAI,IAAK,GAAA,EAAO,cAAgB,IACnE,CAAG,CAAC,GAAG,CAAG,EAAI,WAAa,IAC3B,CAAG,CAAC,GAAG,CAAG,IAAM,GAAK,IACrB,CAAG,CAAC,GAAG,CAAG,IAAM,GAAK,IACrB,CAAG,CAAC,GAAG,CAAG,IAAM,EAAI,IACpB,CAAG,CAAC,GAAG,CAAG,AAAI,IAAJ,EACH,CACT,EA+DA,SAAS,GAAK,CAAC,CAAE,CAAC,EAChB,OAAO,GAAK,EAAI,IAAM,GAAK,CAC7B,CA4DA,IAAI,GAAK,AA/GT,SAAa,CAAI,CAAE,CAAO,CAAE,CAAQ,EAClC,SAAS,EAAa,CAAK,CAAE,CAAS,CAAE,CAAG,CAAE,CAAM,EACjD,IAAI,EAOJ,GANqB,UAAjB,OAAO,GACT,CAAA,EAAQ,AAdd,SAAuB,CAAG,EACxB,EAAM,SAAS,mBAAmB,IAClC,IAAM,EAAQ,EAAE,CAChB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,EAAE,EAChC,EAAM,IAAI,CAAC,EAAI,UAAU,CAAC,IAE5B,OAAO,CACT,EAO4B,EADxB,EAGyB,UAArB,OAAO,GACT,CAAA,EAAY,GAAc,EAD5B,EAGK,AAAC,CAAA,AAA4B,OAA5B,CAAA,EAAa,CAAA,GAAuB,AAAe,KAAK,IAApB,EAAwB,KAAK,EAAI,EAAW,MAAK,AAAL,IAAY,GAChG,MAAM,UAAU,oEAElB,IAAI,EAAQ,IAAI,WAAW,GAAK,EAAM,MAAM,EAM5C,GALA,EAAM,GAAG,CAAC,GACV,EAAM,GAAG,CAAC,EAAO,EAAU,MAAM,EAEjC,AADA,CAAA,EAAQ,EAAS,EAAjB,CACK,CAAC,EAAE,CAAG,AAAW,GAAX,CAAK,CAAC,EAAE,CA+FJ,GA9Ff,CAAK,CAAC,EAAE,CAAG,AAAW,GAAX,CAAK,CAAC,EAAE,CAAQ,IACvB,EAAK,CACP,EAAS,GAAU,EACnB,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,EAAE,EACxB,CAAG,CAAC,EAAS,EAAE,CAAG,CAAK,CAAC,EAAE,CAE5B,OAAO,CACT,CACA,OAAO,AAnEX,SAAyB,CAAG,CAAE,EAAS,CAAC,EACtC,OAAO,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,IAAM,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,IAAM,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,IAAM,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,EAAE,CAAC,CAAG,IAAM,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,CAAG,EAAS,CAAC,CAAG,CAAC,EAAS,GAAG,CAAC,AACpf,EAiE2B,EACzB,CACA,GAAI,CACF,EAAa,IAAI,CAmFR,IAlFX,CAAE,MAAO,EAAK,CACd,CAGA,OAFA,EAAa,GAAG,CAjCR,uCAkCR,EAAa,GAAG,CAjCR,uCAkCD,CACT,EA6Ea,EAAM,EA3DnB,SAAc,CAAK,EACjB,IAAM,EAAI,CAAC,WAAY,WAAY,WAAY,WAAW,CACpD,EAAI,CAAC,WAAY,WAAY,WAAY,UAAW,WAAW,CACrE,GAAI,AAAiB,UAAjB,OAAO,EAAoB,CAC7B,IAAM,EAAM,SAAS,mBAAmB,IACxC,EAAQ,EAAE,CACV,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,EAAE,EAChC,EAAM,IAAI,CAAC,EAAI,UAAU,CAAC,GAE9B,MAAY,MAAM,OAAO,CAAC,IACxB,CAAA,EAAQ,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EADrC,EAGA,EAAM,IAAI,CAAC,KAEX,IAAM,EAAI,KAAK,IAAI,CAAC,AADV,CAAA,EAAM,MAAM,CAAG,EAAI,CAAA,EACL,IAClB,EAAI,AAAI,MAAM,GACpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,IAAM,EAAM,IAAI,YAAY,IAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,EAAE,EACxB,CAAG,CAAC,EAAE,CAAG,CAAK,CAAC,AAAI,GAAJ,EAAS,AAAI,EAAJ,EAAM,EAAI,GAAK,CAAK,CAAC,AAAI,GAAJ,EAAS,AAAI,EAAJ,EAAQ,EAAE,EAAI,GAAK,CAAK,CAAC,AAAI,GAAJ,EAAS,AAAI,EAAJ,EAAQ,EAAE,EAAI,EAAI,CAAK,CAAC,AAAI,GAAJ,EAAS,AAAI,EAAJ,EAAQ,EAAE,AAErI,CAAA,CAAC,CAAC,EAAE,CAAG,CACT,CACA,CAAC,CAAC,EAAI,EAAE,CAAC,GAAG,CAAI,AAAA,CAAA,EAAM,MAAM,CAAG,CAAA,EAAK,EAAI,WACxC,CAAC,CAAC,EAAI,EAAE,CAAC,GAAG,CAAG,KAAK,KAAK,CAAC,CAAC,CAAC,EAAI,EAAE,CAAC,GAAG,EACtC,CAAC,CAAC,EAAI,EAAE,CAAC,GAAG,CAAI,AAAA,CAAA,EAAM,MAAM,CAAG,CAAA,EAAK,EAAI,WACxC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EAAG,CAC1B,IAAM,EAAI,IAAI,YAAY,IAC1B,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,EAAE,EACxB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAEhB,IAAK,IAAI,EAAI,GAAI,EAAI,GAAI,EAAE,EACzB,CAAC,CAAC,EAAE,CAAG,GAAK,CAAC,CAAC,EAAI,EAAE,CAAG,CAAC,CAAC,EAAI,EAAE,CAAG,CAAC,CAAC,EAAI,GAAG,CAAG,CAAC,CAAC,EAAI,GAAG,CAAE,GAE3D,IAAI,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACR,EAAI,CAAC,CAAC,EAAE,CACZ,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,EAAE,EAAG,CAC3B,IAAM,EAAI,KAAK,KAAK,CAAC,EAAI,IACnB,EAAI,GAAK,EAAG,GAAK,AAxD7B,SAAW,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,EACnB,OAAQ,GACN,KAAK,EACH,OAAO,EAAI,EAAI,CAAC,EAAI,CACtB,MAAK,EAIL,KAAK,EAHH,OAAO,EAAI,EAAI,CACjB,MAAK,EACH,OAAO,EAAI,EAAI,EAAI,EAAI,EAAI,CAG/B,CACF,EA6C+B,EAAG,EAAG,EAAG,GAAK,EAAI,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,GAAK,EAC3D,EAAI,EACJ,EAAI,EACJ,EAAI,GAAK,EAAG,MAAQ,EACpB,EAAI,EACJ,EAAI,CACN,CACA,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAG,IAAM,EACpB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAG,IAAM,EACpB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAG,IAAM,EACpB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAG,IAAM,EACpB,CAAC,CAAC,EAAE,CAAG,CAAC,CAAC,EAAE,CAAG,IAAM,CACtB,CACA,MAAO,CAAC,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,EAAI,IAAK,AAAO,IAAP,CAAC,CAAC,EAAE,CAAQ,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,EAAI,IAAK,AAAO,IAAP,CAAC,CAAC,EAAE,CAAQ,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,EAAI,IAAK,AAAO,IAAP,CAAC,CAAC,EAAE,CAAQ,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,EAAI,IAAK,AAAO,IAAP,CAAC,CAAC,EAAE,CAAQ,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,GAAK,IAAK,CAAC,CAAC,EAAE,EAAI,EAAI,IAAK,AAAO,IAAP,CAAC,CAAC,EAAE,CAAO,AAC9U,GAQI,GAAe,SAAS,CAAG,EAC7B,OAAO,SAAS,CAAS,EACvB,OAAO,AALM,GAKK,EAAK,EACzB,CACF,EAII,GAAyC,GAAa,kBAAkB,wCACxE,GAAe,CACjB,WAAY,AAAC,IACX,IAAM,EAAK,GACT,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EACA,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,SAEF,AAAI,AAAW,SAAX,EAAG,GAAG,CACD,EAAQ,OAAQ,EAAG,EAAE,EAE1B,AAAW,UAAX,EAAG,GAAG,CACD,EAAQ,QAAS,AAnBT,GAmBwB,EAAG,EAAE,EAAI,EAAG,EAAE,CAAG,GAAa,EAAG,EAAE,EAAE,UAE9E,GACF,CACF,EAKI,GAAgB,CAAE,cAAe,IAAM,OAAQ,EAE/C,GAAa,CAAE,cAAe,IAAM,IAAK,EACzC,GAAe,CAAE,cAAe,IAAM,MAAO,EAE7C,GAA0C,WAM1C,GAAoB,AAAC,GACvB,AAAI,AAAM,YAAN,EACK,EAAO,OAT2B,WAWvC,AAAM,aAAN,EACK,EAAO,OAAQ,IAEpB,AAAM,YAAN,EACK,EAAO,OAb2B,WAevC,AAAM,gBAAN,EACK,EAAO,OAf+B,eAiB3C,AAAM,WAAN,EACK,EAAO,OAjB0B,UAmBtC,AAAM,YAAN,EACK,EAAO,OAnB2B,WAqBvC,AAAM,YAAN,EACK,EAAO,OArB2B,WAuBpC,EAEL,GAA0B,CAC5B,WAAY,AAAC,IACX,IAAM,EAAK,GACT,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EACA,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,GAEF,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,EAAG,EAAE,EAE9B,GAAI,AAAW,UAAX,EAAG,GAAG,CAAc,CACtB,IAAM,EAAK,GAAkB,EAAG,EAAE,EAClC,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAAQ,OAAQ,GAAiB,kBAAmB,IAE7D,GAAI,AAAW,SAAX,EAAG,GAAG,CACR,OAAO,EAAQ,QAAS,EAAG,EAAE,CAEjC,CACA,GACF,CACF,EACI,GAAsC,GAA6B,GAAiC,AAAA,CAAA,KACtG,IAAM,EAAK,GAAY,GAAa,GAAgB,CAClD,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAU,EAAE,EAAE,GAE/B,CAEX,GAAG,GAAgB,CACjB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAa,UAAU,CAAC,EAAE,EAAE,GAE7C,CAEX,GAAG,GAAgB,CACjB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EACL,OACA,GACE,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EACA,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EAAE,EAAE,GAIH,CAEX,GAAG,IAAgB,SAAmB,SAAiB,WAAsB,UAAU,EACvF,MAAO,CACL,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,EAAG,EAAE,EAAE,GAExB,CAEX,CACF,CAAA,KAAsB,GAAgB,CACpC,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAU,EAAE,EAAE,GAE/B,CAEX,GAAmB,GAAgB,CACjC,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAwB,UAAU,CAAC,EAAE,EAAE,GAExD,CAEX,GAAG,IApHgB,CAAE,cAAe,IAAM,MAAO,QAoHX,SAtHlB,CAAE,cAAe,IAAM,OAAQ,UAyH/C,GAp2CgD,AAo2CrB,EAp2CkC,OAAO,CAAC,AAAC,CAAA,KACxE,IAAM,EAAiB,CAAE,OAAQ,AAAC,GAAM,AAAC,GAAO,AAm2CJ,GAn2CuB,IAAI,CAAC,GAAG,EAAI,EAC/E,MAAO,CAAE,OAAQ,AAk2C2B,GAl2CR,EAAE,CAAE,WAAY,IAAM,CAAe,CAC3E,CAAA,KArBgB,AAAC,GAAM,GAu3CnB,GAAkB,AAAC,GAAO,AAAC,GAAO,GAAM,EACxC,IAv3C+B,EAu3C2B,EAAO,OAAO,CAv3CjC,AAu3CI,EAv3CS,KAAK,CAAC,AAAC,GAAM,AAAC,GACpE,AAAI,AAAU,YAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAEpB,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,AAAkB,OAAlB,EAAI,EAAE,EAAE,EAAE,GAAe,EAAE,EAAE,CAAG,QAExD,KACC,IAg3CC,GAAwC,AAhfjB,CAAA,AAAC,IAC1B,IAAM,EAAY,AAAC,GAAM,AAAC,GAAM,AAAC,IAC/B,IAAM,EAAK,GAAO,GAAG,GAAG,UACxB,AAAI,EAAI,EACC,KACL,IACO,EAAU,EAAI,EAAI,GAAG,EAAI,EAAI,GAAG,MAGpC,KACP,CACF,EACA,OAAO,GAAiB,QAAQ,CAAC,AAAC,GAAM,EACtC,EACA,AAAC,CAAA,KACC,IAAM,EAAK,EACT,EACA,EACA,GACA,GAAY,AAAC,GAAO,AAAC,GAAO,AAA4B,OAA5B,EAAQ,OAAO,CAAC,GAAI,GAAc,EAAG,GAAU,EAAG,EAAE,MAAM,CAAE,KAE1F,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,GAAI,EAAG,EAAE,EAAI,GAAK,EAAG,EAAE,CAAG,EAAE,MAAM,CAAE,CAClC,IAAM,EAAK,CAAC,CAAC,EAAG,EAAE,CAAC,CACb,EAAK,EAAkB,EAAM,EAAS,AAAC,GAAO,AAA4B,OAA5B,EAAQ,OAAO,CAAC,GAAI,GAAc,GACtF,GAAI,AAAW,SAAX,EAAG,GAAG,CAAa,CACrB,IAAM,EAAK,EAAG,EAAE,CAChB,OAAO,EACL,OACA,AAAC,CAAA,KACC,IAAM,EAAK,IAAI,EAAE,CAGjB,OAFA,GAAO,EAAG,EAAE,EAAE,GAAI,KAClB,EAAU,EAAG,EAAE,CAAG,EAAI,GAAG,EAAE,MAAM,CAAG,EAAI,GAAG,KACpC,CACT,CAAA,IAEJ,CACA,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAET,GACF,CACA,OAAO,CACT,CACA,GAAI,AAAW,YAAX,EAAG,GAAG,CACR,OAAO,EAET,GACF,CAAA,KAEJ,CAAA,EA8biE,GAC7D,GAAO,AAAC,GAAM,AAAC,IACjB,IAAM,EAAI,EAAO,OAAO,CAAC,GAAG,SAC5B,AAAU,OAAN,GAGA,AAAM,OAAN,EAFK,EAKL,AAAM,OAAN,EACK,OAET,GACF,EACI,GAAkC,EAAW,IAAO,GAAe,GAAG,EACtE,GAAQ,AAAC,IACX,IAAM,EAAqB,CAAE,OAAQ,AAAC,GAAM,AAAC,GAAO,EAAa,GAAG,CAAC,GAAG,EAAI,EAC5E,OAAO,EAAc,OAAO,CAAC,CAAE,OAAQ,EAAa,IAAI,CAAE,WAAY,IAAM,CAAmB,EACjG,EACI,GAAyB,GAvzBX,CAAE,IAZP,SAAS,CAAC,EACrB,OAAO,SAAS,CAAC,EACf,OAAO,EAAI,EAAI,CACjB,CACF,EAQiC,KAAM,EAAG,IAP7B,SAAS,CAAC,EACrB,OAAO,SAAS,CAAC,EACf,OAAO,EAAI,EAAI,CACjB,CACF,EAGuD,IAAK,CAAE,GAwzB1D,GAAyB,GAAM,IAC/B,GAAmB,AAAC,GAAO,GAAI,AAAC,IAClC,IAAM,EAAK,EAAE,IAAI,CAAC,EAAE,CACd,EAAK,GAAK,AAAC,GAAM,EAAE,IAAI,CAAC,EAAE,GAAK,GAAI,GACnC,EACJ,AAAI,AAAW,YAAX,EAAG,GAAG,CACD,EAEL,AAAW,SAAX,EAAG,GAAG,CACD,EAAG,EAAE,CAAC,IAAI,MAEnB,IAEF,OAAO,EAAE,GAAG,EAAI,GAAQ,GAAQ,EAAE,GAAG,AACvC,GACI,GAAkB,AAAC,GAAM,AAAC,IAC5B,GAAI,AAAc,IAAd,EAAG,MAAM,CACX,MAAO,EAAE,CAEX,GAAI,AAAc,IAAd,EAAG,MAAM,EAAU,AAAiB,IAAjB,CAAE,CAAC,EAAE,CAAC,MAAM,CACjC,MAAO,CAAC,EAAE,CAAC,CAEb,IAAM,EAAc,EAAE,MAAM,CACtB,EAAY,EAChB,AAAC,CAAA,KACC,IAAM,EAAK,GAAQ,IAAiB,GAAO,AAAC,GAAM,AAAC,GAAM,EAAO,OAAO,CAAC,GAAG,IAAI,EAAS,AAAC,GAAO,EAAG,KAAK,EAAE,KAC1G,OAAO,AAAC,GAAM,EAAE,MAAM,EAAI,GAAe,GAAK,EAAG,GACnD,CAAA,IACA,GAEI,EAAmB,EAAS,AAAC,GAAM,GAAa,GAAG,IAAI,EAC3D,EACA,AAAC,CAAA,KACC,IAAM,EAAK,GAAQ,EAAS,GAAQ,UACpC,AAAI,AAAW,YAAX,EAAG,GAAG,CACD,EAEL,AAAW,SAAX,EAAG,GAAG,CACD,EAAG,EAAE,MAEd,GACF,CAAA,MAEF,OAAO,EAAU,GAAW,AAAC,IAC3B,IAAM,EAAK,EAAE,MAAM,CACb,EAAM,GAAM,GAAK,EAAK,EAAiB,MAAM,CAAG,CAAgB,CAAC,EAAG,CAAG,EAAE,CAC/E,OAAO,EAAU,GAAsB,IAAI,AAAC,GAAQ,EAClD,GAAI,AAAC,GAAM,EAAE,IAAI,EAAI,EAAE,IAAI,CAAC,KAAK,EACjC,EAAS,GAAQ,AAAC,GAAO,AAAC,GAAQ,CAAA,CAAE,KAAM,EAAI,KAAM,CAAG,CAAA,GAAI,IAAM,IAErE,EACF,EACI,GAAqB,AAAC,IACxB,IAAI,EAAwB,EAA4B,EAAuB,CAAA,EAAM,EACrF,KAAO,GAAsB,CAC3B,IAAM,EAAI,EACV,GAAI,AAAW,YAAX,EAAE,IAAI,CAAgB,CACxB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,GAAO,CAAA,CAAE,KAAM,EAAE,IAAI,CAAE,IAAK,EAAE,IAAI,CAAE,IAAK,EAAE,IAAI,CAAC,KAAK,AAAC,CAAA,GAAI,IAAK,GAAgB,EAAE,KAAK,EAAE,GAAgB,EAAE,KAAK,IACjK,QACF,CACA,GAAI,AAAW,aAAX,EAAE,IAAI,CAAiB,CACzB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,IAChD,IAAM,EAAK,GAAK,AAAC,GAAM,EAAE,IAAI,CAAC,EAAE,GAAK,EAAK,EAAE,EAAE,GACxC,EACJ,AAAI,AAAW,YAAX,EAAG,GAAG,CACD,EAEL,AAAW,SAAX,EAAG,GAAG,CACD,EAAG,EAAE,CAAC,IAAI,MAEnB,IAEF,MAAO,CAAE,KAAA,EAAM,IAAK,EAAM,IAAK,CAAK,CACtC,GAAG,EAAE,KAAK,GAAG,GAAgB,EAAE,KAAK,EAAE,GAAgB,EAAE,KAAK,IAC7D,QACF,CACA,GAAI,AAAW,YAAX,EAAE,IAAI,CAAgB,CACxB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,GAAU,CAAA,CAC1D,KAAA,EACA,IAAK,EACL,IAAM,AAAA,CAAA,KACJ,IAAM,EAAK,GAAK,AAAC,GAAM,EAAE,IAAI,CAAC,EAAE,GAAK,EAAK,EAAE,EAAE,SAC9C,AAAI,AAAW,YAAX,EAAG,GAAG,CACD,EAEL,AAAW,SAAX,EAAG,GAAG,CACD,EAAG,EAAE,CAAC,IAAI,MAEnB,GACF,CAAA,GACF,CAAA,GAAI,EAAE,KAAK,GAAG,GAAgB,EAAE,KAAK,EAAE,GAAgB,GAAO,AAAC,GAAO,EAAG,KAAK,EAAE,EAAE,KAAK,EAAI,EAAE,KAAK,CAAG,KACrG,QACF,CACA,GAAI,AAAW,gBAAX,EAAE,IAAI,CAAoB,CAC5B,EAAwB,CAAE,KAAM,GAAU,MAAO,GAAO,AAAC,GAAO,EAAG,KAAK,EAAE,EAAE,KAAK,EAAI,EAAE,KAAK,CAAG,EAAG,MAAO,EAAE,KAAK,AAAC,EACjH,QACF,CACA,GAAI,AAAW,WAAX,EAAE,IAAI,CAAe,CACvB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,GAAO,CAAA,CAAE,KAAM,EAAE,IAAI,CAAE,IAAK,EAAG,IAAK,EAAE,IAAI,CAAC,KAAK,AAAC,CAAA,GAAI,IAAK,GAAgB,EAAE,KAAK,EAAE,CACnI,EAAc,EAAE,KAAK,CAAE,GACxB,GACD,QACF,CACA,GAAI,AAAW,YAAX,EAAE,IAAI,CAAgB,CACxB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,GAAO,CAAA,CAAE,KAAM,EAAE,IAAI,CAAE,IAAK,EAAG,IAAK,EAAE,IAAI,CAAC,KAAK,CAAG,EAAI,CAAE,CAAA,GAAI,IAAK,GAAgB,EAAE,KAAK,EAAE,CAC3I,EAAc,EAAE,KAAK,CAAE,GACxB,GACD,QACF,CACA,GAAI,AAAW,YAAX,EAAE,IAAI,CAAgB,CACxB,EAAuB,CAAA,EACvB,EAAuB,EAAS,AAAC,GAAO,EAAS,AAAC,GAAO,CAAA,CAAE,KAAM,EAAE,IAAI,CAAE,IAAK,EAAG,IAAK,CAAE,CAAA,GAAI,IAAK,GAAgB,EAAE,KAAK,EAAE,CACxH,EAAc,EAAE,KAAK,CAAE,GACxB,GACD,QACF,CACA,GACF,CACA,OAAO,CACT,EACI,GAAwB,AAAC,GAAS,AAAC,GAAU,EAAS,GAA8B,AAAC,GAAM,AAAC,GAAQ,CAAA,CAAE,KAAM,EAAE,IAAI,CAAE,IAAK,EAAE,GAAG,CAAG,EAAG,GAAG,CAAG,EAAG,IAAK,GAAK,EAAE,GAAG,EAAE,EAAG,GAAG,CAAE,CAAA,IAAK,GAAW,AAAC,GAAM,AAAC,GAAM,EAAU,OAAO,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,IAAI,KAAS,EAAM,GAChQ,GAA0C,GAAI,AAAC,GAAM,EAAE,GAAG,EAAI,EAAE,GAAG,EAAI,EAAE,GAAG,EAAI,EAAE,IAAI,CAAC,KAAK,EAC5F,GAAuB,AAAC,IAC1B,IAAM,EAAe,GAAK,EAAE,IAAI,EAAE,GAAO,AAAC,GAAO,EAAG,KAAK,EAAE,EAAE,KAAK,GAClE,OAAO,GAAgB,EAAE,KAAK,EAAE,EAAQ,AAAA,CAAA,KACtC,IAAM,EAAK,AAAC,CAAA,AAAC,CAAA,EAAe,EAAE,MAAM,CAAG,CAAA,EAAK,EAAE,IAAI,CAAG,CAAA,EAAK,EAAI,EACxD,EAAK,GAAiB,UAC5B,AAAI,EAAK,EACA,EAAE,CAEJ,GAAU,EAAG,EAAI,EAC1B,CAAA,KACF,EACI,GAAwB,AAAC,GAAM,AAAC,GAAY,GAAM,GAAS,EAAS,AAAC,GAAO,GAAkB,EAAG,IAAI,CAAC,KAAK,EAAE,EAAG,IAAI,GAAG,KAAW,GAAkB,EAAE,MAAM,EAAE,EAAE,IAAI,CAAG,GAAO,AAAC,GAAO,EAAG,IAAI,EAAE,GAAW,IAC1M,GAAwB,AAAC,GAAe,GAC1C,AAAC,GAAS,AAAC,GAAU,EAAU,GAAM,AAAC,GAAM,EAAU,GAAO,AAAC,IAC5D,IAAM,EAAS,GAAsB,GAAG,UACxC,AAAI,GAAwB,GACnB,CAAC,EAAO,CAEV,EAAE,AACX,IACA,EAAS,IAAoB,IAE3B,GAAY,AAAC,GAAS,AAAC,IACzB,IAAM,EAAmB,EAAU,GAAY,IAC/C,OAAO,GAAO,GAAsB,IAAO,EAAW,AAAC,GAAO,GAAQ,GAAiB,GAAK,GAAmB,GAAqB,IACtI,EA2BI,GAAoC,GAAa,GAAgB,AAAC,CAAA,KACpE,IAAM,EAAK,GAAY,GAAoB,GAAoB,UAAU,GACzE,MAAO,CACL,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,EAAG,EAAE,EAAE,GAExB,CAEX,CACF,CAAA,KAAM,GAAgB,AAAC,CAAA,KACrB,IAAM,EAAK,GAAa,GAAiB,AAAA,CAAA,KACvC,IAAM,EAAM,GAAY,GAAa,GAAgB,CACnD,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAU,EAAE,EAAE,GAE/B,CAEX,GAAG,GAAgB,CACjB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAa,UAAU,CAAC,EAAE,EAAE,GAE7C,CAEX,GAAG,GAAgB,CACjB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EACL,OACA,GACE,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EACA,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,AAAC,GAAM,EAAQ,OAAQ,GAAiB,eAAgB,WACxD,EAAE,EAAE,GAIH,CAEX,GAAG,IAAgB,CAAE,cAAe,IAAM,MAAO,QAAQ,CAAE,cAAe,IAAM,IAAK,QAAQ,CAAE,cAAe,IAAM,OAAQ,UAAU,UAAU,EAChJ,MAAO,CACL,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,EAAI,EAAE,EAAE,GAEzB,CAEX,CACF,CAAA,KAAM,GAAgB,CACpB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAU,EAAE,EAAE,GAE/B,CAEX,GAAG,GAAgB,CACjB,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,GAAU,EAAE,EAAE,GAE/B,CAEX,GAAG,IAAgB,CAAE,cAAe,IAAM,QAAS,QAAQ,CAAE,cAAe,IAAM,MAAO,QAAQ,CAAE,cAAe,IAAM,OAAQ,UAChI,MAAO,CACL,gBAAiB,AAAC,GAChB,AAAI,AAAU,SAAV,EAAE,GAAG,CACA,EAAO,OAAQ,EAAG,UAAU,CAAC,EAAE,EAAE,GAEnC,CAEX,CACF,CAAA,KAAM,IAAgB,CAAE,cAAe,IAAM,MAAO,QAAQ,CAAE,cAAe,IAAM,YAAa,UAAU,UAAU,CAmBpH,CA7GmB,EA2FkB,AAAC,QAz0BjB,EAouBI,EAsGvB,IAAM,EAAI,GAlFH,AAkFoB,EAlFjB,IAAI,EAmFR,EACJ,AAAI,AAAU,SAAV,EAAE,GAAG,EA50BQ,EA60BF,GAAqB,EAAE,EAAE,EA50BnC,WACL,QAAQ,KAAK,CAAC,EAChB,GA40BM,AAAU,UAAV,EAAE,GAAG,CACA,CA5GY,EAvxBd,AAm4B2B,GAAU,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC,UAAU,EAn4B7D,QAAQ,CAoCiB,IAovB7B,SAAS,CAAE,EAChB,OAAO,WACL,KAAK,WAAW,CAAC,EAAM,EAAG,MAAM,CAAG,EAAI,EAAK,KAAK,EACnD,CACF,GAuG4E,EAAE,OAE5E,IAEF,MAAO,KACL,SAzGF,KAAK,KAAK,GA4GZ,EAzGS,WACL,KAAK,SAAS,CAAG,SAAS,CAAE,EAC1B,EAAG,IACL,CACF,IAyGJ,CAAA","sources":["<anon>","bundle/worker.js"],"sourcesContent":["(() => {\n(()=>{\n    var __create = Object.create;\n    var __defProp = Object.defineProperty;\n    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames = Object.getOwnPropertyNames;\n    var __getProtoOf = Object.getPrototypeOf;\n    var __hasOwnProp = Object.prototype.hasOwnProperty;\n    var __commonJS = (cb, mod)=>function __require() {\n            return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n                exports: {}\n            }).exports, mod), mod.exports;\n        };\n    var __copyProps = (to, from, except, desc)=>{\n        if (from && typeof from === \"object\" || typeof from === \"function\") {\n            for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n                get: ()=>from[key],\n                enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n            });\n        }\n        return to;\n    };\n    var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n        // file that has been converted to a CommonJS file using a Babel-\n        // compatible transform (i.e. \"__esModule\" has not been set), then set\n        // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n        isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n            value: mod,\n            enumerable: true\n        }) : target, mod));\n    // node_modules/big-integer/BigInteger.js\n    var require_BigInteger = __commonJS({\n        \"node_modules/big-integer/BigInteger.js\" (exports, module) {\n            var bigInt2 = function(undefined2) {\n                \"use strict\";\n                var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n                var supportsNativeBigInt = typeof BigInt === \"function\";\n                function Integer(v, radix, alphabet, caseSensitive) {\n                    if (typeof v === \"undefined\") return Integer[0];\n                    if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\n                    return parseValue(v);\n                }\n                function BigInteger(value, sign2) {\n                    this.value = value;\n                    this.sign = sign2;\n                    this.isSmall = false;\n                }\n                BigInteger.prototype = Object.create(Integer.prototype);\n                function SmallInteger(value) {\n                    this.value = value;\n                    this.sign = value < 0;\n                    this.isSmall = true;\n                }\n                SmallInteger.prototype = Object.create(Integer.prototype);\n                function NativeBigInt(value) {\n                    this.value = value;\n                }\n                NativeBigInt.prototype = Object.create(Integer.prototype);\n                function isPrecise(n) {\n                    return -MAX_INT < n && n < MAX_INT;\n                }\n                function smallToArray(n) {\n                    if (n < 1e7) return [\n                        n\n                    ];\n                    if (n < 1e14) return [\n                        n % 1e7,\n                        Math.floor(n / 1e7)\n                    ];\n                    return [\n                        n % 1e7,\n                        Math.floor(n / 1e7) % 1e7,\n                        Math.floor(n / 1e14)\n                    ];\n                }\n                function arrayToSmall(arr) {\n                    trim2(arr);\n                    var length3 = arr.length;\n                    if (length3 < 4 && compareAbs(arr, MAX_INT_ARR) < 0) switch(length3){\n                        case 0:\n                            return 0;\n                        case 1:\n                            return arr[0];\n                        case 2:\n                            return arr[0] + arr[1] * BASE;\n                        default:\n                            return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n                    }\n                    return arr;\n                }\n                function trim2(v) {\n                    var i2 = v.length;\n                    while(v[--i2] === 0);\n                    v.length = i2 + 1;\n                }\n                function createArray(length3) {\n                    var x = new Array(length3);\n                    var i2 = -1;\n                    while(++i2 < length3)x[i2] = 0;\n                    return x;\n                }\n                function truncate(n) {\n                    if (n > 0) return Math.floor(n);\n                    return Math.ceil(n);\n                }\n                function add(a, b) {\n                    var l_a = a.length, l_b = b.length, r = new Array(l_a), carry = 0, base = BASE, sum, i2;\n                    for(i2 = 0; i2 < l_b; i2++){\n                        sum = a[i2] + b[i2] + carry;\n                        carry = sum >= base ? 1 : 0;\n                        r[i2] = sum - carry * base;\n                    }\n                    while(i2 < l_a){\n                        sum = a[i2] + carry;\n                        carry = sum === base ? 1 : 0;\n                        r[i2++] = sum - carry * base;\n                    }\n                    if (carry > 0) r.push(carry);\n                    return r;\n                }\n                function addAny(a, b) {\n                    if (a.length >= b.length) return add(a, b);\n                    return add(b, a);\n                }\n                function addSmall(a, carry) {\n                    var l = a.length, r = new Array(l), base = BASE, sum, i2;\n                    for(i2 = 0; i2 < l; i2++){\n                        sum = a[i2] - base + carry;\n                        carry = Math.floor(sum / base);\n                        r[i2] = sum - carry * base;\n                        carry += 1;\n                    }\n                    while(carry > 0){\n                        r[i2++] = carry % base;\n                        carry = Math.floor(carry / base);\n                    }\n                    return r;\n                }\n                BigInteger.prototype.add = function(v) {\n                    var n = parseValue(v);\n                    if (this.sign !== n.sign) return this.subtract(n.negate());\n                    var a = this.value, b = n.value;\n                    if (n.isSmall) return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n                    return new BigInteger(addAny(a, b), this.sign);\n                };\n                BigInteger.prototype.plus = BigInteger.prototype.add;\n                SmallInteger.prototype.add = function(v) {\n                    var n = parseValue(v);\n                    var a = this.value;\n                    if (a < 0 !== n.sign) return this.subtract(n.negate());\n                    var b = n.value;\n                    if (n.isSmall) {\n                        if (isPrecise(a + b)) return new SmallInteger(a + b);\n                        b = smallToArray(Math.abs(b));\n                    }\n                    return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n                };\n                SmallInteger.prototype.plus = SmallInteger.prototype.add;\n                NativeBigInt.prototype.add = function(v) {\n                    return new NativeBigInt(this.value + parseValue(v).value);\n                };\n                NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\n                function subtract(a, b) {\n                    var a_l = a.length, b_l = b.length, r = new Array(a_l), borrow = 0, base = BASE, i2, difference;\n                    for(i2 = 0; i2 < b_l; i2++){\n                        difference = a[i2] - borrow - b[i2];\n                        if (difference < 0) {\n                            difference += base;\n                            borrow = 1;\n                        } else borrow = 0;\n                        r[i2] = difference;\n                    }\n                    for(i2 = b_l; i2 < a_l; i2++){\n                        difference = a[i2] - borrow;\n                        if (difference < 0) difference += base;\n                        else {\n                            r[i2++] = difference;\n                            break;\n                        }\n                        r[i2] = difference;\n                    }\n                    for(; i2 < a_l; i2++)r[i2] = a[i2];\n                    trim2(r);\n                    return r;\n                }\n                function subtractAny(a, b, sign2) {\n                    var value;\n                    if (compareAbs(a, b) >= 0) value = subtract(a, b);\n                    else {\n                        value = subtract(b, a);\n                        sign2 = !sign2;\n                    }\n                    value = arrayToSmall(value);\n                    if (typeof value === \"number\") {\n                        if (sign2) value = -value;\n                        return new SmallInteger(value);\n                    }\n                    return new BigInteger(value, sign2);\n                }\n                function subtractSmall(a, b, sign2) {\n                    var l = a.length, r = new Array(l), carry = -b, base = BASE, i2, difference;\n                    for(i2 = 0; i2 < l; i2++){\n                        difference = a[i2] + carry;\n                        carry = Math.floor(difference / base);\n                        difference %= base;\n                        r[i2] = difference < 0 ? difference + base : difference;\n                    }\n                    r = arrayToSmall(r);\n                    if (typeof r === \"number\") {\n                        if (sign2) r = -r;\n                        return new SmallInteger(r);\n                    }\n                    return new BigInteger(r, sign2);\n                }\n                BigInteger.prototype.subtract = function(v) {\n                    var n = parseValue(v);\n                    if (this.sign !== n.sign) return this.add(n.negate());\n                    var a = this.value, b = n.value;\n                    if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n                    return subtractAny(a, b, this.sign);\n                };\n                BigInteger.prototype.minus = BigInteger.prototype.subtract;\n                SmallInteger.prototype.subtract = function(v) {\n                    var n = parseValue(v);\n                    var a = this.value;\n                    if (a < 0 !== n.sign) return this.add(n.negate());\n                    var b = n.value;\n                    if (n.isSmall) return new SmallInteger(a - b);\n                    return subtractSmall(b, Math.abs(a), a >= 0);\n                };\n                SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n                NativeBigInt.prototype.subtract = function(v) {\n                    return new NativeBigInt(this.value - parseValue(v).value);\n                };\n                NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\n                BigInteger.prototype.negate = function() {\n                    return new BigInteger(this.value, !this.sign);\n                };\n                SmallInteger.prototype.negate = function() {\n                    var sign2 = this.sign;\n                    var small = new SmallInteger(-this.value);\n                    small.sign = !sign2;\n                    return small;\n                };\n                NativeBigInt.prototype.negate = function() {\n                    return new NativeBigInt(-this.value);\n                };\n                BigInteger.prototype.abs = function() {\n                    return new BigInteger(this.value, false);\n                };\n                SmallInteger.prototype.abs = function() {\n                    return new SmallInteger(Math.abs(this.value));\n                };\n                NativeBigInt.prototype.abs = function() {\n                    return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\n                };\n                function multiplyLong(a, b) {\n                    var a_l = a.length, b_l = b.length, l = a_l + b_l, r = createArray(l), base = BASE, product4, carry, i2, a_i, b_j;\n                    for(i2 = 0; i2 < a_l; ++i2){\n                        a_i = a[i2];\n                        for(var j = 0; j < b_l; ++j){\n                            b_j = b[j];\n                            product4 = a_i * b_j + r[i2 + j];\n                            carry = Math.floor(product4 / base);\n                            r[i2 + j] = product4 - carry * base;\n                            r[i2 + j + 1] += carry;\n                        }\n                    }\n                    trim2(r);\n                    return r;\n                }\n                function multiplySmall(a, b) {\n                    var l = a.length, r = new Array(l), base = BASE, carry = 0, product4, i2;\n                    for(i2 = 0; i2 < l; i2++){\n                        product4 = a[i2] * b + carry;\n                        carry = Math.floor(product4 / base);\n                        r[i2] = product4 - carry * base;\n                    }\n                    while(carry > 0){\n                        r[i2++] = carry % base;\n                        carry = Math.floor(carry / base);\n                    }\n                    return r;\n                }\n                function shiftLeft(x, n) {\n                    var r = [];\n                    while(n-- > 0)r.push(0);\n                    return r.concat(x);\n                }\n                function multiplyKaratsuba(x, y) {\n                    var n = Math.max(x.length, y.length);\n                    if (n <= 30) return multiplyLong(x, y);\n                    n = Math.ceil(n / 2);\n                    var b = x.slice(n), a = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);\n                    var ac = multiplyKaratsuba(a, c), bd = multiplyKaratsuba(b, d), abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n                    var product4 = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n                    trim2(product4);\n                    return product4;\n                }\n                function useKaratsuba(l1, l2) {\n                    return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;\n                }\n                BigInteger.prototype.multiply = function(v) {\n                    var n = parseValue(v), a = this.value, b = n.value, sign2 = this.sign !== n.sign, abs3;\n                    if (n.isSmall) {\n                        if (b === 0) return Integer[0];\n                        if (b === 1) return this;\n                        if (b === -1) return this.negate();\n                        abs3 = Math.abs(b);\n                        if (abs3 < BASE) return new BigInteger(multiplySmall(a, abs3), sign2);\n                        b = smallToArray(abs3);\n                    }\n                    if (useKaratsuba(a.length, b.length)) return new BigInteger(multiplyKaratsuba(a, b), sign2);\n                    return new BigInteger(multiplyLong(a, b), sign2);\n                };\n                BigInteger.prototype.times = BigInteger.prototype.multiply;\n                function multiplySmallAndArray(a, b, sign2) {\n                    if (a < BASE) return new BigInteger(multiplySmall(b, a), sign2);\n                    return new BigInteger(multiplyLong(b, smallToArray(a)), sign2);\n                }\n                SmallInteger.prototype._multiplyBySmall = function(a) {\n                    if (isPrecise(a.value * this.value)) return new SmallInteger(a.value * this.value);\n                    return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n                };\n                BigInteger.prototype._multiplyBySmall = function(a) {\n                    if (a.value === 0) return Integer[0];\n                    if (a.value === 1) return this;\n                    if (a.value === -1) return this.negate();\n                    return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n                };\n                SmallInteger.prototype.multiply = function(v) {\n                    return parseValue(v)._multiplyBySmall(this);\n                };\n                SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n                NativeBigInt.prototype.multiply = function(v) {\n                    return new NativeBigInt(this.value * parseValue(v).value);\n                };\n                NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\n                function square(a) {\n                    var l = a.length, r = createArray(l + l), base = BASE, product4, carry, i2, a_i, a_j;\n                    for(i2 = 0; i2 < l; i2++){\n                        a_i = a[i2];\n                        carry = 0 - a_i * a_i;\n                        for(var j = i2; j < l; j++){\n                            a_j = a[j];\n                            product4 = 2 * (a_i * a_j) + r[i2 + j] + carry;\n                            carry = Math.floor(product4 / base);\n                            r[i2 + j] = product4 - carry * base;\n                        }\n                        r[i2 + l] = carry;\n                    }\n                    trim2(r);\n                    return r;\n                }\n                BigInteger.prototype.square = function() {\n                    return new BigInteger(square(this.value), false);\n                };\n                SmallInteger.prototype.square = function() {\n                    var value = this.value * this.value;\n                    if (isPrecise(value)) return new SmallInteger(value);\n                    return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n                };\n                NativeBigInt.prototype.square = function(v) {\n                    return new NativeBigInt(this.value * this.value);\n                };\n                function divMod1(a, b) {\n                    var a_l = a.length, b_l = b.length, base = BASE, result = createArray(b.length), divisorMostSignificantDigit = b[b_l - 1], lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder2 = multiplySmall(a, lambda), divisor = multiplySmall(b, lambda), quotientDigit, shift, carry, borrow, i2, l, q;\n                    if (remainder2.length <= a_l) remainder2.push(0);\n                    divisor.push(0);\n                    divisorMostSignificantDigit = divisor[b_l - 1];\n                    for(shift = a_l - b_l; shift >= 0; shift--){\n                        quotientDigit = base - 1;\n                        if (remainder2[shift + b_l] !== divisorMostSignificantDigit) quotientDigit = Math.floor((remainder2[shift + b_l] * base + remainder2[shift + b_l - 1]) / divisorMostSignificantDigit);\n                        carry = 0;\n                        borrow = 0;\n                        l = divisor.length;\n                        for(i2 = 0; i2 < l; i2++){\n                            carry += quotientDigit * divisor[i2];\n                            q = Math.floor(carry / base);\n                            borrow += remainder2[shift + i2] - (carry - q * base);\n                            carry = q;\n                            if (borrow < 0) {\n                                remainder2[shift + i2] = borrow + base;\n                                borrow = -1;\n                            } else {\n                                remainder2[shift + i2] = borrow;\n                                borrow = 0;\n                            }\n                        }\n                        while(borrow !== 0){\n                            quotientDigit -= 1;\n                            carry = 0;\n                            for(i2 = 0; i2 < l; i2++){\n                                carry += remainder2[shift + i2] - base + divisor[i2];\n                                if (carry < 0) {\n                                    remainder2[shift + i2] = carry + base;\n                                    carry = 0;\n                                } else {\n                                    remainder2[shift + i2] = carry;\n                                    carry = 1;\n                                }\n                            }\n                            borrow += carry;\n                        }\n                        result[shift] = quotientDigit;\n                    }\n                    remainder2 = divModSmall(remainder2, lambda)[0];\n                    return [\n                        arrayToSmall(result),\n                        arrayToSmall(remainder2)\n                    ];\n                }\n                function divMod2(a, b) {\n                    var a_l = a.length, b_l = b.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;\n                    while(a_l){\n                        part.unshift(a[--a_l]);\n                        trim2(part);\n                        if (compareAbs(part, b) < 0) {\n                            result.push(0);\n                            continue;\n                        }\n                        xlen = part.length;\n                        highx = part[xlen - 1] * base + part[xlen - 2];\n                        highy = b[b_l - 1] * base + b[b_l - 2];\n                        if (xlen > b_l) highx = (highx + 1) * base;\n                        guess = Math.ceil(highx / highy);\n                        do {\n                            check = multiplySmall(b, guess);\n                            if (compareAbs(check, part) <= 0) break;\n                            guess--;\n                        }while (guess);\n                        result.push(guess);\n                        part = subtract(part, check);\n                    }\n                    result.reverse();\n                    return [\n                        arrayToSmall(result),\n                        arrayToSmall(part)\n                    ];\n                }\n                function divModSmall(value, lambda) {\n                    var length3 = value.length, quotient = createArray(length3), base = BASE, i2, q, remainder2, divisor;\n                    remainder2 = 0;\n                    for(i2 = length3 - 1; i2 >= 0; --i2){\n                        divisor = remainder2 * base + value[i2];\n                        q = truncate(divisor / lambda);\n                        remainder2 = divisor - q * lambda;\n                        quotient[i2] = q | 0;\n                    }\n                    return [\n                        quotient,\n                        remainder2 | 0\n                    ];\n                }\n                function divModAny(self2, v) {\n                    var value, n = parseValue(v);\n                    if (supportsNativeBigInt) return [\n                        new NativeBigInt(self2.value / n.value),\n                        new NativeBigInt(self2.value % n.value)\n                    ];\n                    var a = self2.value, b = n.value;\n                    var quotient;\n                    if (b === 0) throw new Error(\"Cannot divide by zero\");\n                    if (self2.isSmall) {\n                        if (n.isSmall) return [\n                            new SmallInteger(truncate(a / b)),\n                            new SmallInteger(a % b)\n                        ];\n                        return [\n                            Integer[0],\n                            self2\n                        ];\n                    }\n                    if (n.isSmall) {\n                        if (b === 1) return [\n                            self2,\n                            Integer[0]\n                        ];\n                        if (b == -1) return [\n                            self2.negate(),\n                            Integer[0]\n                        ];\n                        var abs3 = Math.abs(b);\n                        if (abs3 < BASE) {\n                            value = divModSmall(a, abs3);\n                            quotient = arrayToSmall(value[0]);\n                            var remainder2 = value[1];\n                            if (self2.sign) remainder2 = -remainder2;\n                            if (typeof quotient === \"number\") {\n                                if (self2.sign !== n.sign) quotient = -quotient;\n                                return [\n                                    new SmallInteger(quotient),\n                                    new SmallInteger(remainder2)\n                                ];\n                            }\n                            return [\n                                new BigInteger(quotient, self2.sign !== n.sign),\n                                new SmallInteger(remainder2)\n                            ];\n                        }\n                        b = smallToArray(abs3);\n                    }\n                    var comparison = compareAbs(a, b);\n                    if (comparison === -1) return [\n                        Integer[0],\n                        self2\n                    ];\n                    if (comparison === 0) return [\n                        Integer[self2.sign === n.sign ? 1 : -1],\n                        Integer[0]\n                    ];\n                    if (a.length + b.length <= 200) value = divMod1(a, b);\n                    else value = divMod2(a, b);\n                    quotient = value[0];\n                    var qSign = self2.sign !== n.sign, mod = value[1], mSign = self2.sign;\n                    if (typeof quotient === \"number\") {\n                        if (qSign) quotient = -quotient;\n                        quotient = new SmallInteger(quotient);\n                    } else quotient = new BigInteger(quotient, qSign);\n                    if (typeof mod === \"number\") {\n                        if (mSign) mod = -mod;\n                        mod = new SmallInteger(mod);\n                    } else mod = new BigInteger(mod, mSign);\n                    return [\n                        quotient,\n                        mod\n                    ];\n                }\n                BigInteger.prototype.divmod = function(v) {\n                    var result = divModAny(this, v);\n                    return {\n                        quotient: result[0],\n                        remainder: result[1]\n                    };\n                };\n                NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n                BigInteger.prototype.divide = function(v) {\n                    return divModAny(this, v)[0];\n                };\n                NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {\n                    return new NativeBigInt(this.value / parseValue(v).value);\n                };\n                SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n                BigInteger.prototype.mod = function(v) {\n                    return divModAny(this, v)[1];\n                };\n                NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {\n                    return new NativeBigInt(this.value % parseValue(v).value);\n                };\n                SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n                BigInteger.prototype.pow = function(v) {\n                    var n = parseValue(v), a = this.value, b = n.value, value, x, y;\n                    if (b === 0) return Integer[1];\n                    if (a === 0) return Integer[0];\n                    if (a === 1) return Integer[1];\n                    if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n                    if (n.sign) return Integer[0];\n                    if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n                    if (this.isSmall) {\n                        if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n                    }\n                    x = this;\n                    y = Integer[1];\n                    while(true){\n                        if (b & true) {\n                            y = y.times(x);\n                            --b;\n                        }\n                        if (b === 0) break;\n                        b /= 2;\n                        x = x.square();\n                    }\n                    return y;\n                };\n                SmallInteger.prototype.pow = BigInteger.prototype.pow;\n                NativeBigInt.prototype.pow = function(v) {\n                    var n = parseValue(v);\n                    var a = this.value, b = n.value;\n                    var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\n                    if (b === _0) return Integer[1];\n                    if (a === _0) return Integer[0];\n                    if (a === _1) return Integer[1];\n                    if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\n                    if (n.isNegative()) return new NativeBigInt(_0);\n                    var x = this;\n                    var y = Integer[1];\n                    while(true){\n                        if ((b & _1) === _1) {\n                            y = y.times(x);\n                            --b;\n                        }\n                        if (b === _0) break;\n                        b /= _2;\n                        x = x.square();\n                    }\n                    return y;\n                };\n                BigInteger.prototype.modPow = function(exp2, mod) {\n                    exp2 = parseValue(exp2);\n                    mod = parseValue(mod);\n                    if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n                    var r = Integer[1], base = this.mod(mod);\n                    if (exp2.isNegative()) {\n                        exp2 = exp2.multiply(Integer[-1]);\n                        base = base.modInv(mod);\n                    }\n                    while(exp2.isPositive()){\n                        if (base.isZero()) return Integer[0];\n                        if (exp2.isOdd()) r = r.multiply(base).mod(mod);\n                        exp2 = exp2.divide(2);\n                        base = base.square().mod(mod);\n                    }\n                    return r;\n                };\n                NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n                function compareAbs(a, b) {\n                    if (a.length !== b.length) return a.length > b.length ? 1 : -1;\n                    for(var i2 = a.length - 1; i2 >= 0; i2--){\n                        if (a[i2] !== b[i2]) return a[i2] > b[i2] ? 1 : -1;\n                    }\n                    return 0;\n                }\n                BigInteger.prototype.compareAbs = function(v) {\n                    var n = parseValue(v), a = this.value, b = n.value;\n                    if (n.isSmall) return 1;\n                    return compareAbs(a, b);\n                };\n                SmallInteger.prototype.compareAbs = function(v) {\n                    var n = parseValue(v), a = Math.abs(this.value), b = n.value;\n                    if (n.isSmall) {\n                        b = Math.abs(b);\n                        return a === b ? 0 : a > b ? 1 : -1;\n                    }\n                    return -1;\n                };\n                NativeBigInt.prototype.compareAbs = function(v) {\n                    var a = this.value;\n                    var b = parseValue(v).value;\n                    a = a >= 0 ? a : -a;\n                    b = b >= 0 ? b : -b;\n                    return a === b ? 0 : a > b ? 1 : -1;\n                };\n                BigInteger.prototype.compare = function(v) {\n                    if (v === Infinity) return -1;\n                    if (v === -Infinity) return 1;\n                    var n = parseValue(v), a = this.value, b = n.value;\n                    if (this.sign !== n.sign) return n.sign ? 1 : -1;\n                    if (n.isSmall) return this.sign ? -1 : 1;\n                    return compareAbs(a, b) * (this.sign ? -1 : 1);\n                };\n                BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n                SmallInteger.prototype.compare = function(v) {\n                    if (v === Infinity) return -1;\n                    if (v === -Infinity) return 1;\n                    var n = parseValue(v), a = this.value, b = n.value;\n                    if (n.isSmall) return a == b ? 0 : a > b ? 1 : -1;\n                    if (a < 0 !== n.sign) return a < 0 ? -1 : 1;\n                    return a < 0 ? 1 : -1;\n                };\n                SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n                NativeBigInt.prototype.compare = function(v) {\n                    if (v === Infinity) return -1;\n                    if (v === -Infinity) return 1;\n                    var a = this.value;\n                    var b = parseValue(v).value;\n                    return a === b ? 0 : a > b ? 1 : -1;\n                };\n                NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\n                BigInteger.prototype.equals = function(v) {\n                    return this.compare(v) === 0;\n                };\n                NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n                BigInteger.prototype.notEquals = function(v) {\n                    return this.compare(v) !== 0;\n                };\n                NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n                BigInteger.prototype.greater = function(v) {\n                    return this.compare(v) > 0;\n                };\n                NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n                BigInteger.prototype.lesser = function(v) {\n                    return this.compare(v) < 0;\n                };\n                NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n                BigInteger.prototype.greaterOrEquals = function(v) {\n                    return this.compare(v) >= 0;\n                };\n                NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n                BigInteger.prototype.lesserOrEquals = function(v) {\n                    return this.compare(v) <= 0;\n                };\n                NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n                BigInteger.prototype.isEven = function() {\n                    return (this.value[0] & 1) === 0;\n                };\n                SmallInteger.prototype.isEven = function() {\n                    return (this.value & 1) === 0;\n                };\n                NativeBigInt.prototype.isEven = function() {\n                    return (this.value & BigInt(1)) === BigInt(0);\n                };\n                BigInteger.prototype.isOdd = function() {\n                    return (this.value[0] & 1) === 1;\n                };\n                SmallInteger.prototype.isOdd = function() {\n                    return (this.value & 1) === 1;\n                };\n                NativeBigInt.prototype.isOdd = function() {\n                    return (this.value & BigInt(1)) === BigInt(1);\n                };\n                BigInteger.prototype.isPositive = function() {\n                    return !this.sign;\n                };\n                SmallInteger.prototype.isPositive = function() {\n                    return this.value > 0;\n                };\n                NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\n                BigInteger.prototype.isNegative = function() {\n                    return this.sign;\n                };\n                SmallInteger.prototype.isNegative = function() {\n                    return this.value < 0;\n                };\n                NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\n                BigInteger.prototype.isUnit = function() {\n                    return false;\n                };\n                SmallInteger.prototype.isUnit = function() {\n                    return Math.abs(this.value) === 1;\n                };\n                NativeBigInt.prototype.isUnit = function() {\n                    return this.abs().value === BigInt(1);\n                };\n                BigInteger.prototype.isZero = function() {\n                    return false;\n                };\n                SmallInteger.prototype.isZero = function() {\n                    return this.value === 0;\n                };\n                NativeBigInt.prototype.isZero = function() {\n                    return this.value === BigInt(0);\n                };\n                BigInteger.prototype.isDivisibleBy = function(v) {\n                    var n = parseValue(v);\n                    if (n.isZero()) return false;\n                    if (n.isUnit()) return true;\n                    if (n.compareAbs(2) === 0) return this.isEven();\n                    return this.mod(n).isZero();\n                };\n                NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n                function isBasicPrime(v) {\n                    var n = v.abs();\n                    if (n.isUnit()) return false;\n                    if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n                    if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n                    if (n.lesser(49)) return true;\n                }\n                function millerRabinTest(n, a) {\n                    var nPrev = n.prev(), b = nPrev, r = 0, d, t, i2, x;\n                    while(b.isEven())b = b.divide(2), r++;\n                    next: for(i2 = 0; i2 < a.length; i2++){\n                        if (n.lesser(a[i2])) continue;\n                        x = bigInt2(a[i2]).modPow(b, n);\n                        if (x.isUnit() || x.equals(nPrev)) continue;\n                        for(d = r - 1; d != 0; d--){\n                            x = x.square().mod(n);\n                            if (x.isUnit()) return false;\n                            if (x.equals(nPrev)) continue next;\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n                BigInteger.prototype.isPrime = function(strict) {\n                    var isPrime = isBasicPrime(this);\n                    if (isPrime !== undefined2) return isPrime;\n                    var n = this.abs();\n                    var bits = n.bitLength();\n                    if (bits <= 64) return millerRabinTest(n, [\n                        2,\n                        3,\n                        5,\n                        7,\n                        11,\n                        13,\n                        17,\n                        19,\n                        23,\n                        29,\n                        31,\n                        37\n                    ]);\n                    var logN = Math.log(2) * bits.toJSNumber();\n                    var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n                    for(var a = [], i2 = 0; i2 < t; i2++)a.push(bigInt2(i2 + 2));\n                    return millerRabinTest(n, a);\n                };\n                NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n                BigInteger.prototype.isProbablePrime = function(iterations, rng) {\n                    var isPrime = isBasicPrime(this);\n                    if (isPrime !== undefined2) return isPrime;\n                    var n = this.abs();\n                    var t = iterations === undefined2 ? 5 : iterations;\n                    for(var a = [], i2 = 0; i2 < t; i2++)a.push(bigInt2.randBetween(2, n.minus(2), rng));\n                    return millerRabinTest(n, a);\n                };\n                NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n                BigInteger.prototype.modInv = function(n) {\n                    var t = bigInt2.zero, newT = bigInt2.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\n                    while(!newR.isZero()){\n                        q = r.divide(newR);\n                        lastT = t;\n                        lastR = r;\n                        t = newT;\n                        r = newR;\n                        newT = lastT.subtract(q.multiply(newT));\n                        newR = lastR.subtract(q.multiply(newR));\n                    }\n                    if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n                    if (t.compare(0) === -1) t = t.add(n);\n                    if (this.isNegative()) return t.negate();\n                    return t;\n                };\n                NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n                BigInteger.prototype.next = function() {\n                    var value = this.value;\n                    if (this.sign) return subtractSmall(value, 1, this.sign);\n                    return new BigInteger(addSmall(value, 1), this.sign);\n                };\n                SmallInteger.prototype.next = function() {\n                    var value = this.value;\n                    if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n                    return new BigInteger(MAX_INT_ARR, false);\n                };\n                NativeBigInt.prototype.next = function() {\n                    return new NativeBigInt(this.value + BigInt(1));\n                };\n                BigInteger.prototype.prev = function() {\n                    var value = this.value;\n                    if (this.sign) return new BigInteger(addSmall(value, 1), true);\n                    return subtractSmall(value, 1, this.sign);\n                };\n                SmallInteger.prototype.prev = function() {\n                    var value = this.value;\n                    if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n                    return new BigInteger(MAX_INT_ARR, true);\n                };\n                NativeBigInt.prototype.prev = function() {\n                    return new NativeBigInt(this.value - BigInt(1));\n                };\n                var powersOfTwo = [\n                    1\n                ];\n                while(2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n                var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\n                function shift_isSmall(n) {\n                    return Math.abs(n) <= BASE;\n                }\n                BigInteger.prototype.shiftLeft = function(v) {\n                    var n = parseValue(v).toJSNumber();\n                    if (!shift_isSmall(n)) throw new Error(String(n) + \" is too large for shifting.\");\n                    if (n < 0) return this.shiftRight(-n);\n                    var result = this;\n                    if (result.isZero()) return result;\n                    while(n >= powers2Length){\n                        result = result.multiply(highestPower2);\n                        n -= powers2Length - 1;\n                    }\n                    return result.multiply(powersOfTwo[n]);\n                };\n                NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n                BigInteger.prototype.shiftRight = function(v) {\n                    var remQuo;\n                    var n = parseValue(v).toJSNumber();\n                    if (!shift_isSmall(n)) throw new Error(String(n) + \" is too large for shifting.\");\n                    if (n < 0) return this.shiftLeft(-n);\n                    var result = this;\n                    while(n >= powers2Length){\n                        if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n                        remQuo = divModAny(result, highestPower2);\n                        result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n                        n -= powers2Length - 1;\n                    }\n                    remQuo = divModAny(result, powersOfTwo[n]);\n                    return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n                };\n                NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n                function bitwise(x, y, fn) {\n                    y = parseValue(y);\n                    var xSign = x.isNegative(), ySign = y.isNegative();\n                    var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;\n                    var xDigit = 0, yDigit = 0;\n                    var xDivMod = null, yDivMod = null;\n                    var result = [];\n                    while(!xRem.isZero() || !yRem.isZero()){\n                        xDivMod = divModAny(xRem, highestPower2);\n                        xDigit = xDivMod[1].toJSNumber();\n                        if (xSign) xDigit = highestPower2 - 1 - xDigit;\n                        yDivMod = divModAny(yRem, highestPower2);\n                        yDigit = yDivMod[1].toJSNumber();\n                        if (ySign) yDigit = highestPower2 - 1 - yDigit;\n                        xRem = xDivMod[0];\n                        yRem = yDivMod[0];\n                        result.push(fn(xDigit, yDigit));\n                    }\n                    var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt2(-1) : bigInt2(0);\n                    for(var i2 = result.length - 1; i2 >= 0; i2 -= 1)sum = sum.multiply(highestPower2).add(bigInt2(result[i2]));\n                    return sum;\n                }\n                BigInteger.prototype.not = function() {\n                    return this.negate().prev();\n                };\n                NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\n                BigInteger.prototype.and = function(n) {\n                    return bitwise(this, n, function(a, b) {\n                        return a & b;\n                    });\n                };\n                NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\n                BigInteger.prototype.or = function(n) {\n                    return bitwise(this, n, function(a, b) {\n                        return a | b;\n                    });\n                };\n                NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\n                BigInteger.prototype.xor = function(n) {\n                    return bitwise(this, n, function(a, b) {\n                        return a ^ b;\n                    });\n                };\n                NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\n                var LOBMASK_I = 1073741824, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n                function roughLOB(n) {\n                    var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;\n                    return x & -x;\n                }\n                function integerLogarithm(value, base) {\n                    if (base.compareTo(value) <= 0) {\n                        var tmp = integerLogarithm(value, base.square(base));\n                        var p = tmp.p;\n                        var e = tmp.e;\n                        var t = p.multiply(base);\n                        return t.compareTo(value) <= 0 ? {\n                            p: t,\n                            e: e * 2 + 1\n                        } : {\n                            p: p,\n                            e: e * 2\n                        };\n                    }\n                    return {\n                        p: bigInt2(1),\n                        e: 0\n                    };\n                }\n                BigInteger.prototype.bitLength = function() {\n                    var n = this;\n                    if (n.compareTo(bigInt2(0)) < 0) n = n.negate().subtract(bigInt2(1));\n                    if (n.compareTo(bigInt2(0)) === 0) return bigInt2(0);\n                    return bigInt2(integerLogarithm(n, bigInt2(2)).e).add(bigInt2(1));\n                };\n                NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n                function max2(a, b) {\n                    a = parseValue(a);\n                    b = parseValue(b);\n                    return a.greater(b) ? a : b;\n                }\n                function min3(a, b) {\n                    a = parseValue(a);\n                    b = parseValue(b);\n                    return a.lesser(b) ? a : b;\n                }\n                function gcd(a, b) {\n                    a = parseValue(a).abs();\n                    b = parseValue(b).abs();\n                    if (a.equals(b)) return a;\n                    if (a.isZero()) return b;\n                    if (b.isZero()) return a;\n                    var c = Integer[1], d, t;\n                    while(a.isEven() && b.isEven()){\n                        d = min3(roughLOB(a), roughLOB(b));\n                        a = a.divide(d);\n                        b = b.divide(d);\n                        c = c.multiply(d);\n                    }\n                    while(a.isEven())a = a.divide(roughLOB(a));\n                    do {\n                        while(b.isEven())b = b.divide(roughLOB(b));\n                        if (a.greater(b)) {\n                            t = b;\n                            b = a;\n                            a = t;\n                        }\n                        b = b.subtract(a);\n                    }while (!b.isZero());\n                    return c.isUnit() ? a : a.multiply(c);\n                }\n                function lcm(a, b) {\n                    a = parseValue(a).abs();\n                    b = parseValue(b).abs();\n                    return a.divide(gcd(a, b)).multiply(b);\n                }\n                function randBetween(a, b, rng) {\n                    a = parseValue(a);\n                    b = parseValue(b);\n                    var usedRNG = rng || Math.random;\n                    var low = min3(a, b), high = max2(a, b);\n                    var range2 = high.subtract(low).add(1);\n                    if (range2.isSmall) return low.add(Math.floor(usedRNG() * range2));\n                    var digits = toBase2(range2, BASE).value;\n                    var result = [], restricted = true;\n                    for(var i2 = 0; i2 < digits.length; i2++){\n                        var top = restricted ? digits[i2] + (i2 + 1 < digits.length ? digits[i2 + 1] / BASE : 0) : BASE;\n                        var digit = truncate(usedRNG() * top);\n                        result.push(digit);\n                        if (digit < digits[i2]) restricted = false;\n                    }\n                    return low.add(Integer.fromArray(result, BASE, false));\n                }\n                var parseBase = function(text, base, alphabet, caseSensitive) {\n                    alphabet = alphabet || DEFAULT_ALPHABET;\n                    text = String(text);\n                    if (!caseSensitive) {\n                        text = text.toLowerCase();\n                        alphabet = alphabet.toLowerCase();\n                    }\n                    var length3 = text.length;\n                    var i2;\n                    var absBase = Math.abs(base);\n                    var alphabetValues = {};\n                    for(i2 = 0; i2 < alphabet.length; i2++)alphabetValues[alphabet[i2]] = i2;\n                    for(i2 = 0; i2 < length3; i2++){\n                        var c = text[i2];\n                        if (c === \"-\") continue;\n                        if (c in alphabetValues) {\n                            if (alphabetValues[c] >= absBase) {\n                                if (c === \"1\" && absBase === 1) continue;\n                                throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n                            }\n                        }\n                    }\n                    base = parseValue(base);\n                    var digits = [];\n                    var isNegative = text[0] === \"-\";\n                    for(i2 = isNegative ? 1 : 0; i2 < text.length; i2++){\n                        var c = text[i2];\n                        if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\n                        else if (c === \"<\") {\n                            var start = i2;\n                            do i2++;\n                            while (text[i2] !== \">\" && i2 < text.length);\n                            digits.push(parseValue(text.slice(start + 1, i2)));\n                        } else throw new Error(c + \" is not a valid character\");\n                    }\n                    return parseBaseFromArray(digits, base, isNegative);\n                };\n                function parseBaseFromArray(digits, base, isNegative) {\n                    var val = Integer[0], pow4 = Integer[1], i2;\n                    for(i2 = digits.length - 1; i2 >= 0; i2--){\n                        val = val.add(digits[i2].times(pow4));\n                        pow4 = pow4.times(base);\n                    }\n                    return isNegative ? val.negate() : val;\n                }\n                function stringify2(digit, alphabet) {\n                    alphabet = alphabet || DEFAULT_ALPHABET;\n                    if (digit < alphabet.length) return alphabet[digit];\n                    return \"<\" + digit + \">\";\n                }\n                function toBase2(n, base) {\n                    base = bigInt2(base);\n                    if (base.isZero()) {\n                        if (n.isZero()) return {\n                            value: [\n                                0\n                            ],\n                            isNegative: false\n                        };\n                        throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n                    }\n                    if (base.equals(-1)) {\n                        if (n.isZero()) return {\n                            value: [\n                                0\n                            ],\n                            isNegative: false\n                        };\n                        if (n.isNegative()) return {\n                            value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [\n                                1,\n                                0\n                            ])),\n                            isNegative: false\n                        };\n                        var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [\n                            0,\n                            1\n                        ]);\n                        arr.unshift([\n                            1\n                        ]);\n                        return {\n                            value: [].concat.apply([], arr),\n                            isNegative: false\n                        };\n                    }\n                    var neg = false;\n                    if (n.isNegative() && base.isPositive()) {\n                        neg = true;\n                        n = n.abs();\n                    }\n                    if (base.isUnit()) {\n                        if (n.isZero()) return {\n                            value: [\n                                0\n                            ],\n                            isNegative: false\n                        };\n                        return {\n                            value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),\n                            isNegative: neg\n                        };\n                    }\n                    var out = [];\n                    var left = n, divmod;\n                    while(left.isNegative() || left.compareAbs(base) >= 0){\n                        divmod = left.divmod(base);\n                        left = divmod.quotient;\n                        var digit = divmod.remainder;\n                        if (digit.isNegative()) {\n                            digit = base.minus(digit).abs();\n                            left = left.next();\n                        }\n                        out.push(digit.toJSNumber());\n                    }\n                    out.push(left.toJSNumber());\n                    return {\n                        value: out.reverse(),\n                        isNegative: neg\n                    };\n                }\n                function toBaseString(n, base, alphabet) {\n                    var arr = toBase2(n, base);\n                    return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function(x) {\n                        return stringify2(x, alphabet);\n                    }).join(\"\");\n                }\n                BigInteger.prototype.toArray = function(radix) {\n                    return toBase2(this, radix);\n                };\n                SmallInteger.prototype.toArray = function(radix) {\n                    return toBase2(this, radix);\n                };\n                NativeBigInt.prototype.toArray = function(radix) {\n                    return toBase2(this, radix);\n                };\n                BigInteger.prototype.toString = function(radix, alphabet) {\n                    if (radix === undefined2) radix = 10;\n                    if (radix !== 10 || alphabet) return toBaseString(this, radix, alphabet);\n                    var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\n                    while(--l >= 0){\n                        digit = String(v[l]);\n                        str += zeros.slice(digit.length) + digit;\n                    }\n                    var sign2 = this.sign ? \"-\" : \"\";\n                    return sign2 + str;\n                };\n                SmallInteger.prototype.toString = function(radix, alphabet) {\n                    if (radix === undefined2) radix = 10;\n                    if (radix != 10 || alphabet) return toBaseString(this, radix, alphabet);\n                    return String(this.value);\n                };\n                NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\n                NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {\n                    return this.toString();\n                };\n                BigInteger.prototype.valueOf = function() {\n                    return parseInt(this.toString(), 10);\n                };\n                BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n                SmallInteger.prototype.valueOf = function() {\n                    return this.value;\n                };\n                SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n                NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {\n                    return parseInt(this.toString(), 10);\n                };\n                function parseStringValue(v) {\n                    if (isPrecise(+v)) {\n                        var x = +v;\n                        if (x === truncate(x)) return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\n                        throw new Error(\"Invalid integer: \" + v);\n                    }\n                    var sign2 = v[0] === \"-\";\n                    if (sign2) v = v.slice(1);\n                    var split2 = v.split(/e/i);\n                    if (split2.length > 2) throw new Error(\"Invalid integer: \" + split2.join(\"e\"));\n                    if (split2.length === 2) {\n                        var exp2 = split2[1];\n                        if (exp2[0] === \"+\") exp2 = exp2.slice(1);\n                        exp2 = +exp2;\n                        if (exp2 !== truncate(exp2) || !isPrecise(exp2)) throw new Error(\"Invalid integer: \" + exp2 + \" is not a valid exponent.\");\n                        var text = split2[0];\n                        var decimalPlace = text.indexOf(\".\");\n                        if (decimalPlace >= 0) {\n                            exp2 -= text.length - decimalPlace - 1;\n                            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n                        }\n                        if (exp2 < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n                        text += new Array(exp2 + 1).join(\"0\");\n                        v = text;\n                    }\n                    var isValid = /^([0-9][0-9]*)$/.test(v);\n                    if (!isValid) throw new Error(\"Invalid integer: \" + v);\n                    if (supportsNativeBigInt) return new NativeBigInt(BigInt(sign2 ? \"-\" + v : v));\n                    var r = [], max3 = v.length, l = LOG_BASE, min4 = max3 - l;\n                    while(max3 > 0){\n                        r.push(+v.slice(min4, max3));\n                        min4 -= l;\n                        if (min4 < 0) min4 = 0;\n                        max3 -= l;\n                    }\n                    trim2(r);\n                    return new BigInteger(r, sign2);\n                }\n                function parseNumberValue(v) {\n                    if (supportsNativeBigInt) return new NativeBigInt(BigInt(v));\n                    if (isPrecise(v)) {\n                        if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n                        return new SmallInteger(v);\n                    }\n                    return parseStringValue(v.toString());\n                }\n                function parseValue(v) {\n                    if (typeof v === \"number\") return parseNumberValue(v);\n                    if (typeof v === \"string\") return parseStringValue(v);\n                    if (typeof v === \"bigint\") return new NativeBigInt(v);\n                    return v;\n                }\n                for(var i = 0; i < 1e3; i++){\n                    Integer[i] = parseValue(i);\n                    if (i > 0) Integer[-i] = parseValue(-i);\n                }\n                Integer.one = Integer[1];\n                Integer.zero = Integer[0];\n                Integer.minusOne = Integer[-1];\n                Integer.max = max2;\n                Integer.min = min3;\n                Integer.gcd = gcd;\n                Integer.lcm = lcm;\n                Integer.isInstance = function(x) {\n                    return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;\n                };\n                Integer.randBetween = randBetween;\n                Integer.fromArray = function(digits, base, isNegative) {\n                    return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n                };\n                return Integer;\n            }();\n            if (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) module.exports = bigInt2;\n            if (typeof define === \"function\" && define.amd) define(function() {\n                return bigInt2;\n            });\n        }\n    });\n    // output-es/runtime.js\n    function fail() {\n        throw new Error(\"Failed pattern match\");\n    }\n    // output-es/Record.Unsafe/foreign.js\n    var unsafeSet = function(label) {\n        return function(value) {\n            return function(rec) {\n                var copy = {};\n                for(var key in rec)if (({}).hasOwnProperty.call(rec, key)) copy[key] = rec[key];\n                copy[label] = value;\n                return copy;\n            };\n        };\n    };\n    // output-es/Type.Proxy/index.js\n    var $$$Proxy = ()=>({\n            tag: \"Proxy\"\n        });\n    var $$Proxy = /* @__PURE__ */ $$$Proxy();\n    // output-es/Data.Show/foreign.js\n    var showIntImpl = function(n) {\n        return n.toString();\n    };\n    // output-es/Data.Ordering/index.js\n    var $Ordering = (tag)=>tag;\n    var LT = /* @__PURE__ */ $Ordering(\"LT\");\n    var GT = /* @__PURE__ */ $Ordering(\"GT\");\n    var EQ = /* @__PURE__ */ $Ordering(\"EQ\");\n    // output-es/Data.Maybe/index.js\n    var $Maybe = (tag, _1)=>({\n            tag: tag,\n            _1: _1\n        });\n    var Nothing = /* @__PURE__ */ $Maybe(\"Nothing\");\n    var Just = (value0)=>$Maybe(\"Just\", value0);\n    var isNothing = (v2)=>{\n        if (v2.tag === \"Nothing\") return true;\n        if (v2.tag === \"Just\") return false;\n        fail();\n    };\n    // output-es/Data.Functor/foreign.js\n    var arrayMap = function(f2) {\n        return function(arr) {\n            var l = arr.length;\n            var result = new Array(l);\n            for(var i = 0; i < l; i++)result[i] = f2(arr[i]);\n            return result;\n        };\n    };\n    // output-es/Data.Functor/index.js\n    var functorArray = {\n        map: arrayMap\n    };\n    // output-es/Control.Bind/foreign.js\n    var arrayBind = function(arr) {\n        return function(f2) {\n            var result = [];\n            for(var i = 0, l = arr.length; i < l; i++)Array.prototype.push.apply(result, f2(arr[i]));\n            return result;\n        };\n    };\n    // output-es/Data.Either/index.js\n    var $Either = (tag, _1)=>({\n            tag: tag,\n            _1: _1\n        });\n    var Right = (value0)=>$Either(\"Right\", value0);\n    var functorEither = {\n        map: (f2)=>(m)=>{\n                if (m.tag === \"Left\") return $Either(\"Left\", m._1);\n                if (m.tag === \"Right\") return $Either(\"Right\", f2(m._1));\n                fail();\n            }\n    };\n    var applyEither = {\n        apply: (v)=>(v1)=>{\n                if (v.tag === \"Left\") return $Either(\"Left\", v._1);\n                if (v.tag === \"Right\") {\n                    if (v1.tag === \"Left\") return $Either(\"Left\", v1._1);\n                    if (v1.tag === \"Right\") return $Either(\"Right\", v._1(v1._1));\n                }\n                fail();\n            },\n        Functor0: ()=>functorEither\n    };\n    var applicativeEither = {\n        pure: Right,\n        Apply0: ()=>applyEither\n    };\n    // output-es/Data.Array.ST/foreign.js\n    var peekImpl = function(just, nothing, i, xs) {\n        return i >= 0 && i < xs.length ? just(xs[i]) : nothing;\n    };\n    var pokeImpl = function(i, a, xs) {\n        var ret = i >= 0 && i < xs.length;\n        if (ret) xs[i] = a;\n        return ret;\n    };\n    // output-es/Data.Array.ST.Iterator/index.js\n    var $Iterator = (_1, _2)=>({\n            tag: \"Iterator\",\n            _1: _1,\n            _2: _2\n        });\n    var pushWhile = (p)=>(iter)=>(array)=>()=>{\n                    let $$break = false;\n                    const $0 = iter._2;\n                    while(/* @__PURE__ */ (()=>{\n                        const $1 = $$break;\n                        return !$1;\n                    })()){\n                        const i = $0.value;\n                        const mx = iter._1(i);\n                        if (mx.tag === \"Just\" && p(mx._1)) {\n                            array.push(mx._1);\n                            iter._2.value;\n                            const $1 = iter._2.value;\n                            iter._2.value = $1 + 1 | 0;\n                            continue;\n                        }\n                        $$break = true;\n                    }\n                };\n    var iterate = (iter)=>(f2)=>()=>{\n                let $$break = false;\n                const $0 = iter._2;\n                while(/* @__PURE__ */ (()=>{\n                    const $1 = $$break;\n                    return !$1;\n                })()){\n                    const i = $0.value;\n                    const $1 = $0.value;\n                    $0.value = $1 + 1 | 0;\n                    const mx = iter._1(i);\n                    if (mx.tag === \"Just\") {\n                        f2(mx._1)();\n                        continue;\n                    }\n                    if (mx.tag === \"Nothing\") {\n                        $$break = true;\n                        continue;\n                    }\n                    fail();\n                }\n            };\n    // output-es/Data.Foldable/foreign.js\n    var foldrArray = function(f2) {\n        return function(init) {\n            return function(xs) {\n                var acc = init;\n                var len = xs.length;\n                for(var i = len - 1; i >= 0; i--)acc = f2(xs[i])(acc);\n                return acc;\n            };\n        };\n    };\n    var foldlArray = function(f2) {\n        return function(init) {\n            return function(xs) {\n                var acc = init;\n                var len = xs.length;\n                for(var i = 0; i < len; i++)acc = f2(acc)(xs[i]);\n                return acc;\n            };\n        };\n    };\n    // output-es/Data.Foldable/index.js\n    var identity2 = (x)=>x;\n    var maximumBy = (dictFoldable)=>(cmp)=>dictFoldable.foldl((v)=>(v1)=>{\n                    if (v.tag === \"Nothing\") return $Maybe(\"Just\", v1);\n                    if (v.tag === \"Just\") return $Maybe(\"Just\", cmp(v._1)(v1) === \"GT\" ? v._1 : v1);\n                    fail();\n                })(Nothing);\n    var foldableArray = {\n        foldr: foldrArray,\n        foldl: foldlArray,\n        foldMap: (dictMonoid)=>{\n            const mempty = dictMonoid.mempty;\n            return (f2)=>foldableArray.foldr((x)=>(acc)=>dictMonoid.Semigroup0().append(f2(x))(acc))(mempty);\n        }\n    };\n    var and = (dictFoldable)=>(dictHeytingAlgebra)=>dictFoldable.foldMap((()=>{\n                const semigroupConj1 = {\n                    append: (v)=>(v1)=>dictHeytingAlgebra.conj(v)(v1)\n                };\n                return {\n                    mempty: dictHeytingAlgebra.tt,\n                    Semigroup0: ()=>semigroupConj1\n                };\n            })())(identity2);\n    // output-es/Data.Tuple/index.js\n    var $Tuple = (_1, _2)=>({\n            tag: \"Tuple\",\n            _1: _1,\n            _2: _2\n        });\n    var Tuple = (value0)=>(value1)=>$Tuple(value0, value1);\n    var snd = (v)=>v._2;\n    var fst = (v)=>v._1;\n    // output-es/Data.FunctorWithIndex/foreign.js\n    var mapWithIndexArray = function(f2) {\n        return function(xs) {\n            var l = xs.length;\n            var result = Array(l);\n            for(var i = 0; i < l; i++)result[i] = f2(i)(xs[i]);\n            return result;\n        };\n    };\n    // output-es/Data.FunctorWithIndex/index.js\n    var functorWithIndexArray = {\n        mapWithIndex: mapWithIndexArray,\n        Functor0: ()=>functorArray\n    };\n    // output-es/Data.Eq/foreign.js\n    var refEq = function(r1) {\n        return function(r2) {\n            return r1 === r2;\n        };\n    };\n    var eqIntImpl = refEq;\n    var eqStringImpl = refEq;\n    // output-es/Data.Eq/index.js\n    var eqString = {\n        eq: eqStringImpl\n    };\n    var eqInt = {\n        eq: eqIntImpl\n    };\n    // output-es/Data.Ord/foreign.js\n    var unsafeCompareImpl = function(lt) {\n        return function(eq) {\n            return function(gt) {\n                return function(x) {\n                    return function(y) {\n                        return x < y ? lt : x === y ? eq : gt;\n                    };\n                };\n            };\n        };\n    };\n    var ordIntImpl = unsafeCompareImpl;\n    var ordStringImpl = unsafeCompareImpl;\n    // output-es/Data.Ord/index.js\n    var ordString = {\n        compare: /* @__PURE__ */ ordStringImpl(LT)(EQ)(GT),\n        Eq0: ()=>eqString\n    };\n    var ordInt = {\n        compare: /* @__PURE__ */ ordIntImpl(LT)(EQ)(GT),\n        Eq0: ()=>eqInt\n    };\n    // output-es/Data.Traversable/foreign.js\n    var traverseArrayImpl = /* @__PURE__ */ function() {\n        function array1(a) {\n            return [\n                a\n            ];\n        }\n        function array2(a) {\n            return function(b) {\n                return [\n                    a,\n                    b\n                ];\n            };\n        }\n        function array3(a) {\n            return function(b) {\n                return function(c) {\n                    return [\n                        a,\n                        b,\n                        c\n                    ];\n                };\n            };\n        }\n        function concat2(xs) {\n            return function(ys) {\n                return xs.concat(ys);\n            };\n        }\n        return function(apply) {\n            return function(map) {\n                return function(pure) {\n                    return function(f2) {\n                        return function(array) {\n                            function go(bot, top) {\n                                switch(top - bot){\n                                    case 0:\n                                        return pure([]);\n                                    case 1:\n                                        return map(array1)(f2(array[bot]));\n                                    case 2:\n                                        return apply(map(array2)(f2(array[bot])))(f2(array[bot + 1]));\n                                    case 3:\n                                        return apply(apply(map(array3)(f2(array[bot])))(f2(array[bot + 1])))(f2(array[bot + 2]));\n                                    default:\n                                        var pivot = bot + Math.floor((top - bot) / 4) * 2;\n                                        return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));\n                                }\n                            }\n                            return go(0, array.length);\n                        };\n                    };\n                };\n            };\n        };\n    }();\n    // output-es/Data.Traversable/index.js\n    var identity3 = (x)=>x;\n    var traversableArray = {\n        traverse: (dictApplicative)=>{\n            const Apply0 = dictApplicative.Apply0();\n            return traverseArrayImpl(Apply0.apply)(Apply0.Functor0().map)(dictApplicative.pure);\n        },\n        sequence: (dictApplicative)=>traversableArray.traverse(dictApplicative)(identity3),\n        Functor0: ()=>functorArray,\n        Foldable1: ()=>foldableArray\n    };\n    // output-es/Data.Array/foreign.js\n    var rangeImpl = function(start, end) {\n        var step = start > end ? -1 : 1;\n        var result = new Array(step * (end - start) + 1);\n        var i = start, n = 0;\n        while(i !== end){\n            result[n++] = i;\n            i += step;\n        }\n        result[n] = i;\n        return result;\n    };\n    var replicateFill = function(count, value) {\n        if (count < 1) return [];\n        var result = new Array(count);\n        return result.fill(value);\n    };\n    var replicatePolyfill = function(count, value) {\n        var result = [];\n        var n = 0;\n        for(var i = 0; i < count; i++)result[n++] = value;\n        return result;\n    };\n    var replicateImpl = typeof Array.prototype.fill === \"function\" ? replicateFill : replicatePolyfill;\n    var fromFoldableImpl = /* @__PURE__ */ function() {\n        function Cons2(head, tail) {\n            this.head = head;\n            this.tail = tail;\n        }\n        var emptyList = {};\n        function curryCons(head) {\n            return function(tail) {\n                return new Cons2(head, tail);\n            };\n        }\n        function listToArray(list) {\n            var result = [];\n            var count = 0;\n            var xs = list;\n            while(xs !== emptyList){\n                result[count++] = xs.head;\n                xs = xs.tail;\n            }\n            return result;\n        }\n        return function(foldr, xs) {\n            return listToArray(foldr(curryCons)(emptyList)(xs));\n        };\n    }();\n    var length = function(xs) {\n        return xs.length;\n    };\n    var unconsImpl = function(empty2, next, xs) {\n        return xs.length === 0 ? empty2({}) : next(xs[0])(xs.slice(1));\n    };\n    var findIndexImpl = function(just, nothing, f2, xs) {\n        for(var i = 0, l = xs.length; i < l; i++){\n            if (f2(xs[i])) return just(i);\n        }\n        return nothing;\n    };\n    var findLastIndexImpl = function(just, nothing, f2, xs) {\n        for(var i = xs.length - 1; i >= 0; i--){\n            if (f2(xs[i])) return just(i);\n        }\n        return nothing;\n    };\n    var concat = function(xss) {\n        if (xss.length <= 1e4) return Array.prototype.concat.apply([], xss);\n        var result = [];\n        for(var i = 0, l = xss.length; i < l; i++){\n            var xs = xss[i];\n            for(var j = 0, m = xs.length; j < m; j++)result.push(xs[j]);\n        }\n        return result;\n    };\n    var filterImpl = function(f2, xs) {\n        return xs.filter(f2);\n    };\n    var sortByImpl2 = /* @__PURE__ */ function() {\n        function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {\n            var mid;\n            var i;\n            var j;\n            var k;\n            var x;\n            var y;\n            var c;\n            mid = from + (to - from >> 1);\n            if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);\n            if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);\n            i = from;\n            j = mid;\n            k = from;\n            while(i < mid && j < to){\n                x = xs2[i];\n                y = xs2[j];\n                c = fromOrdering(compare(x)(y));\n                if (c > 0) {\n                    xs1[k++] = y;\n                    ++j;\n                } else {\n                    xs1[k++] = x;\n                    ++i;\n                }\n            }\n            while(i < mid)xs1[k++] = xs2[i++];\n            while(j < to)xs1[k++] = xs2[j++];\n        }\n        return function(compare, fromOrdering, xs) {\n            var out;\n            if (xs.length < 2) return xs;\n            out = xs.slice(0);\n            mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);\n            return out;\n        };\n    }();\n    var sliceImpl = function(s, e, l) {\n        return l.slice(s, e);\n    };\n    var zipWithImpl = function(f2, xs, ys) {\n        var l = xs.length < ys.length ? xs.length : ys.length;\n        var result = new Array(l);\n        for(var i = 0; i < l; i++)result[i] = f2(xs[i])(ys[i]);\n        return result;\n    };\n    var anyImpl = function(p, xs) {\n        var len = xs.length;\n        for(var i = 0; i < len; i++){\n            if (p(xs[i])) return true;\n        }\n        return false;\n    };\n    var allImpl = function(p, xs) {\n        var len = xs.length;\n        for(var i = 0; i < len; i++){\n            if (!p(xs[i])) return false;\n        }\n        return true;\n    };\n    // output-es/Data.Array/index.js\n    var zipWith = ($0)=>($1)=>($2)=>zipWithImpl($0, $1, $2);\n    var sortBy = (comp)=>($0)=>sortByImpl2(comp, (v)=>{\n                if (v === \"GT\") return 1;\n                if (v === \"EQ\") return 0;\n                if (v === \"LT\") return -1;\n                fail();\n            }, $0);\n    var singleton = (a)=>[\n            a\n        ];\n    var groupBy = (op)=>(xs)=>{\n            const result = [];\n            const $0 = {\n                value: 0\n            };\n            const iter = $Iterator((v)=>{\n                if (v >= 0 && v < xs.length) return $Maybe(\"Just\", xs[v]);\n                return Nothing;\n            }, $0);\n            iterate(iter)((x)=>()=>{\n                    const sub1 = [];\n                    sub1.push(x);\n                    pushWhile(op(x))(iter)(sub1)();\n                    result.push(sub1);\n                })();\n            return result;\n        };\n    var groupAllBy = (cmp)=>{\n        const $0 = groupBy((x)=>(y)=>cmp(x)(y) === \"EQ\");\n        return (x)=>$0(sortBy(cmp)(x));\n    };\n    var find = (f2)=>(xs)=>{\n            const $0 = findIndexImpl(Just, Nothing, f2, xs);\n            if ($0.tag === \"Just\") return $Maybe(\"Just\", xs[$0._1]);\n            return Nothing;\n        };\n    var all = ($0)=>($1)=>allImpl($0, $1);\n    // output-es/Data.FoldableWithIndex/index.js\n    var foldableWithIndexArray = {\n        foldrWithIndex: (f2)=>(z)=>{\n                const $0 = foldrArray((v)=>{\n                    const $02 = v._1;\n                    const $12 = v._2;\n                    return (y)=>f2($02)($12)(y);\n                })(z);\n                const $1 = mapWithIndexArray(Tuple);\n                return (x)=>$0($1(x));\n            },\n        foldlWithIndex: (f2)=>(z)=>{\n                const $0 = foldlArray((y)=>(v)=>f2(v._1)(y)(v._2))(z);\n                const $1 = mapWithIndexArray(Tuple);\n                return (x)=>$0($1(x));\n            },\n        foldMapWithIndex: (dictMonoid)=>{\n            const mempty = dictMonoid.mempty;\n            return (f2)=>foldableWithIndexArray.foldrWithIndex((i)=>(x)=>(acc)=>dictMonoid.Semigroup0().append(f2(i)(x))(acc))(mempty);\n        },\n        Foldable0: ()=>foldableArray\n    };\n    // output-es/Data.Unfoldable1/foreign.js\n    var unfoldr1ArrayImpl = function(isNothing2) {\n        return function(fromJust2) {\n            return function(fst2) {\n                return function(snd2) {\n                    return function(f2) {\n                        return function(b) {\n                            var result = [];\n                            var value = b;\n                            while(true){\n                                var tuple = f2(value);\n                                result.push(fst2(tuple));\n                                var maybe = snd2(tuple);\n                                if (isNothing2(maybe)) return result;\n                                value = fromJust2(maybe);\n                            }\n                        };\n                    };\n                };\n            };\n        };\n    };\n    // output-es/Data.Unfoldable1/index.js\n    var fromJust = (v)=>{\n        if (v.tag === \"Just\") return v._1;\n        fail();\n    };\n    var unfoldable1Array = {\n        unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust)(fst)(snd)\n    };\n    var iterateN = (dictUnfoldable1)=>(n)=>(f2)=>(s)=>dictUnfoldable1.unfoldr1((v)=>$Tuple(v._1, v._2 > 0 ? $Maybe(\"Just\", $Tuple(f2(v._1), v._2 - 1 | 0)) : Nothing))($Tuple(s, n - 1 | 0));\n    // output-es/Foreign.Object/foreign.js\n    function _lookup(no, yes, k, m) {\n        return k in m ? yes(m[k]) : no;\n    }\n    function toArrayWithKey(f2) {\n        return function(m) {\n            var r = [];\n            for(var k in m)if (hasOwnProperty.call(m, k)) r.push(f2(k)(m[k]));\n            return r;\n        };\n    }\n    var keys = Object.keys || toArrayWithKey(function(k) {\n        return function() {\n            return k;\n        };\n    });\n    // output-es/Data.Argonaut.Core/foreign.js\n    function stringify(j) {\n        return JSON.stringify(j);\n    }\n    function _caseJson(isNull, isBool, isNum, isStr, isArr, isObj, j) {\n        if (j == null) return isNull();\n        else if (typeof j === \"boolean\") return isBool(j);\n        else if (typeof j === \"number\") return isNum(j);\n        else if (typeof j === \"string\") return isStr(j);\n        else if (Object.prototype.toString.call(j) === \"[object Array]\") return isArr(j);\n        else return isObj(j);\n    }\n    // output-es/Data.Argonaut.Decode.Error/index.js\n    var $JsonDecodeError = (tag, _1, _2)=>({\n            tag: tag,\n            _1: _1,\n            _2: _2\n        });\n    var AtIndex = (value0)=>(value1)=>$JsonDecodeError(\"AtIndex\", value0, value1);\n    var AtKey = (value0)=>(value1)=>$JsonDecodeError(\"AtKey\", value0, value1);\n    var Named = (value0)=>(value1)=>$JsonDecodeError(\"Named\", value0, value1);\n    var MissingValue = /* @__PURE__ */ $JsonDecodeError(\"MissingValue\");\n    var printJsonDecodeError = (err)=>{\n        const go = (v)=>{\n            if (v.tag === \"TypeMismatch\") return \"  Expected value of type '\" + v._1 + \"'.\";\n            if (v.tag === \"UnexpectedValue\") return \"  Unexpected value \" + stringify(v._1) + \".\";\n            if (v.tag === \"AtIndex\") return \"  At array index \" + showIntImpl(v._1) + \":\\n\" + go(v._2);\n            if (v.tag === \"AtKey\") return \"  At object key '\" + v._1 + \"':\\n\" + go(v._2);\n            if (v.tag === \"Named\") return \"  Under '\" + v._1 + \"':\\n\" + go(v._2);\n            if (v.tag === \"MissingValue\") return \"  No value was found.\";\n            fail();\n        };\n        return \"An error occurred while decoding a JSON value:\\n\" + go(err);\n    };\n    // output-es/Data.Number/foreign.js\n    var isFiniteImpl = isFinite;\n    var floor = Math.floor;\n    // output-es/Data.Int/foreign.js\n    var fromNumberImpl = function(just) {\n        return function(nothing) {\n            return function(n) {\n                return (n | 0) === n ? just(n) : nothing;\n            };\n        };\n    };\n    var toNumber = function(n) {\n        return n;\n    };\n    // output-es/Data.Int/index.js\n    var fromNumber = /* @__PURE__ */ fromNumberImpl(Just)(Nothing);\n    var unsafeClamp = (x)=>{\n        if (!isFiniteImpl(x)) return 0;\n        if (x >= toNumber(2147483647)) return 2147483647;\n        if (x <= toNumber(-2147483648)) return -2147483648;\n        const $0 = fromNumber(x);\n        if ($0.tag === \"Nothing\") return 0;\n        if ($0.tag === \"Just\") return $0._1;\n        fail();\n    };\n    // output-es/Data.List.Types/index.js\n    var $List = (tag, _1, _2)=>({\n            tag: tag,\n            _1: _1,\n            _2: _2\n        });\n    var Nil = /* @__PURE__ */ $List(\"Nil\");\n    var foldableList = {\n        foldr: (f2)=>(b)=>{\n                const $0 = foldableList.foldl((b$1)=>(a)=>f2(a)(b$1))(b);\n                const go = (go$a0$copy)=>(go$a1$copy)=>{\n                        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;\n                        while(go$c){\n                            const v = go$a0, v1 = go$a1;\n                            if (v1.tag === \"Nil\") {\n                                go$c = false;\n                                go$r = v;\n                                continue;\n                            }\n                            if (v1.tag === \"Cons\") {\n                                go$a0 = $List(\"Cons\", v1._1, v);\n                                go$a1 = v1._2;\n                                continue;\n                            }\n                            fail();\n                        }\n                        return go$r;\n                    };\n                const $1 = go(Nil);\n                return (x)=>$0($1(x));\n            },\n        foldl: (f2)=>{\n            const go = (go$a0$copy)=>(go$a1$copy)=>{\n                    let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;\n                    while(go$c){\n                        const b = go$a0, v = go$a1;\n                        if (v.tag === \"Nil\") {\n                            go$c = false;\n                            go$r = b;\n                            continue;\n                        }\n                        if (v.tag === \"Cons\") {\n                            go$a0 = f2(b)(v._1);\n                            go$a1 = v._2;\n                            continue;\n                        }\n                        fail();\n                    }\n                    return go$r;\n                };\n            return go;\n        },\n        foldMap: (dictMonoid)=>{\n            const mempty = dictMonoid.mempty;\n            return (f2)=>foldableList.foldl((acc)=>{\n                    const $0 = dictMonoid.Semigroup0().append(acc);\n                    return (x)=>$0(f2(x));\n                })(mempty);\n        }\n    };\n    // output-es/Data.Bounded/foreign.js\n    var topChar = String.fromCharCode(65535);\n    var bottomChar = String.fromCharCode(0);\n    var topNumber = Number.POSITIVE_INFINITY;\n    var bottomNumber = Number.NEGATIVE_INFINITY;\n    // output-es/Data.Semiring/foreign.js\n    var intAdd = function(x) {\n        return function(y) {\n            return x + y | 0;\n        };\n    };\n    var intMul = function(x) {\n        return function(y) {\n            return x * y | 0;\n        };\n    };\n    // output-es/Data.Semiring/index.js\n    var semiringInt = {\n        add: intAdd,\n        zero: 0,\n        mul: intMul,\n        one: 1\n    };\n    // output-es/Data.String.CodePoints/foreign.js\n    var hasArrayFrom = typeof Array.from === \"function\";\n    var hasStringIterator = typeof Symbol !== \"undefined\" && Symbol != null && typeof Symbol.iterator !== \"undefined\" && typeof String.prototype[Symbol.iterator] === \"function\";\n    var hasFromCodePoint = typeof String.prototype.fromCodePoint === \"function\";\n    var hasCodePointAt = typeof String.prototype.codePointAt === \"function\";\n    // output-es/Data.TraversableWithIndex/index.js\n    var traversableWithIndexArray = {\n        traverseWithIndex: (dictApplicative)=>{\n            const sequence1 = traversableWithIndexArray.Traversable2().sequence(dictApplicative);\n            return (f2)=>{\n                const $0 = traversableWithIndexArray.FunctorWithIndex0().mapWithIndex(f2);\n                return (x)=>sequence1($0(x));\n            };\n        },\n        FunctorWithIndex0: ()=>functorWithIndexArray,\n        FoldableWithIndex1: ()=>foldableWithIndexArray,\n        Traversable2: ()=>traversableArray\n    };\n    // output-es/Data.Argonaut.Decode.Decoders/index.js\n    var traverse1 = /* @__PURE__ */ (()=>traversableArray.traverse(applicativeEither))();\n    var traverseWithIndex = /* @__PURE__ */ (()=>traversableWithIndexArray.traverseWithIndex(applicativeEither))();\n    var decodeJArray = (x)=>{\n        const $0 = _caseJson((v)=>Nothing, (v)=>Nothing, (v)=>Nothing, (v)=>Nothing, Just, (v)=>Nothing, x);\n        if ($0.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Array\"));\n        if ($0.tag === \"Just\") return $Either(\"Right\", $0._1);\n        fail();\n    };\n    var decodeNonEmptyArray = (decoder)=>{\n        const $0 = Named(\"NonEmptyArray\");\n        const $1 = traverse1(decoder);\n        return (a)=>{\n            const $2 = decodeJArray(a);\n            if ($2.tag === \"Left\") return $Either(\"Left\", $2._1);\n            if ($2.tag === \"Right\") {\n                const $3 = unconsImpl((v)=>Nothing, (x)=>(xs)=>$Maybe(\"Just\", {\n                            head: x,\n                            tail: xs\n                        }), $2._1);\n                if ($3.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"NonEmptyArray\"));\n                if ($3.tag === \"Just\") {\n                    const $4 = $1([\n                        $3._1.head,\n                        ...$3._1.tail\n                    ]);\n                    if ($4.tag === \"Left\") return $Either(\"Left\", $0($4._1));\n                    if ($4.tag === \"Right\") return $Either(\"Right\", $4._1);\n                }\n            }\n            fail();\n        };\n    };\n    var decodeInt = (a)=>{\n        const $0 = _caseJson((v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")), Right, (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")), a);\n        if ($0.tag === \"Left\") return $Either(\"Left\", $0._1);\n        if ($0.tag === \"Right\") {\n            const $1 = fromNumber($0._1);\n            if ($1.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Integer\"));\n            if ($1.tag === \"Just\") return $Either(\"Right\", $1._1);\n        }\n        fail();\n    };\n    var decodeArray = (decoder)=>{\n        const $0 = Named(\"Array\");\n        const $1 = traverseWithIndex((i)=>{\n            const $12 = AtIndex(i);\n            return (x)=>{\n                const $2 = decoder(x);\n                if ($2.tag === \"Left\") return $Either(\"Left\", $12($2._1));\n                if ($2.tag === \"Right\") return $Either(\"Right\", $2._1);\n                fail();\n            };\n        });\n        return (a)=>{\n            const $2 = decodeJArray(a);\n            if ($2.tag === \"Left\") return $Either(\"Left\", $2._1);\n            if ($2.tag === \"Right\") {\n                const $3 = $1($2._1);\n                if ($3.tag === \"Left\") return $Either(\"Left\", $0($3._1));\n                if ($3.tag === \"Right\") return $Either(\"Right\", $3._1);\n            }\n            fail();\n        };\n    };\n    // output-es/Data.Argonaut.Decode.Class/index.js\n    var gDecodeJsonNil = {\n        gDecodeJson: (v)=>(v1)=>$Either(\"Right\", {})\n    };\n    var decodeRecord = (dictGDecodeJson)=>()=>({\n                decodeJson: (json)=>{\n                    const v = _caseJson((v2)=>Nothing, (v2)=>Nothing, (v2)=>Nothing, (v2)=>Nothing, (v2)=>Nothing, Just, json);\n                    if (v.tag === \"Just\") return dictGDecodeJson.gDecodeJson(v._1)($$Proxy);\n                    if (v.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Object\"));\n                    fail();\n                }\n            });\n    var gDecodeJsonCons = (dictDecodeJsonField)=>(dictGDecodeJson)=>(dictIsSymbol)=>()=>()=>({\n                            gDecodeJson: (object)=>(v)=>{\n                                    const fieldName = dictIsSymbol.reflectSymbol($$Proxy);\n                                    const v1 = dictDecodeJsonField.decodeJsonField(_lookup(Nothing, Just, fieldName, object));\n                                    if (v1.tag === \"Just\") {\n                                        const $0 = AtKey(fieldName);\n                                        if (v1._1.tag === \"Left\") return $Either(\"Left\", $0(v1._1._1));\n                                        if (v1._1.tag === \"Right\") {\n                                            const $1 = v1._1._1;\n                                            const $2 = dictGDecodeJson.gDecodeJson(object)($$Proxy);\n                                            return (()=>{\n                                                if ($2.tag === \"Left\") {\n                                                    const $3 = $2._1;\n                                                    return (v$1)=>$Either(\"Left\", $3);\n                                                }\n                                                if ($2.tag === \"Right\") {\n                                                    const $3 = $2._1;\n                                                    return (f2)=>f2($3);\n                                                }\n                                                fail();\n                                            })()((rest)=>$Either(\"Right\", unsafeSet(dictIsSymbol.reflectSymbol($$Proxy))($1)(rest)));\n                                        }\n                                        fail();\n                                    }\n                                    if (v1.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"AtKey\", fieldName, MissingValue));\n                                    fail();\n                                }\n                        });\n    // output-es/Data.BigInt/foreign.js\n    var import_big_integer = __toESM(require_BigInteger(), 1);\n    function fromInt(n) {\n        return (0, import_big_integer.default)(n);\n    }\n    function toBase(base) {\n        return function(x) {\n            return x.toString(base);\n        };\n    }\n    function toNumber2(x) {\n        return x.toJSNumber();\n    }\n    function biAdd(x) {\n        return function(y) {\n            return x.add(y);\n        };\n    }\n    function biMul(x) {\n        return function(y) {\n            return x.multiply(y);\n        };\n    }\n    function biSub(x) {\n        return function(y) {\n            return x.minus(y);\n        };\n    }\n    function biMod(x) {\n        return function(y) {\n            return x.mod(y);\n        };\n    }\n    function biDiv(x) {\n        return function(y) {\n            return x.divide(y);\n        };\n    }\n    function abs2(x) {\n        return x.abs();\n    }\n    // output-es/Data.BigInt/index.js\n    var toString = /* @__PURE__ */ toBase(10);\n    var semiringBigInt = {\n        add: biAdd,\n        zero: /* @__PURE__ */ fromInt(0),\n        mul: biMul,\n        one: /* @__PURE__ */ fromInt(1)\n    };\n    var ringBigInt = {\n        sub: biSub,\n        Semiring0: ()=>semiringBigInt\n    };\n    var commutativeRingBigInt = {\n        Ring0: ()=>ringBigInt\n    };\n    var euclideanRingBigInt = {\n        div: (x)=>(y)=>biDiv(biSub(x)(euclideanRingBigInt.mod(x)(y)))(y),\n        mod: (x)=>(y)=>{\n                const yy = abs2(y);\n                return biMod(biAdd(biMod(x)(yy))(yy))(yy);\n            },\n        degree: (x)=>unsafeClamp(floor(toNumber2(abs2(x)))),\n        CommutativeRing0: ()=>commutativeRingBigInt\n    };\n    // output-es/Effect.Console/foreign.js\n    var error = function(s) {\n        return function() {\n            console.error(s);\n        };\n    };\n    // output-es/Data.Array.NonEmpty.Internal/foreign.js\n    var foldr1Impl = function(f2, xs) {\n        var acc = xs[xs.length - 1];\n        for(var i = xs.length - 2; i >= 0; i--)acc = f2(xs[i])(acc);\n        return acc;\n    };\n    var foldl1Impl = function(f2, xs) {\n        var acc = xs[0];\n        var len = xs.length;\n        for(var i = 1; i < len; i++)acc = f2(acc)(xs[i]);\n        return acc;\n    };\n    // output-es/Data.Array.NonEmpty.Internal/index.js\n    var foldable1NonEmptyArray = {\n        foldMap1: (dictSemigroup)=>{\n            const append = dictSemigroup.append;\n            return (f2)=>{\n                const $0 = arrayMap(f2);\n                const $1 = foldable1NonEmptyArray.foldl1(append);\n                return (x)=>$1($0(x));\n            };\n        },\n        foldr1: ($0)=>($1)=>foldr1Impl($0, $1),\n        foldl1: ($0)=>($1)=>foldl1Impl($0, $1),\n        Foldable0: ()=>foldableArray\n    };\n    // output-es/Data.HeytingAlgebra/foreign.js\n    var boolConj = function(b1) {\n        return function(b2) {\n            return b1 && b2;\n        };\n    };\n    var boolDisj = function(b1) {\n        return function(b2) {\n            return b1 || b2;\n        };\n    };\n    var boolNot = function(b) {\n        return !b;\n    };\n    // output-es/Data.HeytingAlgebra/index.js\n    var heytingAlgebraBoolean = {\n        ff: false,\n        tt: true,\n        implies: (a)=>(b)=>heytingAlgebraBoolean.disj(heytingAlgebraBoolean.not(a))(b),\n        conj: boolConj,\n        disj: boolDisj,\n        not: boolNot\n    };\n    // output-es/Util.Array/index.js\n    var swapST = (x)=>(y)=>(st)=>()=>{\n                    const a = peekImpl(Just, Nothing, x, st);\n                    const b = peekImpl(Just, Nothing, y, st);\n                    if (a.tag === \"Just\" && b.tag === \"Just\") {\n                        pokeImpl(x, b._1, st);\n                        pokeImpl(y, a._1, st);\n                    }\n                };\n    // output-es/TcgCalculator.Math/index.js\n    var identity6 = (x)=>x;\n    var product2 = /* @__PURE__ */ (()=>foldlArray(biMul)(semiringBigInt.one))();\n    var distinctPermutations = (dictOrd)=>{\n        const reverseST = (x)=>(y)=>(st)=>{\n                    const $0 = swapST(x)(y)(st);\n                    if (x < y) return ()=>{\n                        $0();\n                        return reverseST(x + 1 | 0)(y - 1 | 0)(st)();\n                    };\n                    return ()=>{};\n                };\n        return unfoldable1Array.unfoldr1((a)=>$Tuple(a, (()=>{\n                const $0 = findLastIndexImpl(Just, Nothing, identity6, zipWithImpl((a1)=>(a2)=>dictOrd.compare(a1)(a2) === \"GT\", a, sliceImpl(1, a.length, a)));\n                if ($0.tag === \"Just\") {\n                    if ($0._1 >= 0 && $0._1 < a.length) {\n                        const $1 = a[$0._1];\n                        const $2 = findLastIndexImpl(Just, Nothing, (v1)=>dictOrd.compare($1)(v1) === \"GT\", a);\n                        if ($2.tag === \"Just\") {\n                            const $3 = $2._1;\n                            return $Maybe(\"Just\", (()=>{\n                                const st = [\n                                    ...a\n                                ];\n                                swapST($0._1)($3)(st)();\n                                reverseST($0._1 + 1 | 0)(a.length - 1 | 0)(st)();\n                                return st;\n                            })());\n                        }\n                        if ($2.tag === \"Nothing\") return Nothing;\n                        fail();\n                    }\n                    return Nothing;\n                }\n                if ($0.tag === \"Nothing\") return Nothing;\n                fail();\n            })()));\n    };\n    var createPascalTriangle = (v)=>{\n        if (v <= 0) return [];\n        return iterateN(unfoldable1Array)(v)((r)=>zipWithImpl(biAdd, [\n                semiringBigInt.zero,\n                ...r\n            ], [\n                ...r,\n                semiringBigInt.zero\n            ]))([\n            semiringBigInt.one\n        ]);\n    };\n    var pascalTriangle = /* @__PURE__ */ createPascalTriangle(64);\n    var combinations = (n)=>(a)=>{\n            if (n === 0) return [\n                []\n            ];\n            if (a.length === n) return [\n                a\n            ];\n            if (a.length < n) return [];\n            if (n === 1) return arrayMap(singleton)(a);\n            const v = unconsImpl((v2)=>Nothing, (x)=>(xs)=>$Maybe(\"Just\", {\n                        head: x,\n                        tail: xs\n                    }), a);\n            if (v.tag === \"Just\") {\n                const $0 = v._1.head;\n                return [\n                    ...arrayMap((v1)=>[\n                            $0,\n                            ...v1\n                        ])(combinations(n - 1 | 0)(v._1.tail)),\n                    ...combinations(n)(v._1.tail)\n                ];\n            }\n            return [];\n        };\n    var combinationNumber = (combinationNumber$a0$copy)=>(combinationNumber$a1$copy)=>{\n            let combinationNumber$a0 = combinationNumber$a0$copy, combinationNumber$a1 = combinationNumber$a1$copy, combinationNumber$c = true, combinationNumber$r;\n            while(combinationNumber$c){\n                const n = combinationNumber$a0, r = combinationNumber$a1;\n                if (n < 0 || r < 0) {\n                    combinationNumber$c = false;\n                    combinationNumber$r = semiringBigInt.zero;\n                    continue;\n                }\n                if (r === 0) {\n                    combinationNumber$c = false;\n                    combinationNumber$r = semiringBigInt.one;\n                    continue;\n                }\n                if (r === 1) {\n                    combinationNumber$c = false;\n                    combinationNumber$r = fromInt(n);\n                    continue;\n                }\n                if ((n - r | 0) < r) {\n                    combinationNumber$a0 = n;\n                    combinationNumber$a1 = n - r | 0;\n                    continue;\n                }\n                if (n < 64) {\n                    combinationNumber$c = false;\n                    combinationNumber$r = pascalTriangle[n][r];\n                    continue;\n                }\n                const $0 = arrayMap(fromInt);\n                const $1 = product2($0(rangeImpl((n - r | 0) + 1 | 0, n)));\n                const $2 = product2($0(rangeImpl(1, r)));\n                combinationNumber$c = false;\n                combinationNumber$r = biDiv(biSub($1)(euclideanRingBigInt.mod($1)($2)))($2);\n            }\n            return combinationNumber$r;\n        };\n    var buildPartitionNumbers = (v)=>{\n        if (v === 0) return $List(\"Cons\", [\n            []\n        ], Nil);\n        const $$new = (v1)=>(v2)=>{\n                if (v1.tag === \"Cons\") return [\n                    ...$$new(v1._2)(v2 + 1 | 0),\n                    ...arrayMap((v3)=>[\n                            v2,\n                            ...v3\n                        ])(filterImpl((x)=>{\n                        if (0 < x.length) return x[0] <= v2;\n                        return 0 <= v2;\n                    }, v1._1))\n                ];\n                return [];\n            };\n        const prev = buildPartitionNumbers(v - 1 | 0);\n        return $List(\"Cons\", $$new(prev)(1), prev);\n    };\n    var partitionNumber = (v)=>{\n        if (v < 0) return [];\n        if (v === 0) return [\n            []\n        ];\n        const $0 = buildPartitionNumbers(v);\n        if ($0.tag === \"Nil\") return [];\n        if ($0.tag === \"Cons\") return $0._1;\n        fail();\n    };\n    var partitionNumbers = (v)=>{\n        if (v < 0) return [];\n        if (v === 0) return [\n            [\n                []\n            ]\n        ];\n        return fromFoldableImpl(foldableList.foldr, buildPartitionNumbers(v));\n    };\n    // node_modules/uuid/dist/esm-browser/regex.js\n    var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n    // node_modules/uuid/dist/esm-browser/validate.js\n    function validate(uuid) {\n        return typeof uuid === \"string\" && regex_default.test(uuid);\n    }\n    var validate_default = validate;\n    // node_modules/uuid/dist/esm-browser/stringify.js\n    var byteToHex = [];\n    for(let i = 0; i < 256; ++i)byteToHex.push((i + 256).toString(16).slice(1));\n    function unsafeStringify(arr, offset = 0) {\n        return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n    }\n    // node_modules/uuid/dist/esm-browser/parse.js\n    function parse(uuid) {\n        if (!validate_default(uuid)) throw TypeError(\"Invalid UUID\");\n        let v;\n        const arr = new Uint8Array(16);\n        arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n        arr[1] = v >>> 16 & 255;\n        arr[2] = v >>> 8 & 255;\n        arr[3] = v & 255;\n        arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n        arr[5] = v & 255;\n        arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n        arr[7] = v & 255;\n        arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n        arr[9] = v & 255;\n        arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;\n        arr[11] = v / 4294967296 & 255;\n        arr[12] = v >>> 24 & 255;\n        arr[13] = v >>> 16 & 255;\n        arr[14] = v >>> 8 & 255;\n        arr[15] = v & 255;\n        return arr;\n    }\n    var parse_default = parse;\n    // node_modules/uuid/dist/esm-browser/v35.js\n    function stringToBytes(str) {\n        str = unescape(encodeURIComponent(str));\n        const bytes = [];\n        for(let i = 0; i < str.length; ++i)bytes.push(str.charCodeAt(i));\n        return bytes;\n    }\n    var DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\n    var URL = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\n    function v35(name, version, hashfunc) {\n        function generateUUID(value, namespace, buf, offset) {\n            var _namespace;\n            if (typeof value === \"string\") value = stringToBytes(value);\n            if (typeof namespace === \"string\") namespace = parse_default(namespace);\n            if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n            let bytes = new Uint8Array(16 + value.length);\n            bytes.set(namespace);\n            bytes.set(value, namespace.length);\n            bytes = hashfunc(bytes);\n            bytes[6] = bytes[6] & 15 | version;\n            bytes[8] = bytes[8] & 63 | 128;\n            if (buf) {\n                offset = offset || 0;\n                for(let i = 0; i < 16; ++i)buf[offset + i] = bytes[i];\n                return buf;\n            }\n            return unsafeStringify(bytes);\n        }\n        try {\n            generateUUID.name = name;\n        } catch (err) {}\n        generateUUID.DNS = DNS;\n        generateUUID.URL = URL;\n        return generateUUID;\n    }\n    // node_modules/uuid/dist/esm-browser/sha1.js\n    function f(s, x, y, z) {\n        switch(s){\n            case 0:\n                return x & y ^ ~x & z;\n            case 1:\n                return x ^ y ^ z;\n            case 2:\n                return x & y ^ x & z ^ y & z;\n            case 3:\n                return x ^ y ^ z;\n        }\n    }\n    function ROTL(x, n) {\n        return x << n | x >>> 32 - n;\n    }\n    function sha1(bytes) {\n        const K = [\n            1518500249,\n            1859775393,\n            2400959708,\n            3395469782\n        ];\n        const H = [\n            1732584193,\n            4023233417,\n            2562383102,\n            271733878,\n            3285377520\n        ];\n        if (typeof bytes === \"string\") {\n            const msg = unescape(encodeURIComponent(bytes));\n            bytes = [];\n            for(let i = 0; i < msg.length; ++i)bytes.push(msg.charCodeAt(i));\n        } else if (!Array.isArray(bytes)) bytes = Array.prototype.slice.call(bytes);\n        bytes.push(128);\n        const l = bytes.length / 4 + 2;\n        const N = Math.ceil(l / 16);\n        const M = new Array(N);\n        for(let i = 0; i < N; ++i){\n            const arr = new Uint32Array(16);\n            for(let j = 0; j < 16; ++j)arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n            M[i] = arr;\n        }\n        M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n        M[N - 1][14] = Math.floor(M[N - 1][14]);\n        M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;\n        for(let i = 0; i < N; ++i){\n            const W = new Uint32Array(80);\n            for(let t = 0; t < 16; ++t)W[t] = M[i][t];\n            for(let t = 16; t < 80; ++t)W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n            let a = H[0];\n            let b = H[1];\n            let c = H[2];\n            let d = H[3];\n            let e = H[4];\n            for(let t = 0; t < 80; ++t){\n                const s = Math.floor(t / 20);\n                const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n                e = d;\n                d = c;\n                c = ROTL(b, 30) >>> 0;\n                b = a;\n                a = T;\n            }\n            H[0] = H[0] + a >>> 0;\n            H[1] = H[1] + b >>> 0;\n            H[2] = H[2] + c >>> 0;\n            H[3] = H[3] + d >>> 0;\n            H[4] = H[4] + e >>> 0;\n        }\n        return [\n            H[0] >> 24 & 255,\n            H[0] >> 16 & 255,\n            H[0] >> 8 & 255,\n            H[0] & 255,\n            H[1] >> 24 & 255,\n            H[1] >> 16 & 255,\n            H[1] >> 8 & 255,\n            H[1] & 255,\n            H[2] >> 24 & 255,\n            H[2] >> 16 & 255,\n            H[2] >> 8 & 255,\n            H[2] & 255,\n            H[3] >> 24 & 255,\n            H[3] >> 16 & 255,\n            H[3] >> 8 & 255,\n            H[3] & 255,\n            H[4] >> 24 & 255,\n            H[4] >> 16 & 255,\n            H[4] >> 8 & 255,\n            H[4] & 255\n        ];\n    }\n    var sha1_default = sha1;\n    // node_modules/uuid/dist/esm-browser/v5.js\n    var v5 = v35(\"v5\", 80, sha1_default);\n    var v5_default = v5;\n    // output-es/Data.UUID/foreign.js\n    var getUUID5Impl = function(str) {\n        return function(namespace) {\n            return v5_default(str, namespace);\n        };\n    };\n    var validateV4UUID = validate_default;\n    // output-es/TcgCalculator.Types.Id/index.js\n    var namespaceTcgCalculator = /* @__PURE__ */ getUUID5Impl(\"tcg-calculator\")(\"00000000-0000-0000-0000-000000000000\");\n    var decodeJsonId = {\n        decodeJson: (json)=>{\n            const $0 = _caseJson((v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), Right, (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), json);\n            if ($0.tag === \"Left\") return $Either(\"Left\", $0._1);\n            if ($0.tag === \"Right\") return $Either(\"Right\", validateV4UUID($0._1) ? $0._1 : getUUID5Impl($0._1)(namespaceTcgCalculator));\n            fail();\n        }\n    };\n    // output-es/TcgCalculator.Types/index.js\n    var $ConditionMode = (tag)=>tag;\n    var cardsIsSymbol = {\n        reflectSymbol: ()=>\"cards\"\n    };\n    var countIsSymbol = {\n        reflectSymbol: ()=>\"count\"\n    };\n    var modeIsSymbol = {\n        reflectSymbol: ()=>\"mode\"\n    };\n    var idIsSymbol = {\n        reflectSymbol: ()=>\"id\"\n    };\n    var nameIsSymbol = {\n        reflectSymbol: ()=>\"name\"\n    };\n    var AtLeast = /* @__PURE__ */ $ConditionMode(\"AtLeast\");\n    var JustDraw = /* @__PURE__ */ $ConditionMode(\"JustDraw\");\n    var Remains = /* @__PURE__ */ $ConditionMode(\"Remains\");\n    var JustRemains = /* @__PURE__ */ $ConditionMode(\"JustRemains\");\n    var Choice = /* @__PURE__ */ $ConditionMode(\"Choice\");\n    var LeftOne = /* @__PURE__ */ $ConditionMode(\"LeftOne\");\n    var LeftAll = /* @__PURE__ */ $ConditionMode(\"LeftAll\");\n    var readConditionMode = (v)=>{\n        if (v === \"AtLeast\") return $Maybe(\"Just\", AtLeast);\n        if (v === \"JustDraw\") return $Maybe(\"Just\", JustDraw);\n        if (v === \"Remains\") return $Maybe(\"Just\", Remains);\n        if (v === \"JustRemains\") return $Maybe(\"Just\", JustRemains);\n        if (v === \"Choice\") return $Maybe(\"Just\", Choice);\n        if (v === \"LeftOne\") return $Maybe(\"Just\", LeftOne);\n        if (v === \"LeftAll\") return $Maybe(\"Just\", LeftAll);\n        return Nothing;\n    };\n    var decodeJsonConditionMode = {\n        decodeJson: (json)=>{\n            const $0 = _caseJson((v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), Right, (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), json);\n            if ($0.tag === \"Left\") return $Either(\"Left\", $0._1);\n            if ($0.tag === \"Right\") {\n                const $1 = readConditionMode($0._1);\n                if ($1.tag === \"Nothing\") return $Either(\"Left\", $JsonDecodeError(\"UnexpectedValue\", json));\n                if ($1.tag === \"Just\") return $Either(\"Right\", $1._1);\n            }\n            fail();\n        }\n    };\n    var decodeJsonCondition = /* @__PURE__ */ decodeRecord(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ (()=>{\n        const $0 = decodeArray(decodeRecord(gDecodeJsonCons({\n            decodeJsonField: (j)=>{\n                if (j.tag === \"Just\") return $Maybe(\"Just\", decodeInt(j._1));\n                return Nothing;\n            }\n        })(gDecodeJsonCons({\n            decodeJsonField: (j)=>{\n                if (j.tag === \"Just\") return $Maybe(\"Just\", decodeJsonId.decodeJson(j._1));\n                return Nothing;\n            }\n        })(gDecodeJsonCons({\n            decodeJsonField: (j)=>{\n                if (j.tag === \"Just\") return $Maybe(\"Just\", _caseJson((v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), Right, (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), j._1));\n                return Nothing;\n            }\n        })(gDecodeJsonNil)(nameIsSymbol)()())(idIsSymbol)()())(countIsSymbol)()())().decodeJson);\n        return {\n            decodeJsonField: (j)=>{\n                if (j.tag === \"Just\") return $Maybe(\"Just\", $0(j._1));\n                return Nothing;\n            }\n        };\n    })())(/* @__PURE__ */ gDecodeJsonCons({\n        decodeJsonField: (j)=>{\n            if (j.tag === \"Just\") return $Maybe(\"Just\", decodeInt(j._1));\n            return Nothing;\n        }\n    })(/* @__PURE__ */ gDecodeJsonCons({\n        decodeJsonField: (j)=>{\n            if (j.tag === \"Just\") return $Maybe(\"Just\", decodeJsonConditionMode.decodeJson(j._1));\n            return Nothing;\n        }\n    })(gDecodeJsonNil)(modeIsSymbol)()())(countIsSymbol)()())(cardsIsSymbol)()())();\n    // output-es/TcgCalculator/index.js\n    var and3 = /* @__PURE__ */ and(foldableArray)(heytingAlgebraBoolean);\n    var greaterThanOrEq = (a1)=>(a2)=>a1 >= a2;\n    var maximum = /* @__PURE__ */ (()=>maximumBy(foldableArray)(ordInt.compare))();\n    var distinctPermutations2 = /* @__PURE__ */ distinctPermutations(ordInt);\n    var min2 = (x)=>(y)=>{\n            const v = ordInt.compare(x)(y);\n            if (v === \"LT\") return x;\n            if (v === \"EQ\") return x;\n            if (v === \"GT\") return y;\n            fail();\n        };\n    var product3 = /* @__PURE__ */ (()=>foldlArray(biMul)(semiringBigInt.one))();\n    var sumBy = (dictSemiring)=>{\n        const semigroupAdditive1 = {\n            append: (v)=>(v1)=>dictSemiring.add(v)(v1)\n        };\n        return foldableArray.foldMap({\n            mempty: dictSemiring.zero,\n            Semigroup0: ()=>semigroupAdditive1\n        });\n    };\n    var sumBy1 = /* @__PURE__ */ sumBy(semiringInt);\n    var sumBy2 = /* @__PURE__ */ sumBy(semiringBigInt);\n    var satisfyCondition = (dp)=>all((v)=>{\n            const $0 = v.card.id;\n            const $1 = find((x)=>x.card.id === $0)(dp);\n            const draw = (()=>{\n                if ($1.tag === \"Nothing\") return 0;\n                if ($1.tag === \"Just\") return $1._1.draw;\n                fail();\n            })();\n            return v.min <= draw && draw <= v.max;\n        });\n    var mkDrawPattern$p = (v)=>(v1)=>{\n            if (v1.length === 0) return [];\n            if (v1.length === 1 && v1[0].length === 0) return [\n                []\n            ];\n            const cardsLength = v.length;\n            const pattern$p = filterImpl((()=>{\n                const $0 = zipWith(greaterThanOrEq)(sortBy((b)=>(a)=>ordInt.compare(a)(b))(arrayMap((v2)=>v2.count)(v)));\n                return (a)=>a.length <= cardsLength && and3($0(a));\n            })(), v1);\n            const cardCombinations = arrayMap((x)=>combinations(x)(v))(rangeImpl(0, (()=>{\n                const $0 = maximum(arrayMap(length)(pattern$p));\n                if ($0.tag === \"Nothing\") return 0;\n                if ($0.tag === \"Just\") return $0._1;\n                fail();\n            })()));\n            return arrayBind(pattern$p)((p)=>{\n                const $0 = p.length;\n                const con = $0 >= 0 && $0 < cardCombinations.length ? cardCombinations[$0] : [];\n                return arrayBind(distinctPermutations2(p))((p$p)=>filterImpl(all((d)=>d.draw <= d.card.count), arrayMap(zipWith((v2)=>(v3)=>({\n                                draw: v2,\n                                card: v3\n                            }))(p$p))(con)));\n            });\n        };\n    var mkConditionPattern = (mkConditionPattern$a0$copy)=>{\n        let mkConditionPattern$a0 = mkConditionPattern$a0$copy, mkConditionPattern$c = true, mkConditionPattern$r;\n        while(mkConditionPattern$c){\n            const v = mkConditionPattern$a0;\n            if (v.mode === \"AtLeast\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((p)=>({\n                            card: p.card,\n                            min: p.draw,\n                            max: p.card.count\n                        }))(v1))(mkDrawPattern$p(v.cards)(partitionNumber(v.count)));\n                continue;\n            }\n            if (v.mode === \"JustDraw\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((card)=>{\n                        const $0 = find((x)=>x.card.id === card.id)(v1);\n                        const draw = (()=>{\n                            if ($0.tag === \"Nothing\") return 0;\n                            if ($0.tag === \"Just\") return $0._1.draw;\n                            fail();\n                        })();\n                        return {\n                            card: card,\n                            min: draw,\n                            max: draw\n                        };\n                    })(v.cards))(mkDrawPattern$p(v.cards)(partitionNumber(v.count)));\n                continue;\n            }\n            if (v.mode === \"Remains\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((card)=>({\n                            card: card,\n                            min: 0,\n                            max: (()=>{\n                                const $0 = find((x)=>x.card.id === card.id)(v1);\n                                if ($0.tag === \"Nothing\") return 0;\n                                if ($0.tag === \"Just\") return $0._1.draw;\n                                fail();\n                            })()\n                        }))(v.cards))(mkDrawPattern$p(v.cards)(partitionNumber(sumBy1((v1)=>v1.count)(v.cards) - v.count | 0)));\n                continue;\n            }\n            if (v.mode === \"JustRemains\") {\n                mkConditionPattern$a0 = {\n                    mode: JustDraw,\n                    count: sumBy1((v1)=>v1.count)(v.cards) - v.count | 0,\n                    cards: v.cards\n                };\n                continue;\n            }\n            if (v.mode === \"Choice\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((p)=>({\n                            card: p.card,\n                            min: 1,\n                            max: p.card.count\n                        }))(v1))(mkDrawPattern$p(v.cards)([\n                    replicateImpl(v.count, 1)\n                ]));\n                continue;\n            }\n            if (v.mode === \"LeftOne\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((p)=>({\n                            card: p.card,\n                            min: 0,\n                            max: p.card.count - 1 | 0\n                        }))(v1))(mkDrawPattern$p(v.cards)([\n                    replicateImpl(v.count, 1)\n                ]));\n                continue;\n            }\n            if (v.mode === \"LeftAll\") {\n                mkConditionPattern$c = false;\n                mkConditionPattern$r = arrayMap((v1)=>arrayMap((p)=>({\n                            card: p.card,\n                            min: 0,\n                            max: 0\n                        }))(v1))(mkDrawPattern$p(v.cards)([\n                    replicateImpl(v.count, 0)\n                ]));\n                continue;\n            }\n            fail();\n        }\n        return mkConditionPattern$r;\n    };\n    var mergeConditionPattern = (left)=>(right)=>arrayMap(foldable1NonEmptyArray.foldl1((v)=>(v1)=>({\n                        card: v.card,\n                        min: v.min + v1.min | 0,\n                        max: min2(v.max)(v1.max)\n                    })))(groupAllBy((x)=>(y)=>ordString.compare(x.card.id)(y.card.id))([\n                ...left,\n                ...right\n            ]));\n    var isValidConditionPattern = /* @__PURE__ */ all((v)=>v.min <= v.max && v.min <= v.card.count);\n    var generateDrawPatterns = (v)=>{\n        const maxDrawCount = min2(v.hand)(sumBy1((v1)=>v1.count)(v.cards));\n        return mkDrawPattern$p(v.cards)(concat((()=>{\n            const $0 = ((maxDrawCount + v.others | 0) - v.hand | 0) + 1 | 0;\n            const $1 = partitionNumbers(maxDrawCount);\n            if ($0 < 1) return [];\n            return sliceImpl(0, $0, $1);\n        })()));\n    };\n    var calculatePatternCount = (v)=>(pattern)=>biMul(product3(arrayMap((v1)=>combinationNumber(v1.card.count)(v1.draw))(pattern)))(combinationNumber(v.others)(v.hand - sumBy1((v1)=>v1.draw)(pattern) | 0));\n    var buildConditionPattern = (conditions)=>foldl1Impl((left)=>(right)=>arrayBind(left)((l)=>arrayBind(right)((r)=>{\n                        const merged = mergeConditionPattern(l)(r);\n                        if (isValidConditionPattern(merged)) return [\n                            merged\n                        ];\n                        return [];\n                    })), arrayMap(mkConditionPattern)(conditions));\n    var calculate = (deck)=>(conditions)=>{\n            const conditionPattern = arrayBind(conditions)(buildConditionPattern);\n            return sumBy2(calculatePatternCount(deck))(filterImpl((dp)=>anyImpl(satisfyCondition(dp), conditionPattern), generateDrawPatterns(deck)));\n        };\n    // output-es/Web.Worker.GlobalScope/foreign.js\n    function postMessageImpl(data) {\n        return function(tr) {\n            return function() {\n                self.postMessage(data, tr.length > 0 ? tr : void 0);\n            };\n        };\n    }\n    function close() {\n        self.close();\n    }\n    function onMessage(f2) {\n        return function() {\n            self.onmessage = function(ev) {\n                f2(ev)();\n            };\n        };\n    }\n    // output-es/Web.Worker.MessageEvent/foreign.js\n    function data_(ev) {\n        return ev.data;\n    }\n    // output-es/Worker.Main/index.js\n    var decodeJson = /* @__PURE__ */ (()=>decodeRecord(gDecodeJsonCons((()=>{\n            const $0 = decodeArray(decodeNonEmptyArray(decodeJsonCondition.decodeJson));\n            return {\n                decodeJsonField: (j)=>{\n                    if (j.tag === \"Just\") return $Maybe(\"Just\", $0(j._1));\n                    return Nothing;\n                }\n            };\n        })())(gDecodeJsonCons((()=>{\n            const $0 = decodeRecord(gDecodeJsonCons((()=>{\n                const $02 = decodeArray(decodeRecord(gDecodeJsonCons({\n                    decodeJsonField: (j)=>{\n                        if (j.tag === \"Just\") return $Maybe(\"Just\", decodeInt(j._1));\n                        return Nothing;\n                    }\n                })(gDecodeJsonCons({\n                    decodeJsonField: (j)=>{\n                        if (j.tag === \"Just\") return $Maybe(\"Just\", decodeJsonId.decodeJson(j._1));\n                        return Nothing;\n                    }\n                })(gDecodeJsonCons({\n                    decodeJsonField: (j)=>{\n                        if (j.tag === \"Just\") return $Maybe(\"Just\", _caseJson((v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), Right, (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), (v)=>$Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")), j._1));\n                        return Nothing;\n                    }\n                })(gDecodeJsonNil)({\n                    reflectSymbol: ()=>\"name\"\n                })()())({\n                    reflectSymbol: ()=>\"id\"\n                })()())({\n                    reflectSymbol: ()=>\"count\"\n                })()())().decodeJson);\n                return {\n                    decodeJsonField: (j)=>{\n                        if (j.tag === \"Just\") return $Maybe(\"Just\", $02(j._1));\n                        return Nothing;\n                    }\n                };\n            })())(gDecodeJsonCons({\n                decodeJsonField: (j)=>{\n                    if (j.tag === \"Just\") return $Maybe(\"Just\", decodeInt(j._1));\n                    return Nothing;\n                }\n            })(gDecodeJsonCons({\n                decodeJsonField: (j)=>{\n                    if (j.tag === \"Just\") return $Maybe(\"Just\", decodeInt(j._1));\n                    return Nothing;\n                }\n            })(gDecodeJsonNil)({\n                reflectSymbol: ()=>\"others\"\n            })()())({\n                reflectSymbol: ()=>\"hand\"\n            })()())({\n                reflectSymbol: ()=>\"cards\"\n            })()())();\n            return {\n                decodeJsonField: (j)=>{\n                    if (j.tag === \"Just\") return $Maybe(\"Just\", $0.decodeJson(j._1));\n                    return Nothing;\n                }\n            };\n        })())(gDecodeJsonNil)({\n            reflectSymbol: ()=>\"deck\"\n        })()())({\n            reflectSymbol: ()=>\"conditions\"\n        })()())().decodeJson)();\n    var main = /* @__PURE__ */ onMessage((event)=>{\n        const v = decodeJson(data_(event));\n        const $0 = (()=>{\n            if (v.tag === \"Left\") return error(printJsonDecodeError(v._1));\n            if (v.tag === \"Right\") return postMessageImpl(toString(calculate(v._1.deck)(v._1.conditions)))([]);\n            fail();\n        })();\n        return ()=>{\n            $0();\n            return close();\n        };\n    });\n    // <stdin>\n    main();\n})();\n\n})();\n//# sourceMappingURL=worker.js.map\n","(() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n\n  // node_modules/big-integer/BigInteger.js\n  var require_BigInteger = __commonJS({\n    \"node_modules/big-integer/BigInteger.js\"(exports, module) {\n      var bigInt2 = function(undefined2) {\n        \"use strict\";\n        var BASE = 1e7, LOG_BASE = 7, MAX_INT = 9007199254740992, MAX_INT_ARR = smallToArray(MAX_INT), DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n        var supportsNativeBigInt = typeof BigInt === \"function\";\n        function Integer(v, radix, alphabet, caseSensitive) {\n          if (typeof v === \"undefined\")\n            return Integer[0];\n          if (typeof radix !== \"undefined\")\n            return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\n          return parseValue(v);\n        }\n        function BigInteger(value, sign2) {\n          this.value = value;\n          this.sign = sign2;\n          this.isSmall = false;\n        }\n        BigInteger.prototype = Object.create(Integer.prototype);\n        function SmallInteger(value) {\n          this.value = value;\n          this.sign = value < 0;\n          this.isSmall = true;\n        }\n        SmallInteger.prototype = Object.create(Integer.prototype);\n        function NativeBigInt(value) {\n          this.value = value;\n        }\n        NativeBigInt.prototype = Object.create(Integer.prototype);\n        function isPrecise(n) {\n          return -MAX_INT < n && n < MAX_INT;\n        }\n        function smallToArray(n) {\n          if (n < 1e7)\n            return [n];\n          if (n < 1e14)\n            return [n % 1e7, Math.floor(n / 1e7)];\n          return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n        }\n        function arrayToSmall(arr) {\n          trim2(arr);\n          var length3 = arr.length;\n          if (length3 < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n            switch (length3) {\n              case 0:\n                return 0;\n              case 1:\n                return arr[0];\n              case 2:\n                return arr[0] + arr[1] * BASE;\n              default:\n                return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n            }\n          }\n          return arr;\n        }\n        function trim2(v) {\n          var i2 = v.length;\n          while (v[--i2] === 0)\n            ;\n          v.length = i2 + 1;\n        }\n        function createArray(length3) {\n          var x = new Array(length3);\n          var i2 = -1;\n          while (++i2 < length3) {\n            x[i2] = 0;\n          }\n          return x;\n        }\n        function truncate(n) {\n          if (n > 0)\n            return Math.floor(n);\n          return Math.ceil(n);\n        }\n        function add(a, b) {\n          var l_a = a.length, l_b = b.length, r = new Array(l_a), carry = 0, base = BASE, sum, i2;\n          for (i2 = 0; i2 < l_b; i2++) {\n            sum = a[i2] + b[i2] + carry;\n            carry = sum >= base ? 1 : 0;\n            r[i2] = sum - carry * base;\n          }\n          while (i2 < l_a) {\n            sum = a[i2] + carry;\n            carry = sum === base ? 1 : 0;\n            r[i2++] = sum - carry * base;\n          }\n          if (carry > 0)\n            r.push(carry);\n          return r;\n        }\n        function addAny(a, b) {\n          if (a.length >= b.length)\n            return add(a, b);\n          return add(b, a);\n        }\n        function addSmall(a, carry) {\n          var l = a.length, r = new Array(l), base = BASE, sum, i2;\n          for (i2 = 0; i2 < l; i2++) {\n            sum = a[i2] - base + carry;\n            carry = Math.floor(sum / base);\n            r[i2] = sum - carry * base;\n            carry += 1;\n          }\n          while (carry > 0) {\n            r[i2++] = carry % base;\n            carry = Math.floor(carry / base);\n          }\n          return r;\n        }\n        BigInteger.prototype.add = function(v) {\n          var n = parseValue(v);\n          if (this.sign !== n.sign) {\n            return this.subtract(n.negate());\n          }\n          var a = this.value, b = n.value;\n          if (n.isSmall) {\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n          }\n          return new BigInteger(addAny(a, b), this.sign);\n        };\n        BigInteger.prototype.plus = BigInteger.prototype.add;\n        SmallInteger.prototype.add = function(v) {\n          var n = parseValue(v);\n          var a = this.value;\n          if (a < 0 !== n.sign) {\n            return this.subtract(n.negate());\n          }\n          var b = n.value;\n          if (n.isSmall) {\n            if (isPrecise(a + b))\n              return new SmallInteger(a + b);\n            b = smallToArray(Math.abs(b));\n          }\n          return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n        };\n        SmallInteger.prototype.plus = SmallInteger.prototype.add;\n        NativeBigInt.prototype.add = function(v) {\n          return new NativeBigInt(this.value + parseValue(v).value);\n        };\n        NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\n        function subtract(a, b) {\n          var a_l = a.length, b_l = b.length, r = new Array(a_l), borrow = 0, base = BASE, i2, difference;\n          for (i2 = 0; i2 < b_l; i2++) {\n            difference = a[i2] - borrow - b[i2];\n            if (difference < 0) {\n              difference += base;\n              borrow = 1;\n            } else\n              borrow = 0;\n            r[i2] = difference;\n          }\n          for (i2 = b_l; i2 < a_l; i2++) {\n            difference = a[i2] - borrow;\n            if (difference < 0)\n              difference += base;\n            else {\n              r[i2++] = difference;\n              break;\n            }\n            r[i2] = difference;\n          }\n          for (; i2 < a_l; i2++) {\n            r[i2] = a[i2];\n          }\n          trim2(r);\n          return r;\n        }\n        function subtractAny(a, b, sign2) {\n          var value;\n          if (compareAbs(a, b) >= 0) {\n            value = subtract(a, b);\n          } else {\n            value = subtract(b, a);\n            sign2 = !sign2;\n          }\n          value = arrayToSmall(value);\n          if (typeof value === \"number\") {\n            if (sign2)\n              value = -value;\n            return new SmallInteger(value);\n          }\n          return new BigInteger(value, sign2);\n        }\n        function subtractSmall(a, b, sign2) {\n          var l = a.length, r = new Array(l), carry = -b, base = BASE, i2, difference;\n          for (i2 = 0; i2 < l; i2++) {\n            difference = a[i2] + carry;\n            carry = Math.floor(difference / base);\n            difference %= base;\n            r[i2] = difference < 0 ? difference + base : difference;\n          }\n          r = arrayToSmall(r);\n          if (typeof r === \"number\") {\n            if (sign2)\n              r = -r;\n            return new SmallInteger(r);\n          }\n          return new BigInteger(r, sign2);\n        }\n        BigInteger.prototype.subtract = function(v) {\n          var n = parseValue(v);\n          if (this.sign !== n.sign) {\n            return this.add(n.negate());\n          }\n          var a = this.value, b = n.value;\n          if (n.isSmall)\n            return subtractSmall(a, Math.abs(b), this.sign);\n          return subtractAny(a, b, this.sign);\n        };\n        BigInteger.prototype.minus = BigInteger.prototype.subtract;\n        SmallInteger.prototype.subtract = function(v) {\n          var n = parseValue(v);\n          var a = this.value;\n          if (a < 0 !== n.sign) {\n            return this.add(n.negate());\n          }\n          var b = n.value;\n          if (n.isSmall) {\n            return new SmallInteger(a - b);\n          }\n          return subtractSmall(b, Math.abs(a), a >= 0);\n        };\n        SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n        NativeBigInt.prototype.subtract = function(v) {\n          return new NativeBigInt(this.value - parseValue(v).value);\n        };\n        NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\n        BigInteger.prototype.negate = function() {\n          return new BigInteger(this.value, !this.sign);\n        };\n        SmallInteger.prototype.negate = function() {\n          var sign2 = this.sign;\n          var small = new SmallInteger(-this.value);\n          small.sign = !sign2;\n          return small;\n        };\n        NativeBigInt.prototype.negate = function() {\n          return new NativeBigInt(-this.value);\n        };\n        BigInteger.prototype.abs = function() {\n          return new BigInteger(this.value, false);\n        };\n        SmallInteger.prototype.abs = function() {\n          return new SmallInteger(Math.abs(this.value));\n        };\n        NativeBigInt.prototype.abs = function() {\n          return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\n        };\n        function multiplyLong(a, b) {\n          var a_l = a.length, b_l = b.length, l = a_l + b_l, r = createArray(l), base = BASE, product4, carry, i2, a_i, b_j;\n          for (i2 = 0; i2 < a_l; ++i2) {\n            a_i = a[i2];\n            for (var j = 0; j < b_l; ++j) {\n              b_j = b[j];\n              product4 = a_i * b_j + r[i2 + j];\n              carry = Math.floor(product4 / base);\n              r[i2 + j] = product4 - carry * base;\n              r[i2 + j + 1] += carry;\n            }\n          }\n          trim2(r);\n          return r;\n        }\n        function multiplySmall(a, b) {\n          var l = a.length, r = new Array(l), base = BASE, carry = 0, product4, i2;\n          for (i2 = 0; i2 < l; i2++) {\n            product4 = a[i2] * b + carry;\n            carry = Math.floor(product4 / base);\n            r[i2] = product4 - carry * base;\n          }\n          while (carry > 0) {\n            r[i2++] = carry % base;\n            carry = Math.floor(carry / base);\n          }\n          return r;\n        }\n        function shiftLeft(x, n) {\n          var r = [];\n          while (n-- > 0)\n            r.push(0);\n          return r.concat(x);\n        }\n        function multiplyKaratsuba(x, y) {\n          var n = Math.max(x.length, y.length);\n          if (n <= 30)\n            return multiplyLong(x, y);\n          n = Math.ceil(n / 2);\n          var b = x.slice(n), a = x.slice(0, n), d = y.slice(n), c = y.slice(0, n);\n          var ac = multiplyKaratsuba(a, c), bd = multiplyKaratsuba(b, d), abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n          var product4 = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n          trim2(product4);\n          return product4;\n        }\n        function useKaratsuba(l1, l2) {\n          return -0.012 * l1 - 0.012 * l2 + 15e-6 * l1 * l2 > 0;\n        }\n        BigInteger.prototype.multiply = function(v) {\n          var n = parseValue(v), a = this.value, b = n.value, sign2 = this.sign !== n.sign, abs3;\n          if (n.isSmall) {\n            if (b === 0)\n              return Integer[0];\n            if (b === 1)\n              return this;\n            if (b === -1)\n              return this.negate();\n            abs3 = Math.abs(b);\n            if (abs3 < BASE) {\n              return new BigInteger(multiplySmall(a, abs3), sign2);\n            }\n            b = smallToArray(abs3);\n          }\n          if (useKaratsuba(a.length, b.length))\n            return new BigInteger(multiplyKaratsuba(a, b), sign2);\n          return new BigInteger(multiplyLong(a, b), sign2);\n        };\n        BigInteger.prototype.times = BigInteger.prototype.multiply;\n        function multiplySmallAndArray(a, b, sign2) {\n          if (a < BASE) {\n            return new BigInteger(multiplySmall(b, a), sign2);\n          }\n          return new BigInteger(multiplyLong(b, smallToArray(a)), sign2);\n        }\n        SmallInteger.prototype._multiplyBySmall = function(a) {\n          if (isPrecise(a.value * this.value)) {\n            return new SmallInteger(a.value * this.value);\n          }\n          return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n        };\n        BigInteger.prototype._multiplyBySmall = function(a) {\n          if (a.value === 0)\n            return Integer[0];\n          if (a.value === 1)\n            return this;\n          if (a.value === -1)\n            return this.negate();\n          return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n        };\n        SmallInteger.prototype.multiply = function(v) {\n          return parseValue(v)._multiplyBySmall(this);\n        };\n        SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n        NativeBigInt.prototype.multiply = function(v) {\n          return new NativeBigInt(this.value * parseValue(v).value);\n        };\n        NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\n        function square(a) {\n          var l = a.length, r = createArray(l + l), base = BASE, product4, carry, i2, a_i, a_j;\n          for (i2 = 0; i2 < l; i2++) {\n            a_i = a[i2];\n            carry = 0 - a_i * a_i;\n            for (var j = i2; j < l; j++) {\n              a_j = a[j];\n              product4 = 2 * (a_i * a_j) + r[i2 + j] + carry;\n              carry = Math.floor(product4 / base);\n              r[i2 + j] = product4 - carry * base;\n            }\n            r[i2 + l] = carry;\n          }\n          trim2(r);\n          return r;\n        }\n        BigInteger.prototype.square = function() {\n          return new BigInteger(square(this.value), false);\n        };\n        SmallInteger.prototype.square = function() {\n          var value = this.value * this.value;\n          if (isPrecise(value))\n            return new SmallInteger(value);\n          return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n        };\n        NativeBigInt.prototype.square = function(v) {\n          return new NativeBigInt(this.value * this.value);\n        };\n        function divMod1(a, b) {\n          var a_l = a.length, b_l = b.length, base = BASE, result = createArray(b.length), divisorMostSignificantDigit = b[b_l - 1], lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)), remainder2 = multiplySmall(a, lambda), divisor = multiplySmall(b, lambda), quotientDigit, shift, carry, borrow, i2, l, q;\n          if (remainder2.length <= a_l)\n            remainder2.push(0);\n          divisor.push(0);\n          divisorMostSignificantDigit = divisor[b_l - 1];\n          for (shift = a_l - b_l; shift >= 0; shift--) {\n            quotientDigit = base - 1;\n            if (remainder2[shift + b_l] !== divisorMostSignificantDigit) {\n              quotientDigit = Math.floor((remainder2[shift + b_l] * base + remainder2[shift + b_l - 1]) / divisorMostSignificantDigit);\n            }\n            carry = 0;\n            borrow = 0;\n            l = divisor.length;\n            for (i2 = 0; i2 < l; i2++) {\n              carry += quotientDigit * divisor[i2];\n              q = Math.floor(carry / base);\n              borrow += remainder2[shift + i2] - (carry - q * base);\n              carry = q;\n              if (borrow < 0) {\n                remainder2[shift + i2] = borrow + base;\n                borrow = -1;\n              } else {\n                remainder2[shift + i2] = borrow;\n                borrow = 0;\n              }\n            }\n            while (borrow !== 0) {\n              quotientDigit -= 1;\n              carry = 0;\n              for (i2 = 0; i2 < l; i2++) {\n                carry += remainder2[shift + i2] - base + divisor[i2];\n                if (carry < 0) {\n                  remainder2[shift + i2] = carry + base;\n                  carry = 0;\n                } else {\n                  remainder2[shift + i2] = carry;\n                  carry = 1;\n                }\n              }\n              borrow += carry;\n            }\n            result[shift] = quotientDigit;\n          }\n          remainder2 = divModSmall(remainder2, lambda)[0];\n          return [arrayToSmall(result), arrayToSmall(remainder2)];\n        }\n        function divMod2(a, b) {\n          var a_l = a.length, b_l = b.length, result = [], part = [], base = BASE, guess, xlen, highx, highy, check;\n          while (a_l) {\n            part.unshift(a[--a_l]);\n            trim2(part);\n            if (compareAbs(part, b) < 0) {\n              result.push(0);\n              continue;\n            }\n            xlen = part.length;\n            highx = part[xlen - 1] * base + part[xlen - 2];\n            highy = b[b_l - 1] * base + b[b_l - 2];\n            if (xlen > b_l) {\n              highx = (highx + 1) * base;\n            }\n            guess = Math.ceil(highx / highy);\n            do {\n              check = multiplySmall(b, guess);\n              if (compareAbs(check, part) <= 0)\n                break;\n              guess--;\n            } while (guess);\n            result.push(guess);\n            part = subtract(part, check);\n          }\n          result.reverse();\n          return [arrayToSmall(result), arrayToSmall(part)];\n        }\n        function divModSmall(value, lambda) {\n          var length3 = value.length, quotient = createArray(length3), base = BASE, i2, q, remainder2, divisor;\n          remainder2 = 0;\n          for (i2 = length3 - 1; i2 >= 0; --i2) {\n            divisor = remainder2 * base + value[i2];\n            q = truncate(divisor / lambda);\n            remainder2 = divisor - q * lambda;\n            quotient[i2] = q | 0;\n          }\n          return [quotient, remainder2 | 0];\n        }\n        function divModAny(self2, v) {\n          var value, n = parseValue(v);\n          if (supportsNativeBigInt) {\n            return [new NativeBigInt(self2.value / n.value), new NativeBigInt(self2.value % n.value)];\n          }\n          var a = self2.value, b = n.value;\n          var quotient;\n          if (b === 0)\n            throw new Error(\"Cannot divide by zero\");\n          if (self2.isSmall) {\n            if (n.isSmall) {\n              return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n            }\n            return [Integer[0], self2];\n          }\n          if (n.isSmall) {\n            if (b === 1)\n              return [self2, Integer[0]];\n            if (b == -1)\n              return [self2.negate(), Integer[0]];\n            var abs3 = Math.abs(b);\n            if (abs3 < BASE) {\n              value = divModSmall(a, abs3);\n              quotient = arrayToSmall(value[0]);\n              var remainder2 = value[1];\n              if (self2.sign)\n                remainder2 = -remainder2;\n              if (typeof quotient === \"number\") {\n                if (self2.sign !== n.sign)\n                  quotient = -quotient;\n                return [new SmallInteger(quotient), new SmallInteger(remainder2)];\n              }\n              return [new BigInteger(quotient, self2.sign !== n.sign), new SmallInteger(remainder2)];\n            }\n            b = smallToArray(abs3);\n          }\n          var comparison = compareAbs(a, b);\n          if (comparison === -1)\n            return [Integer[0], self2];\n          if (comparison === 0)\n            return [Integer[self2.sign === n.sign ? 1 : -1], Integer[0]];\n          if (a.length + b.length <= 200)\n            value = divMod1(a, b);\n          else\n            value = divMod2(a, b);\n          quotient = value[0];\n          var qSign = self2.sign !== n.sign, mod = value[1], mSign = self2.sign;\n          if (typeof quotient === \"number\") {\n            if (qSign)\n              quotient = -quotient;\n            quotient = new SmallInteger(quotient);\n          } else\n            quotient = new BigInteger(quotient, qSign);\n          if (typeof mod === \"number\") {\n            if (mSign)\n              mod = -mod;\n            mod = new SmallInteger(mod);\n          } else\n            mod = new BigInteger(mod, mSign);\n          return [quotient, mod];\n        }\n        BigInteger.prototype.divmod = function(v) {\n          var result = divModAny(this, v);\n          return {\n            quotient: result[0],\n            remainder: result[1]\n          };\n        };\n        NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n        BigInteger.prototype.divide = function(v) {\n          return divModAny(this, v)[0];\n        };\n        NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {\n          return new NativeBigInt(this.value / parseValue(v).value);\n        };\n        SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n        BigInteger.prototype.mod = function(v) {\n          return divModAny(this, v)[1];\n        };\n        NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {\n          return new NativeBigInt(this.value % parseValue(v).value);\n        };\n        SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n        BigInteger.prototype.pow = function(v) {\n          var n = parseValue(v), a = this.value, b = n.value, value, x, y;\n          if (b === 0)\n            return Integer[1];\n          if (a === 0)\n            return Integer[0];\n          if (a === 1)\n            return Integer[1];\n          if (a === -1)\n            return n.isEven() ? Integer[1] : Integer[-1];\n          if (n.sign) {\n            return Integer[0];\n          }\n          if (!n.isSmall)\n            throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n          if (this.isSmall) {\n            if (isPrecise(value = Math.pow(a, b)))\n              return new SmallInteger(truncate(value));\n          }\n          x = this;\n          y = Integer[1];\n          while (true) {\n            if (b & true) {\n              y = y.times(x);\n              --b;\n            }\n            if (b === 0)\n              break;\n            b /= 2;\n            x = x.square();\n          }\n          return y;\n        };\n        SmallInteger.prototype.pow = BigInteger.prototype.pow;\n        NativeBigInt.prototype.pow = function(v) {\n          var n = parseValue(v);\n          var a = this.value, b = n.value;\n          var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\n          if (b === _0)\n            return Integer[1];\n          if (a === _0)\n            return Integer[0];\n          if (a === _1)\n            return Integer[1];\n          if (a === BigInt(-1))\n            return n.isEven() ? Integer[1] : Integer[-1];\n          if (n.isNegative())\n            return new NativeBigInt(_0);\n          var x = this;\n          var y = Integer[1];\n          while (true) {\n            if ((b & _1) === _1) {\n              y = y.times(x);\n              --b;\n            }\n            if (b === _0)\n              break;\n            b /= _2;\n            x = x.square();\n          }\n          return y;\n        };\n        BigInteger.prototype.modPow = function(exp2, mod) {\n          exp2 = parseValue(exp2);\n          mod = parseValue(mod);\n          if (mod.isZero())\n            throw new Error(\"Cannot take modPow with modulus 0\");\n          var r = Integer[1], base = this.mod(mod);\n          if (exp2.isNegative()) {\n            exp2 = exp2.multiply(Integer[-1]);\n            base = base.modInv(mod);\n          }\n          while (exp2.isPositive()) {\n            if (base.isZero())\n              return Integer[0];\n            if (exp2.isOdd())\n              r = r.multiply(base).mod(mod);\n            exp2 = exp2.divide(2);\n            base = base.square().mod(mod);\n          }\n          return r;\n        };\n        NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n        function compareAbs(a, b) {\n          if (a.length !== b.length) {\n            return a.length > b.length ? 1 : -1;\n          }\n          for (var i2 = a.length - 1; i2 >= 0; i2--) {\n            if (a[i2] !== b[i2])\n              return a[i2] > b[i2] ? 1 : -1;\n          }\n          return 0;\n        }\n        BigInteger.prototype.compareAbs = function(v) {\n          var n = parseValue(v), a = this.value, b = n.value;\n          if (n.isSmall)\n            return 1;\n          return compareAbs(a, b);\n        };\n        SmallInteger.prototype.compareAbs = function(v) {\n          var n = parseValue(v), a = Math.abs(this.value), b = n.value;\n          if (n.isSmall) {\n            b = Math.abs(b);\n            return a === b ? 0 : a > b ? 1 : -1;\n          }\n          return -1;\n        };\n        NativeBigInt.prototype.compareAbs = function(v) {\n          var a = this.value;\n          var b = parseValue(v).value;\n          a = a >= 0 ? a : -a;\n          b = b >= 0 ? b : -b;\n          return a === b ? 0 : a > b ? 1 : -1;\n        };\n        BigInteger.prototype.compare = function(v) {\n          if (v === Infinity) {\n            return -1;\n          }\n          if (v === -Infinity) {\n            return 1;\n          }\n          var n = parseValue(v), a = this.value, b = n.value;\n          if (this.sign !== n.sign) {\n            return n.sign ? 1 : -1;\n          }\n          if (n.isSmall) {\n            return this.sign ? -1 : 1;\n          }\n          return compareAbs(a, b) * (this.sign ? -1 : 1);\n        };\n        BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n        SmallInteger.prototype.compare = function(v) {\n          if (v === Infinity) {\n            return -1;\n          }\n          if (v === -Infinity) {\n            return 1;\n          }\n          var n = parseValue(v), a = this.value, b = n.value;\n          if (n.isSmall) {\n            return a == b ? 0 : a > b ? 1 : -1;\n          }\n          if (a < 0 !== n.sign) {\n            return a < 0 ? -1 : 1;\n          }\n          return a < 0 ? 1 : -1;\n        };\n        SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n        NativeBigInt.prototype.compare = function(v) {\n          if (v === Infinity) {\n            return -1;\n          }\n          if (v === -Infinity) {\n            return 1;\n          }\n          var a = this.value;\n          var b = parseValue(v).value;\n          return a === b ? 0 : a > b ? 1 : -1;\n        };\n        NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\n        BigInteger.prototype.equals = function(v) {\n          return this.compare(v) === 0;\n        };\n        NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n        BigInteger.prototype.notEquals = function(v) {\n          return this.compare(v) !== 0;\n        };\n        NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n        BigInteger.prototype.greater = function(v) {\n          return this.compare(v) > 0;\n        };\n        NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n        BigInteger.prototype.lesser = function(v) {\n          return this.compare(v) < 0;\n        };\n        NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n        BigInteger.prototype.greaterOrEquals = function(v) {\n          return this.compare(v) >= 0;\n        };\n        NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n        BigInteger.prototype.lesserOrEquals = function(v) {\n          return this.compare(v) <= 0;\n        };\n        NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n        BigInteger.prototype.isEven = function() {\n          return (this.value[0] & 1) === 0;\n        };\n        SmallInteger.prototype.isEven = function() {\n          return (this.value & 1) === 0;\n        };\n        NativeBigInt.prototype.isEven = function() {\n          return (this.value & BigInt(1)) === BigInt(0);\n        };\n        BigInteger.prototype.isOdd = function() {\n          return (this.value[0] & 1) === 1;\n        };\n        SmallInteger.prototype.isOdd = function() {\n          return (this.value & 1) === 1;\n        };\n        NativeBigInt.prototype.isOdd = function() {\n          return (this.value & BigInt(1)) === BigInt(1);\n        };\n        BigInteger.prototype.isPositive = function() {\n          return !this.sign;\n        };\n        SmallInteger.prototype.isPositive = function() {\n          return this.value > 0;\n        };\n        NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\n        BigInteger.prototype.isNegative = function() {\n          return this.sign;\n        };\n        SmallInteger.prototype.isNegative = function() {\n          return this.value < 0;\n        };\n        NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\n        BigInteger.prototype.isUnit = function() {\n          return false;\n        };\n        SmallInteger.prototype.isUnit = function() {\n          return Math.abs(this.value) === 1;\n        };\n        NativeBigInt.prototype.isUnit = function() {\n          return this.abs().value === BigInt(1);\n        };\n        BigInteger.prototype.isZero = function() {\n          return false;\n        };\n        SmallInteger.prototype.isZero = function() {\n          return this.value === 0;\n        };\n        NativeBigInt.prototype.isZero = function() {\n          return this.value === BigInt(0);\n        };\n        BigInteger.prototype.isDivisibleBy = function(v) {\n          var n = parseValue(v);\n          if (n.isZero())\n            return false;\n          if (n.isUnit())\n            return true;\n          if (n.compareAbs(2) === 0)\n            return this.isEven();\n          return this.mod(n).isZero();\n        };\n        NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n        function isBasicPrime(v) {\n          var n = v.abs();\n          if (n.isUnit())\n            return false;\n          if (n.equals(2) || n.equals(3) || n.equals(5))\n            return true;\n          if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))\n            return false;\n          if (n.lesser(49))\n            return true;\n        }\n        function millerRabinTest(n, a) {\n          var nPrev = n.prev(), b = nPrev, r = 0, d, t, i2, x;\n          while (b.isEven())\n            b = b.divide(2), r++;\n          next:\n            for (i2 = 0; i2 < a.length; i2++) {\n              if (n.lesser(a[i2]))\n                continue;\n              x = bigInt2(a[i2]).modPow(b, n);\n              if (x.isUnit() || x.equals(nPrev))\n                continue;\n              for (d = r - 1; d != 0; d--) {\n                x = x.square().mod(n);\n                if (x.isUnit())\n                  return false;\n                if (x.equals(nPrev))\n                  continue next;\n              }\n              return false;\n            }\n          return true;\n        }\n        BigInteger.prototype.isPrime = function(strict) {\n          var isPrime = isBasicPrime(this);\n          if (isPrime !== undefined2)\n            return isPrime;\n          var n = this.abs();\n          var bits = n.bitLength();\n          if (bits <= 64)\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n          var logN = Math.log(2) * bits.toJSNumber();\n          var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n          for (var a = [], i2 = 0; i2 < t; i2++) {\n            a.push(bigInt2(i2 + 2));\n          }\n          return millerRabinTest(n, a);\n        };\n        NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n        BigInteger.prototype.isProbablePrime = function(iterations, rng) {\n          var isPrime = isBasicPrime(this);\n          if (isPrime !== undefined2)\n            return isPrime;\n          var n = this.abs();\n          var t = iterations === undefined2 ? 5 : iterations;\n          for (var a = [], i2 = 0; i2 < t; i2++) {\n            a.push(bigInt2.randBetween(2, n.minus(2), rng));\n          }\n          return millerRabinTest(n, a);\n        };\n        NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n        BigInteger.prototype.modInv = function(n) {\n          var t = bigInt2.zero, newT = bigInt2.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\n          while (!newR.isZero()) {\n            q = r.divide(newR);\n            lastT = t;\n            lastR = r;\n            t = newT;\n            r = newR;\n            newT = lastT.subtract(q.multiply(newT));\n            newR = lastR.subtract(q.multiply(newR));\n          }\n          if (!r.isUnit())\n            throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n          if (t.compare(0) === -1) {\n            t = t.add(n);\n          }\n          if (this.isNegative()) {\n            return t.negate();\n          }\n          return t;\n        };\n        NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n        BigInteger.prototype.next = function() {\n          var value = this.value;\n          if (this.sign) {\n            return subtractSmall(value, 1, this.sign);\n          }\n          return new BigInteger(addSmall(value, 1), this.sign);\n        };\n        SmallInteger.prototype.next = function() {\n          var value = this.value;\n          if (value + 1 < MAX_INT)\n            return new SmallInteger(value + 1);\n          return new BigInteger(MAX_INT_ARR, false);\n        };\n        NativeBigInt.prototype.next = function() {\n          return new NativeBigInt(this.value + BigInt(1));\n        };\n        BigInteger.prototype.prev = function() {\n          var value = this.value;\n          if (this.sign) {\n            return new BigInteger(addSmall(value, 1), true);\n          }\n          return subtractSmall(value, 1, this.sign);\n        };\n        SmallInteger.prototype.prev = function() {\n          var value = this.value;\n          if (value - 1 > -MAX_INT)\n            return new SmallInteger(value - 1);\n          return new BigInteger(MAX_INT_ARR, true);\n        };\n        NativeBigInt.prototype.prev = function() {\n          return new NativeBigInt(this.value - BigInt(1));\n        };\n        var powersOfTwo = [1];\n        while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)\n          powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n        var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\n        function shift_isSmall(n) {\n          return Math.abs(n) <= BASE;\n        }\n        BigInteger.prototype.shiftLeft = function(v) {\n          var n = parseValue(v).toJSNumber();\n          if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n          }\n          if (n < 0)\n            return this.shiftRight(-n);\n          var result = this;\n          if (result.isZero())\n            return result;\n          while (n >= powers2Length) {\n            result = result.multiply(highestPower2);\n            n -= powers2Length - 1;\n          }\n          return result.multiply(powersOfTwo[n]);\n        };\n        NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n        BigInteger.prototype.shiftRight = function(v) {\n          var remQuo;\n          var n = parseValue(v).toJSNumber();\n          if (!shift_isSmall(n)) {\n            throw new Error(String(n) + \" is too large for shifting.\");\n          }\n          if (n < 0)\n            return this.shiftLeft(-n);\n          var result = this;\n          while (n >= powers2Length) {\n            if (result.isZero() || result.isNegative() && result.isUnit())\n              return result;\n            remQuo = divModAny(result, highestPower2);\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n            n -= powers2Length - 1;\n          }\n          remQuo = divModAny(result, powersOfTwo[n]);\n          return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n        };\n        NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n        function bitwise(x, y, fn) {\n          y = parseValue(y);\n          var xSign = x.isNegative(), ySign = y.isNegative();\n          var xRem = xSign ? x.not() : x, yRem = ySign ? y.not() : y;\n          var xDigit = 0, yDigit = 0;\n          var xDivMod = null, yDivMod = null;\n          var result = [];\n          while (!xRem.isZero() || !yRem.isZero()) {\n            xDivMod = divModAny(xRem, highestPower2);\n            xDigit = xDivMod[1].toJSNumber();\n            if (xSign) {\n              xDigit = highestPower2 - 1 - xDigit;\n            }\n            yDivMod = divModAny(yRem, highestPower2);\n            yDigit = yDivMod[1].toJSNumber();\n            if (ySign) {\n              yDigit = highestPower2 - 1 - yDigit;\n            }\n            xRem = xDivMod[0];\n            yRem = yDivMod[0];\n            result.push(fn(xDigit, yDigit));\n          }\n          var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt2(-1) : bigInt2(0);\n          for (var i2 = result.length - 1; i2 >= 0; i2 -= 1) {\n            sum = sum.multiply(highestPower2).add(bigInt2(result[i2]));\n          }\n          return sum;\n        }\n        BigInteger.prototype.not = function() {\n          return this.negate().prev();\n        };\n        NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\n        BigInteger.prototype.and = function(n) {\n          return bitwise(this, n, function(a, b) {\n            return a & b;\n          });\n        };\n        NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\n        BigInteger.prototype.or = function(n) {\n          return bitwise(this, n, function(a, b) {\n            return a | b;\n          });\n        };\n        NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\n        BigInteger.prototype.xor = function(n) {\n          return bitwise(this, n, function(a, b) {\n            return a ^ b;\n          });\n        };\n        NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\n        var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n        function roughLOB(n) {\n          var v = n.value, x = typeof v === \"number\" ? v | LOBMASK_I : typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;\n          return x & -x;\n        }\n        function integerLogarithm(value, base) {\n          if (base.compareTo(value) <= 0) {\n            var tmp = integerLogarithm(value, base.square(base));\n            var p = tmp.p;\n            var e = tmp.e;\n            var t = p.multiply(base);\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p, e: e * 2 };\n          }\n          return { p: bigInt2(1), e: 0 };\n        }\n        BigInteger.prototype.bitLength = function() {\n          var n = this;\n          if (n.compareTo(bigInt2(0)) < 0) {\n            n = n.negate().subtract(bigInt2(1));\n          }\n          if (n.compareTo(bigInt2(0)) === 0) {\n            return bigInt2(0);\n          }\n          return bigInt2(integerLogarithm(n, bigInt2(2)).e).add(bigInt2(1));\n        };\n        NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n        function max2(a, b) {\n          a = parseValue(a);\n          b = parseValue(b);\n          return a.greater(b) ? a : b;\n        }\n        function min3(a, b) {\n          a = parseValue(a);\n          b = parseValue(b);\n          return a.lesser(b) ? a : b;\n        }\n        function gcd(a, b) {\n          a = parseValue(a).abs();\n          b = parseValue(b).abs();\n          if (a.equals(b))\n            return a;\n          if (a.isZero())\n            return b;\n          if (b.isZero())\n            return a;\n          var c = Integer[1], d, t;\n          while (a.isEven() && b.isEven()) {\n            d = min3(roughLOB(a), roughLOB(b));\n            a = a.divide(d);\n            b = b.divide(d);\n            c = c.multiply(d);\n          }\n          while (a.isEven()) {\n            a = a.divide(roughLOB(a));\n          }\n          do {\n            while (b.isEven()) {\n              b = b.divide(roughLOB(b));\n            }\n            if (a.greater(b)) {\n              t = b;\n              b = a;\n              a = t;\n            }\n            b = b.subtract(a);\n          } while (!b.isZero());\n          return c.isUnit() ? a : a.multiply(c);\n        }\n        function lcm(a, b) {\n          a = parseValue(a).abs();\n          b = parseValue(b).abs();\n          return a.divide(gcd(a, b)).multiply(b);\n        }\n        function randBetween(a, b, rng) {\n          a = parseValue(a);\n          b = parseValue(b);\n          var usedRNG = rng || Math.random;\n          var low = min3(a, b), high = max2(a, b);\n          var range2 = high.subtract(low).add(1);\n          if (range2.isSmall)\n            return low.add(Math.floor(usedRNG() * range2));\n          var digits = toBase2(range2, BASE).value;\n          var result = [], restricted = true;\n          for (var i2 = 0; i2 < digits.length; i2++) {\n            var top = restricted ? digits[i2] + (i2 + 1 < digits.length ? digits[i2 + 1] / BASE : 0) : BASE;\n            var digit = truncate(usedRNG() * top);\n            result.push(digit);\n            if (digit < digits[i2])\n              restricted = false;\n          }\n          return low.add(Integer.fromArray(result, BASE, false));\n        }\n        var parseBase = function(text, base, alphabet, caseSensitive) {\n          alphabet = alphabet || DEFAULT_ALPHABET;\n          text = String(text);\n          if (!caseSensitive) {\n            text = text.toLowerCase();\n            alphabet = alphabet.toLowerCase();\n          }\n          var length3 = text.length;\n          var i2;\n          var absBase = Math.abs(base);\n          var alphabetValues = {};\n          for (i2 = 0; i2 < alphabet.length; i2++) {\n            alphabetValues[alphabet[i2]] = i2;\n          }\n          for (i2 = 0; i2 < length3; i2++) {\n            var c = text[i2];\n            if (c === \"-\")\n              continue;\n            if (c in alphabetValues) {\n              if (alphabetValues[c] >= absBase) {\n                if (c === \"1\" && absBase === 1)\n                  continue;\n                throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n              }\n            }\n          }\n          base = parseValue(base);\n          var digits = [];\n          var isNegative = text[0] === \"-\";\n          for (i2 = isNegative ? 1 : 0; i2 < text.length; i2++) {\n            var c = text[i2];\n            if (c in alphabetValues)\n              digits.push(parseValue(alphabetValues[c]));\n            else if (c === \"<\") {\n              var start = i2;\n              do {\n                i2++;\n              } while (text[i2] !== \">\" && i2 < text.length);\n              digits.push(parseValue(text.slice(start + 1, i2)));\n            } else\n              throw new Error(c + \" is not a valid character\");\n          }\n          return parseBaseFromArray(digits, base, isNegative);\n        };\n        function parseBaseFromArray(digits, base, isNegative) {\n          var val = Integer[0], pow4 = Integer[1], i2;\n          for (i2 = digits.length - 1; i2 >= 0; i2--) {\n            val = val.add(digits[i2].times(pow4));\n            pow4 = pow4.times(base);\n          }\n          return isNegative ? val.negate() : val;\n        }\n        function stringify2(digit, alphabet) {\n          alphabet = alphabet || DEFAULT_ALPHABET;\n          if (digit < alphabet.length) {\n            return alphabet[digit];\n          }\n          return \"<\" + digit + \">\";\n        }\n        function toBase2(n, base) {\n          base = bigInt2(base);\n          if (base.isZero()) {\n            if (n.isZero())\n              return { value: [0], isNegative: false };\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n          }\n          if (base.equals(-1)) {\n            if (n.isZero())\n              return { value: [0], isNegative: false };\n            if (n.isNegative())\n              return {\n                value: [].concat.apply(\n                  [],\n                  Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])\n                ),\n                isNegative: false\n              };\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);\n            arr.unshift([1]);\n            return {\n              value: [].concat.apply([], arr),\n              isNegative: false\n            };\n          }\n          var neg = false;\n          if (n.isNegative() && base.isPositive()) {\n            neg = true;\n            n = n.abs();\n          }\n          if (base.isUnit()) {\n            if (n.isZero())\n              return { value: [0], isNegative: false };\n            return {\n              value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),\n              isNegative: neg\n            };\n          }\n          var out = [];\n          var left = n, divmod;\n          while (left.isNegative() || left.compareAbs(base) >= 0) {\n            divmod = left.divmod(base);\n            left = divmod.quotient;\n            var digit = divmod.remainder;\n            if (digit.isNegative()) {\n              digit = base.minus(digit).abs();\n              left = left.next();\n            }\n            out.push(digit.toJSNumber());\n          }\n          out.push(left.toJSNumber());\n          return { value: out.reverse(), isNegative: neg };\n        }\n        function toBaseString(n, base, alphabet) {\n          var arr = toBase2(n, base);\n          return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function(x) {\n            return stringify2(x, alphabet);\n          }).join(\"\");\n        }\n        BigInteger.prototype.toArray = function(radix) {\n          return toBase2(this, radix);\n        };\n        SmallInteger.prototype.toArray = function(radix) {\n          return toBase2(this, radix);\n        };\n        NativeBigInt.prototype.toArray = function(radix) {\n          return toBase2(this, radix);\n        };\n        BigInteger.prototype.toString = function(radix, alphabet) {\n          if (radix === undefined2)\n            radix = 10;\n          if (radix !== 10 || alphabet)\n            return toBaseString(this, radix, alphabet);\n          var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\n          while (--l >= 0) {\n            digit = String(v[l]);\n            str += zeros.slice(digit.length) + digit;\n          }\n          var sign2 = this.sign ? \"-\" : \"\";\n          return sign2 + str;\n        };\n        SmallInteger.prototype.toString = function(radix, alphabet) {\n          if (radix === undefined2)\n            radix = 10;\n          if (radix != 10 || alphabet)\n            return toBaseString(this, radix, alphabet);\n          return String(this.value);\n        };\n        NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\n        NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {\n          return this.toString();\n        };\n        BigInteger.prototype.valueOf = function() {\n          return parseInt(this.toString(), 10);\n        };\n        BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n        SmallInteger.prototype.valueOf = function() {\n          return this.value;\n        };\n        SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n        NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {\n          return parseInt(this.toString(), 10);\n        };\n        function parseStringValue(v) {\n          if (isPrecise(+v)) {\n            var x = +v;\n            if (x === truncate(x))\n              return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\n            throw new Error(\"Invalid integer: \" + v);\n          }\n          var sign2 = v[0] === \"-\";\n          if (sign2)\n            v = v.slice(1);\n          var split2 = v.split(/e/i);\n          if (split2.length > 2)\n            throw new Error(\"Invalid integer: \" + split2.join(\"e\"));\n          if (split2.length === 2) {\n            var exp2 = split2[1];\n            if (exp2[0] === \"+\")\n              exp2 = exp2.slice(1);\n            exp2 = +exp2;\n            if (exp2 !== truncate(exp2) || !isPrecise(exp2))\n              throw new Error(\"Invalid integer: \" + exp2 + \" is not a valid exponent.\");\n            var text = split2[0];\n            var decimalPlace = text.indexOf(\".\");\n            if (decimalPlace >= 0) {\n              exp2 -= text.length - decimalPlace - 1;\n              text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n            }\n            if (exp2 < 0)\n              throw new Error(\"Cannot include negative exponent part for integers\");\n            text += new Array(exp2 + 1).join(\"0\");\n            v = text;\n          }\n          var isValid = /^([0-9][0-9]*)$/.test(v);\n          if (!isValid)\n            throw new Error(\"Invalid integer: \" + v);\n          if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(sign2 ? \"-\" + v : v));\n          }\n          var r = [], max3 = v.length, l = LOG_BASE, min4 = max3 - l;\n          while (max3 > 0) {\n            r.push(+v.slice(min4, max3));\n            min4 -= l;\n            if (min4 < 0)\n              min4 = 0;\n            max3 -= l;\n          }\n          trim2(r);\n          return new BigInteger(r, sign2);\n        }\n        function parseNumberValue(v) {\n          if (supportsNativeBigInt) {\n            return new NativeBigInt(BigInt(v));\n          }\n          if (isPrecise(v)) {\n            if (v !== truncate(v))\n              throw new Error(v + \" is not an integer.\");\n            return new SmallInteger(v);\n          }\n          return parseStringValue(v.toString());\n        }\n        function parseValue(v) {\n          if (typeof v === \"number\") {\n            return parseNumberValue(v);\n          }\n          if (typeof v === \"string\") {\n            return parseStringValue(v);\n          }\n          if (typeof v === \"bigint\") {\n            return new NativeBigInt(v);\n          }\n          return v;\n        }\n        for (var i = 0; i < 1e3; i++) {\n          Integer[i] = parseValue(i);\n          if (i > 0)\n            Integer[-i] = parseValue(-i);\n        }\n        Integer.one = Integer[1];\n        Integer.zero = Integer[0];\n        Integer.minusOne = Integer[-1];\n        Integer.max = max2;\n        Integer.min = min3;\n        Integer.gcd = gcd;\n        Integer.lcm = lcm;\n        Integer.isInstance = function(x) {\n          return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;\n        };\n        Integer.randBetween = randBetween;\n        Integer.fromArray = function(digits, base, isNegative) {\n          return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n        };\n        return Integer;\n      }();\n      if (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n        module.exports = bigInt2;\n      }\n      if (typeof define === \"function\" && define.amd) {\n        define(function() {\n          return bigInt2;\n        });\n      }\n    }\n  });\n\n  // output-es/runtime.js\n  function fail() {\n    throw new Error(\"Failed pattern match\");\n  }\n\n  // output-es/Record.Unsafe/foreign.js\n  var unsafeSet = function(label) {\n    return function(value) {\n      return function(rec) {\n        var copy = {};\n        for (var key in rec) {\n          if ({}.hasOwnProperty.call(rec, key)) {\n            copy[key] = rec[key];\n          }\n        }\n        copy[label] = value;\n        return copy;\n      };\n    };\n  };\n\n  // output-es/Type.Proxy/index.js\n  var $$$Proxy = () => ({ tag: \"Proxy\" });\n  var $$Proxy = /* @__PURE__ */ $$$Proxy();\n\n  // output-es/Data.Show/foreign.js\n  var showIntImpl = function(n) {\n    return n.toString();\n  };\n\n  // output-es/Data.Ordering/index.js\n  var $Ordering = (tag) => tag;\n  var LT = /* @__PURE__ */ $Ordering(\"LT\");\n  var GT = /* @__PURE__ */ $Ordering(\"GT\");\n  var EQ = /* @__PURE__ */ $Ordering(\"EQ\");\n\n  // output-es/Data.Maybe/index.js\n  var $Maybe = (tag, _1) => ({ tag, _1 });\n  var Nothing = /* @__PURE__ */ $Maybe(\"Nothing\");\n  var Just = (value0) => $Maybe(\"Just\", value0);\n  var isNothing = (v2) => {\n    if (v2.tag === \"Nothing\") {\n      return true;\n    }\n    if (v2.tag === \"Just\") {\n      return false;\n    }\n    fail();\n  };\n\n  // output-es/Data.Functor/foreign.js\n  var arrayMap = function(f2) {\n    return function(arr) {\n      var l = arr.length;\n      var result = new Array(l);\n      for (var i = 0; i < l; i++) {\n        result[i] = f2(arr[i]);\n      }\n      return result;\n    };\n  };\n\n  // output-es/Data.Functor/index.js\n  var functorArray = { map: arrayMap };\n\n  // output-es/Control.Bind/foreign.js\n  var arrayBind = function(arr) {\n    return function(f2) {\n      var result = [];\n      for (var i = 0, l = arr.length; i < l; i++) {\n        Array.prototype.push.apply(result, f2(arr[i]));\n      }\n      return result;\n    };\n  };\n\n  // output-es/Data.Either/index.js\n  var $Either = (tag, _1) => ({ tag, _1 });\n  var Right = (value0) => $Either(\"Right\", value0);\n  var functorEither = {\n    map: (f2) => (m) => {\n      if (m.tag === \"Left\") {\n        return $Either(\"Left\", m._1);\n      }\n      if (m.tag === \"Right\") {\n        return $Either(\"Right\", f2(m._1));\n      }\n      fail();\n    }\n  };\n  var applyEither = {\n    apply: (v) => (v1) => {\n      if (v.tag === \"Left\") {\n        return $Either(\"Left\", v._1);\n      }\n      if (v.tag === \"Right\") {\n        if (v1.tag === \"Left\") {\n          return $Either(\"Left\", v1._1);\n        }\n        if (v1.tag === \"Right\") {\n          return $Either(\"Right\", v._1(v1._1));\n        }\n      }\n      fail();\n    },\n    Functor0: () => functorEither\n  };\n  var applicativeEither = { pure: Right, Apply0: () => applyEither };\n\n  // output-es/Data.Array.ST/foreign.js\n  var peekImpl = function(just, nothing, i, xs) {\n    return i >= 0 && i < xs.length ? just(xs[i]) : nothing;\n  };\n  var pokeImpl = function(i, a, xs) {\n    var ret = i >= 0 && i < xs.length;\n    if (ret)\n      xs[i] = a;\n    return ret;\n  };\n\n  // output-es/Data.Array.ST.Iterator/index.js\n  var $Iterator = (_1, _2) => ({ tag: \"Iterator\", _1, _2 });\n  var pushWhile = (p) => (iter) => (array) => () => {\n    let $$break = false;\n    const $0 = iter._2;\n    while (/* @__PURE__ */ (() => {\n      const $1 = $$break;\n      return !$1;\n    })()) {\n      const i = $0.value;\n      const mx = iter._1(i);\n      if (mx.tag === \"Just\" && p(mx._1)) {\n        array.push(mx._1);\n        iter._2.value;\n        const $1 = iter._2.value;\n        iter._2.value = $1 + 1 | 0;\n        continue;\n      }\n      $$break = true;\n    }\n  };\n  var iterate = (iter) => (f2) => () => {\n    let $$break = false;\n    const $0 = iter._2;\n    while (/* @__PURE__ */ (() => {\n      const $1 = $$break;\n      return !$1;\n    })()) {\n      const i = $0.value;\n      const $1 = $0.value;\n      $0.value = $1 + 1 | 0;\n      const mx = iter._1(i);\n      if (mx.tag === \"Just\") {\n        f2(mx._1)();\n        continue;\n      }\n      if (mx.tag === \"Nothing\") {\n        $$break = true;\n        continue;\n      }\n      fail();\n    }\n  };\n\n  // output-es/Data.Foldable/foreign.js\n  var foldrArray = function(f2) {\n    return function(init) {\n      return function(xs) {\n        var acc = init;\n        var len = xs.length;\n        for (var i = len - 1; i >= 0; i--) {\n          acc = f2(xs[i])(acc);\n        }\n        return acc;\n      };\n    };\n  };\n  var foldlArray = function(f2) {\n    return function(init) {\n      return function(xs) {\n        var acc = init;\n        var len = xs.length;\n        for (var i = 0; i < len; i++) {\n          acc = f2(acc)(xs[i]);\n        }\n        return acc;\n      };\n    };\n  };\n\n  // output-es/Data.Foldable/index.js\n  var identity2 = (x) => x;\n  var maximumBy = (dictFoldable) => (cmp) => dictFoldable.foldl((v) => (v1) => {\n    if (v.tag === \"Nothing\") {\n      return $Maybe(\"Just\", v1);\n    }\n    if (v.tag === \"Just\") {\n      return $Maybe(\"Just\", cmp(v._1)(v1) === \"GT\" ? v._1 : v1);\n    }\n    fail();\n  })(Nothing);\n  var foldableArray = {\n    foldr: foldrArray,\n    foldl: foldlArray,\n    foldMap: (dictMonoid) => {\n      const mempty = dictMonoid.mempty;\n      return (f2) => foldableArray.foldr((x) => (acc) => dictMonoid.Semigroup0().append(f2(x))(acc))(mempty);\n    }\n  };\n  var and = (dictFoldable) => (dictHeytingAlgebra) => dictFoldable.foldMap((() => {\n    const semigroupConj1 = { append: (v) => (v1) => dictHeytingAlgebra.conj(v)(v1) };\n    return { mempty: dictHeytingAlgebra.tt, Semigroup0: () => semigroupConj1 };\n  })())(identity2);\n\n  // output-es/Data.Tuple/index.js\n  var $Tuple = (_1, _2) => ({ tag: \"Tuple\", _1, _2 });\n  var Tuple = (value0) => (value1) => $Tuple(value0, value1);\n  var snd = (v) => v._2;\n  var fst = (v) => v._1;\n\n  // output-es/Data.FunctorWithIndex/foreign.js\n  var mapWithIndexArray = function(f2) {\n    return function(xs) {\n      var l = xs.length;\n      var result = Array(l);\n      for (var i = 0; i < l; i++) {\n        result[i] = f2(i)(xs[i]);\n      }\n      return result;\n    };\n  };\n\n  // output-es/Data.FunctorWithIndex/index.js\n  var functorWithIndexArray = { mapWithIndex: mapWithIndexArray, Functor0: () => functorArray };\n\n  // output-es/Data.Eq/foreign.js\n  var refEq = function(r1) {\n    return function(r2) {\n      return r1 === r2;\n    };\n  };\n  var eqIntImpl = refEq;\n  var eqStringImpl = refEq;\n\n  // output-es/Data.Eq/index.js\n  var eqString = { eq: eqStringImpl };\n  var eqInt = { eq: eqIntImpl };\n\n  // output-es/Data.Ord/foreign.js\n  var unsafeCompareImpl = function(lt) {\n    return function(eq) {\n      return function(gt) {\n        return function(x) {\n          return function(y) {\n            return x < y ? lt : x === y ? eq : gt;\n          };\n        };\n      };\n    };\n  };\n  var ordIntImpl = unsafeCompareImpl;\n  var ordStringImpl = unsafeCompareImpl;\n\n  // output-es/Data.Ord/index.js\n  var ordString = { compare: /* @__PURE__ */ ordStringImpl(LT)(EQ)(GT), Eq0: () => eqString };\n  var ordInt = { compare: /* @__PURE__ */ ordIntImpl(LT)(EQ)(GT), Eq0: () => eqInt };\n\n  // output-es/Data.Traversable/foreign.js\n  var traverseArrayImpl = /* @__PURE__ */ function() {\n    function array1(a) {\n      return [a];\n    }\n    function array2(a) {\n      return function(b) {\n        return [a, b];\n      };\n    }\n    function array3(a) {\n      return function(b) {\n        return function(c) {\n          return [a, b, c];\n        };\n      };\n    }\n    function concat2(xs) {\n      return function(ys) {\n        return xs.concat(ys);\n      };\n    }\n    return function(apply) {\n      return function(map) {\n        return function(pure) {\n          return function(f2) {\n            return function(array) {\n              function go(bot, top) {\n                switch (top - bot) {\n                  case 0:\n                    return pure([]);\n                  case 1:\n                    return map(array1)(f2(array[bot]));\n                  case 2:\n                    return apply(map(array2)(f2(array[bot])))(f2(array[bot + 1]));\n                  case 3:\n                    return apply(apply(map(array3)(f2(array[bot])))(f2(array[bot + 1])))(f2(array[bot + 2]));\n                  default:\n                    var pivot = bot + Math.floor((top - bot) / 4) * 2;\n                    return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));\n                }\n              }\n              return go(0, array.length);\n            };\n          };\n        };\n      };\n    };\n  }();\n\n  // output-es/Data.Traversable/index.js\n  var identity3 = (x) => x;\n  var traversableArray = {\n    traverse: (dictApplicative) => {\n      const Apply0 = dictApplicative.Apply0();\n      return traverseArrayImpl(Apply0.apply)(Apply0.Functor0().map)(dictApplicative.pure);\n    },\n    sequence: (dictApplicative) => traversableArray.traverse(dictApplicative)(identity3),\n    Functor0: () => functorArray,\n    Foldable1: () => foldableArray\n  };\n\n  // output-es/Data.Array/foreign.js\n  var rangeImpl = function(start, end) {\n    var step = start > end ? -1 : 1;\n    var result = new Array(step * (end - start) + 1);\n    var i = start, n = 0;\n    while (i !== end) {\n      result[n++] = i;\n      i += step;\n    }\n    result[n] = i;\n    return result;\n  };\n  var replicateFill = function(count, value) {\n    if (count < 1) {\n      return [];\n    }\n    var result = new Array(count);\n    return result.fill(value);\n  };\n  var replicatePolyfill = function(count, value) {\n    var result = [];\n    var n = 0;\n    for (var i = 0; i < count; i++) {\n      result[n++] = value;\n    }\n    return result;\n  };\n  var replicateImpl = typeof Array.prototype.fill === \"function\" ? replicateFill : replicatePolyfill;\n  var fromFoldableImpl = /* @__PURE__ */ function() {\n    function Cons2(head, tail) {\n      this.head = head;\n      this.tail = tail;\n    }\n    var emptyList = {};\n    function curryCons(head) {\n      return function(tail) {\n        return new Cons2(head, tail);\n      };\n    }\n    function listToArray(list) {\n      var result = [];\n      var count = 0;\n      var xs = list;\n      while (xs !== emptyList) {\n        result[count++] = xs.head;\n        xs = xs.tail;\n      }\n      return result;\n    }\n    return function(foldr, xs) {\n      return listToArray(foldr(curryCons)(emptyList)(xs));\n    };\n  }();\n  var length = function(xs) {\n    return xs.length;\n  };\n  var unconsImpl = function(empty2, next, xs) {\n    return xs.length === 0 ? empty2({}) : next(xs[0])(xs.slice(1));\n  };\n  var findIndexImpl = function(just, nothing, f2, xs) {\n    for (var i = 0, l = xs.length; i < l; i++) {\n      if (f2(xs[i]))\n        return just(i);\n    }\n    return nothing;\n  };\n  var findLastIndexImpl = function(just, nothing, f2, xs) {\n    for (var i = xs.length - 1; i >= 0; i--) {\n      if (f2(xs[i]))\n        return just(i);\n    }\n    return nothing;\n  };\n  var concat = function(xss) {\n    if (xss.length <= 1e4) {\n      return Array.prototype.concat.apply([], xss);\n    }\n    var result = [];\n    for (var i = 0, l = xss.length; i < l; i++) {\n      var xs = xss[i];\n      for (var j = 0, m = xs.length; j < m; j++) {\n        result.push(xs[j]);\n      }\n    }\n    return result;\n  };\n  var filterImpl = function(f2, xs) {\n    return xs.filter(f2);\n  };\n  var sortByImpl2 = /* @__PURE__ */ function() {\n    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {\n      var mid;\n      var i;\n      var j;\n      var k;\n      var x;\n      var y;\n      var c;\n      mid = from + (to - from >> 1);\n      if (mid - from > 1)\n        mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);\n      if (to - mid > 1)\n        mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);\n      i = from;\n      j = mid;\n      k = from;\n      while (i < mid && j < to) {\n        x = xs2[i];\n        y = xs2[j];\n        c = fromOrdering(compare(x)(y));\n        if (c > 0) {\n          xs1[k++] = y;\n          ++j;\n        } else {\n          xs1[k++] = x;\n          ++i;\n        }\n      }\n      while (i < mid) {\n        xs1[k++] = xs2[i++];\n      }\n      while (j < to) {\n        xs1[k++] = xs2[j++];\n      }\n    }\n    return function(compare, fromOrdering, xs) {\n      var out;\n      if (xs.length < 2)\n        return xs;\n      out = xs.slice(0);\n      mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);\n      return out;\n    };\n  }();\n  var sliceImpl = function(s, e, l) {\n    return l.slice(s, e);\n  };\n  var zipWithImpl = function(f2, xs, ys) {\n    var l = xs.length < ys.length ? xs.length : ys.length;\n    var result = new Array(l);\n    for (var i = 0; i < l; i++) {\n      result[i] = f2(xs[i])(ys[i]);\n    }\n    return result;\n  };\n  var anyImpl = function(p, xs) {\n    var len = xs.length;\n    for (var i = 0; i < len; i++) {\n      if (p(xs[i]))\n        return true;\n    }\n    return false;\n  };\n  var allImpl = function(p, xs) {\n    var len = xs.length;\n    for (var i = 0; i < len; i++) {\n      if (!p(xs[i]))\n        return false;\n    }\n    return true;\n  };\n\n  // output-es/Data.Array/index.js\n  var zipWith = ($0) => ($1) => ($2) => zipWithImpl($0, $1, $2);\n  var sortBy = (comp) => ($0) => sortByImpl2(\n    comp,\n    (v) => {\n      if (v === \"GT\") {\n        return 1;\n      }\n      if (v === \"EQ\") {\n        return 0;\n      }\n      if (v === \"LT\") {\n        return -1;\n      }\n      fail();\n    },\n    $0\n  );\n  var singleton = (a) => [a];\n  var groupBy = (op) => (xs) => {\n    const result = [];\n    const $0 = { value: 0 };\n    const iter = $Iterator(\n      (v) => {\n        if (v >= 0 && v < xs.length) {\n          return $Maybe(\"Just\", xs[v]);\n        }\n        return Nothing;\n      },\n      $0\n    );\n    iterate(iter)((x) => () => {\n      const sub1 = [];\n      sub1.push(x);\n      pushWhile(op(x))(iter)(sub1)();\n      result.push(sub1);\n    })();\n    return result;\n  };\n  var groupAllBy = (cmp) => {\n    const $0 = groupBy((x) => (y) => cmp(x)(y) === \"EQ\");\n    return (x) => $0(sortBy(cmp)(x));\n  };\n  var find = (f2) => (xs) => {\n    const $0 = findIndexImpl(Just, Nothing, f2, xs);\n    if ($0.tag === \"Just\") {\n      return $Maybe(\"Just\", xs[$0._1]);\n    }\n    return Nothing;\n  };\n  var all = ($0) => ($1) => allImpl($0, $1);\n\n  // output-es/Data.FoldableWithIndex/index.js\n  var foldableWithIndexArray = {\n    foldrWithIndex: (f2) => (z) => {\n      const $0 = foldrArray((v) => {\n        const $02 = v._1;\n        const $12 = v._2;\n        return (y) => f2($02)($12)(y);\n      })(z);\n      const $1 = mapWithIndexArray(Tuple);\n      return (x) => $0($1(x));\n    },\n    foldlWithIndex: (f2) => (z) => {\n      const $0 = foldlArray((y) => (v) => f2(v._1)(y)(v._2))(z);\n      const $1 = mapWithIndexArray(Tuple);\n      return (x) => $0($1(x));\n    },\n    foldMapWithIndex: (dictMonoid) => {\n      const mempty = dictMonoid.mempty;\n      return (f2) => foldableWithIndexArray.foldrWithIndex((i) => (x) => (acc) => dictMonoid.Semigroup0().append(f2(i)(x))(acc))(mempty);\n    },\n    Foldable0: () => foldableArray\n  };\n\n  // output-es/Data.Unfoldable1/foreign.js\n  var unfoldr1ArrayImpl = function(isNothing2) {\n    return function(fromJust2) {\n      return function(fst2) {\n        return function(snd2) {\n          return function(f2) {\n            return function(b) {\n              var result = [];\n              var value = b;\n              while (true) {\n                var tuple = f2(value);\n                result.push(fst2(tuple));\n                var maybe = snd2(tuple);\n                if (isNothing2(maybe))\n                  return result;\n                value = fromJust2(maybe);\n              }\n            };\n          };\n        };\n      };\n    };\n  };\n\n  // output-es/Data.Unfoldable1/index.js\n  var fromJust = (v) => {\n    if (v.tag === \"Just\") {\n      return v._1;\n    }\n    fail();\n  };\n  var unfoldable1Array = { unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust)(fst)(snd) };\n  var iterateN = (dictUnfoldable1) => (n) => (f2) => (s) => dictUnfoldable1.unfoldr1((v) => $Tuple(\n    v._1,\n    v._2 > 0 ? $Maybe(\"Just\", $Tuple(f2(v._1), v._2 - 1 | 0)) : Nothing\n  ))($Tuple(s, n - 1 | 0));\n\n  // output-es/Foreign.Object/foreign.js\n  function _lookup(no, yes, k, m) {\n    return k in m ? yes(m[k]) : no;\n  }\n  function toArrayWithKey(f2) {\n    return function(m) {\n      var r = [];\n      for (var k in m) {\n        if (hasOwnProperty.call(m, k)) {\n          r.push(f2(k)(m[k]));\n        }\n      }\n      return r;\n    };\n  }\n  var keys = Object.keys || toArrayWithKey(function(k) {\n    return function() {\n      return k;\n    };\n  });\n\n  // output-es/Data.Argonaut.Core/foreign.js\n  function stringify(j) {\n    return JSON.stringify(j);\n  }\n  function _caseJson(isNull, isBool, isNum, isStr, isArr, isObj, j) {\n    if (j == null)\n      return isNull();\n    else if (typeof j === \"boolean\")\n      return isBool(j);\n    else if (typeof j === \"number\")\n      return isNum(j);\n    else if (typeof j === \"string\")\n      return isStr(j);\n    else if (Object.prototype.toString.call(j) === \"[object Array]\")\n      return isArr(j);\n    else\n      return isObj(j);\n  }\n\n  // output-es/Data.Argonaut.Decode.Error/index.js\n  var $JsonDecodeError = (tag, _1, _2) => ({ tag, _1, _2 });\n  var AtIndex = (value0) => (value1) => $JsonDecodeError(\"AtIndex\", value0, value1);\n  var AtKey = (value0) => (value1) => $JsonDecodeError(\"AtKey\", value0, value1);\n  var Named = (value0) => (value1) => $JsonDecodeError(\"Named\", value0, value1);\n  var MissingValue = /* @__PURE__ */ $JsonDecodeError(\"MissingValue\");\n  var printJsonDecodeError = (err) => {\n    const go = (v) => {\n      if (v.tag === \"TypeMismatch\") {\n        return \"  Expected value of type '\" + v._1 + \"'.\";\n      }\n      if (v.tag === \"UnexpectedValue\") {\n        return \"  Unexpected value \" + stringify(v._1) + \".\";\n      }\n      if (v.tag === \"AtIndex\") {\n        return \"  At array index \" + showIntImpl(v._1) + \":\\n\" + go(v._2);\n      }\n      if (v.tag === \"AtKey\") {\n        return \"  At object key '\" + v._1 + \"':\\n\" + go(v._2);\n      }\n      if (v.tag === \"Named\") {\n        return \"  Under '\" + v._1 + \"':\\n\" + go(v._2);\n      }\n      if (v.tag === \"MissingValue\") {\n        return \"  No value was found.\";\n      }\n      fail();\n    };\n    return \"An error occurred while decoding a JSON value:\\n\" + go(err);\n  };\n\n  // output-es/Data.Number/foreign.js\n  var isFiniteImpl = isFinite;\n  var floor = Math.floor;\n\n  // output-es/Data.Int/foreign.js\n  var fromNumberImpl = function(just) {\n    return function(nothing) {\n      return function(n) {\n        return (n | 0) === n ? just(n) : nothing;\n      };\n    };\n  };\n  var toNumber = function(n) {\n    return n;\n  };\n\n  // output-es/Data.Int/index.js\n  var fromNumber = /* @__PURE__ */ fromNumberImpl(Just)(Nothing);\n  var unsafeClamp = (x) => {\n    if (!isFiniteImpl(x)) {\n      return 0;\n    }\n    if (x >= toNumber(2147483647)) {\n      return 2147483647;\n    }\n    if (x <= toNumber(-2147483648)) {\n      return -2147483648;\n    }\n    const $0 = fromNumber(x);\n    if ($0.tag === \"Nothing\") {\n      return 0;\n    }\n    if ($0.tag === \"Just\") {\n      return $0._1;\n    }\n    fail();\n  };\n\n  // output-es/Data.List.Types/index.js\n  var $List = (tag, _1, _2) => ({ tag, _1, _2 });\n  var Nil = /* @__PURE__ */ $List(\"Nil\");\n  var foldableList = {\n    foldr: (f2) => (b) => {\n      const $0 = foldableList.foldl((b$1) => (a) => f2(a)(b$1))(b);\n      const go = (go$a0$copy) => (go$a1$copy) => {\n        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;\n        while (go$c) {\n          const v = go$a0, v1 = go$a1;\n          if (v1.tag === \"Nil\") {\n            go$c = false;\n            go$r = v;\n            continue;\n          }\n          if (v1.tag === \"Cons\") {\n            go$a0 = $List(\"Cons\", v1._1, v);\n            go$a1 = v1._2;\n            continue;\n          }\n          fail();\n        }\n        return go$r;\n      };\n      const $1 = go(Nil);\n      return (x) => $0($1(x));\n    },\n    foldl: (f2) => {\n      const go = (go$a0$copy) => (go$a1$copy) => {\n        let go$a0 = go$a0$copy, go$a1 = go$a1$copy, go$c = true, go$r;\n        while (go$c) {\n          const b = go$a0, v = go$a1;\n          if (v.tag === \"Nil\") {\n            go$c = false;\n            go$r = b;\n            continue;\n          }\n          if (v.tag === \"Cons\") {\n            go$a0 = f2(b)(v._1);\n            go$a1 = v._2;\n            continue;\n          }\n          fail();\n        }\n        return go$r;\n      };\n      return go;\n    },\n    foldMap: (dictMonoid) => {\n      const mempty = dictMonoid.mempty;\n      return (f2) => foldableList.foldl((acc) => {\n        const $0 = dictMonoid.Semigroup0().append(acc);\n        return (x) => $0(f2(x));\n      })(mempty);\n    }\n  };\n\n  // output-es/Data.Bounded/foreign.js\n  var topChar = String.fromCharCode(65535);\n  var bottomChar = String.fromCharCode(0);\n  var topNumber = Number.POSITIVE_INFINITY;\n  var bottomNumber = Number.NEGATIVE_INFINITY;\n\n  // output-es/Data.Semiring/foreign.js\n  var intAdd = function(x) {\n    return function(y) {\n      return x + y | 0;\n    };\n  };\n  var intMul = function(x) {\n    return function(y) {\n      return x * y | 0;\n    };\n  };\n\n  // output-es/Data.Semiring/index.js\n  var semiringInt = { add: intAdd, zero: 0, mul: intMul, one: 1 };\n\n  // output-es/Data.String.CodePoints/foreign.js\n  var hasArrayFrom = typeof Array.from === \"function\";\n  var hasStringIterator = typeof Symbol !== \"undefined\" && Symbol != null && typeof Symbol.iterator !== \"undefined\" && typeof String.prototype[Symbol.iterator] === \"function\";\n  var hasFromCodePoint = typeof String.prototype.fromCodePoint === \"function\";\n  var hasCodePointAt = typeof String.prototype.codePointAt === \"function\";\n\n  // output-es/Data.TraversableWithIndex/index.js\n  var traversableWithIndexArray = {\n    traverseWithIndex: (dictApplicative) => {\n      const sequence1 = traversableWithIndexArray.Traversable2().sequence(dictApplicative);\n      return (f2) => {\n        const $0 = traversableWithIndexArray.FunctorWithIndex0().mapWithIndex(f2);\n        return (x) => sequence1($0(x));\n      };\n    },\n    FunctorWithIndex0: () => functorWithIndexArray,\n    FoldableWithIndex1: () => foldableWithIndexArray,\n    Traversable2: () => traversableArray\n  };\n\n  // output-es/Data.Argonaut.Decode.Decoders/index.js\n  var traverse1 = /* @__PURE__ */ (() => traversableArray.traverse(applicativeEither))();\n  var traverseWithIndex = /* @__PURE__ */ (() => traversableWithIndexArray.traverseWithIndex(applicativeEither))();\n  var decodeJArray = (x) => {\n    const $0 = _caseJson(\n      (v) => Nothing,\n      (v) => Nothing,\n      (v) => Nothing,\n      (v) => Nothing,\n      Just,\n      (v) => Nothing,\n      x\n    );\n    if ($0.tag === \"Nothing\") {\n      return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Array\"));\n    }\n    if ($0.tag === \"Just\") {\n      return $Either(\"Right\", $0._1);\n    }\n    fail();\n  };\n  var decodeNonEmptyArray = (decoder) => {\n    const $0 = Named(\"NonEmptyArray\");\n    const $1 = traverse1(decoder);\n    return (a) => {\n      const $2 = decodeJArray(a);\n      if ($2.tag === \"Left\") {\n        return $Either(\"Left\", $2._1);\n      }\n      if ($2.tag === \"Right\") {\n        const $3 = unconsImpl((v) => Nothing, (x) => (xs) => $Maybe(\"Just\", { head: x, tail: xs }), $2._1);\n        if ($3.tag === \"Nothing\") {\n          return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"NonEmptyArray\"));\n        }\n        if ($3.tag === \"Just\") {\n          const $4 = $1([$3._1.head, ...$3._1.tail]);\n          if ($4.tag === \"Left\") {\n            return $Either(\"Left\", $0($4._1));\n          }\n          if ($4.tag === \"Right\") {\n            return $Either(\"Right\", $4._1);\n          }\n        }\n      }\n      fail();\n    };\n  };\n  var decodeInt = (a) => {\n    const $0 = _caseJson(\n      (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")),\n      (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")),\n      Right,\n      (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")),\n      (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")),\n      (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Number\")),\n      a\n    );\n    if ($0.tag === \"Left\") {\n      return $Either(\"Left\", $0._1);\n    }\n    if ($0.tag === \"Right\") {\n      const $1 = fromNumber($0._1);\n      if ($1.tag === \"Nothing\") {\n        return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Integer\"));\n      }\n      if ($1.tag === \"Just\") {\n        return $Either(\"Right\", $1._1);\n      }\n    }\n    fail();\n  };\n  var decodeArray = (decoder) => {\n    const $0 = Named(\"Array\");\n    const $1 = traverseWithIndex((i) => {\n      const $12 = AtIndex(i);\n      return (x) => {\n        const $2 = decoder(x);\n        if ($2.tag === \"Left\") {\n          return $Either(\"Left\", $12($2._1));\n        }\n        if ($2.tag === \"Right\") {\n          return $Either(\"Right\", $2._1);\n        }\n        fail();\n      };\n    });\n    return (a) => {\n      const $2 = decodeJArray(a);\n      if ($2.tag === \"Left\") {\n        return $Either(\"Left\", $2._1);\n      }\n      if ($2.tag === \"Right\") {\n        const $3 = $1($2._1);\n        if ($3.tag === \"Left\") {\n          return $Either(\"Left\", $0($3._1));\n        }\n        if ($3.tag === \"Right\") {\n          return $Either(\"Right\", $3._1);\n        }\n      }\n      fail();\n    };\n  };\n\n  // output-es/Data.Argonaut.Decode.Class/index.js\n  var gDecodeJsonNil = { gDecodeJson: (v) => (v1) => $Either(\"Right\", {}) };\n  var decodeRecord = (dictGDecodeJson) => () => ({\n    decodeJson: (json) => {\n      const v = _caseJson(\n        (v2) => Nothing,\n        (v2) => Nothing,\n        (v2) => Nothing,\n        (v2) => Nothing,\n        (v2) => Nothing,\n        Just,\n        json\n      );\n      if (v.tag === \"Just\") {\n        return dictGDecodeJson.gDecodeJson(v._1)($$Proxy);\n      }\n      if (v.tag === \"Nothing\") {\n        return $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"Object\"));\n      }\n      fail();\n    }\n  });\n  var gDecodeJsonCons = (dictDecodeJsonField) => (dictGDecodeJson) => (dictIsSymbol) => () => () => ({\n    gDecodeJson: (object) => (v) => {\n      const fieldName = dictIsSymbol.reflectSymbol($$Proxy);\n      const v1 = dictDecodeJsonField.decodeJsonField(_lookup(Nothing, Just, fieldName, object));\n      if (v1.tag === \"Just\") {\n        const $0 = AtKey(fieldName);\n        if (v1._1.tag === \"Left\") {\n          return $Either(\"Left\", $0(v1._1._1));\n        }\n        if (v1._1.tag === \"Right\") {\n          const $1 = v1._1._1;\n          const $2 = dictGDecodeJson.gDecodeJson(object)($$Proxy);\n          return (() => {\n            if ($2.tag === \"Left\") {\n              const $3 = $2._1;\n              return (v$1) => $Either(\"Left\", $3);\n            }\n            if ($2.tag === \"Right\") {\n              const $3 = $2._1;\n              return (f2) => f2($3);\n            }\n            fail();\n          })()((rest) => $Either(\"Right\", unsafeSet(dictIsSymbol.reflectSymbol($$Proxy))($1)(rest)));\n        }\n        fail();\n      }\n      if (v1.tag === \"Nothing\") {\n        return $Either(\"Left\", $JsonDecodeError(\"AtKey\", fieldName, MissingValue));\n      }\n      fail();\n    }\n  });\n\n  // output-es/Data.BigInt/foreign.js\n  var import_big_integer = __toESM(require_BigInteger(), 1);\n  function fromInt(n) {\n    return (0, import_big_integer.default)(n);\n  }\n  function toBase(base) {\n    return function(x) {\n      return x.toString(base);\n    };\n  }\n  function toNumber2(x) {\n    return x.toJSNumber();\n  }\n  function biAdd(x) {\n    return function(y) {\n      return x.add(y);\n    };\n  }\n  function biMul(x) {\n    return function(y) {\n      return x.multiply(y);\n    };\n  }\n  function biSub(x) {\n    return function(y) {\n      return x.minus(y);\n    };\n  }\n  function biMod(x) {\n    return function(y) {\n      return x.mod(y);\n    };\n  }\n  function biDiv(x) {\n    return function(y) {\n      return x.divide(y);\n    };\n  }\n  function abs2(x) {\n    return x.abs();\n  }\n\n  // output-es/Data.BigInt/index.js\n  var toString = /* @__PURE__ */ toBase(10);\n  var semiringBigInt = { add: biAdd, zero: /* @__PURE__ */ fromInt(0), mul: biMul, one: /* @__PURE__ */ fromInt(1) };\n  var ringBigInt = { sub: biSub, Semiring0: () => semiringBigInt };\n  var commutativeRingBigInt = { Ring0: () => ringBigInt };\n  var euclideanRingBigInt = {\n    div: (x) => (y) => biDiv(biSub(x)(euclideanRingBigInt.mod(x)(y)))(y),\n    mod: (x) => (y) => {\n      const yy = abs2(y);\n      return biMod(biAdd(biMod(x)(yy))(yy))(yy);\n    },\n    degree: (x) => unsafeClamp(floor(toNumber2(abs2(x)))),\n    CommutativeRing0: () => commutativeRingBigInt\n  };\n\n  // output-es/Effect.Console/foreign.js\n  var error = function(s) {\n    return function() {\n      console.error(s);\n    };\n  };\n\n  // output-es/Data.Array.NonEmpty.Internal/foreign.js\n  var foldr1Impl = function(f2, xs) {\n    var acc = xs[xs.length - 1];\n    for (var i = xs.length - 2; i >= 0; i--) {\n      acc = f2(xs[i])(acc);\n    }\n    return acc;\n  };\n  var foldl1Impl = function(f2, xs) {\n    var acc = xs[0];\n    var len = xs.length;\n    for (var i = 1; i < len; i++) {\n      acc = f2(acc)(xs[i]);\n    }\n    return acc;\n  };\n\n  // output-es/Data.Array.NonEmpty.Internal/index.js\n  var foldable1NonEmptyArray = {\n    foldMap1: (dictSemigroup) => {\n      const append = dictSemigroup.append;\n      return (f2) => {\n        const $0 = arrayMap(f2);\n        const $1 = foldable1NonEmptyArray.foldl1(append);\n        return (x) => $1($0(x));\n      };\n    },\n    foldr1: ($0) => ($1) => foldr1Impl($0, $1),\n    foldl1: ($0) => ($1) => foldl1Impl($0, $1),\n    Foldable0: () => foldableArray\n  };\n\n  // output-es/Data.HeytingAlgebra/foreign.js\n  var boolConj = function(b1) {\n    return function(b2) {\n      return b1 && b2;\n    };\n  };\n  var boolDisj = function(b1) {\n    return function(b2) {\n      return b1 || b2;\n    };\n  };\n  var boolNot = function(b) {\n    return !b;\n  };\n\n  // output-es/Data.HeytingAlgebra/index.js\n  var heytingAlgebraBoolean = { ff: false, tt: true, implies: (a) => (b) => heytingAlgebraBoolean.disj(heytingAlgebraBoolean.not(a))(b), conj: boolConj, disj: boolDisj, not: boolNot };\n\n  // output-es/Util.Array/index.js\n  var swapST = (x) => (y) => (st) => () => {\n    const a = peekImpl(Just, Nothing, x, st);\n    const b = peekImpl(Just, Nothing, y, st);\n    if (a.tag === \"Just\" && b.tag === \"Just\") {\n      pokeImpl(x, b._1, st);\n      pokeImpl(y, a._1, st);\n    }\n  };\n\n  // output-es/TcgCalculator.Math/index.js\n  var identity6 = (x) => x;\n  var product2 = /* @__PURE__ */ (() => foldlArray(biMul)(semiringBigInt.one))();\n  var distinctPermutations = (dictOrd) => {\n    const reverseST = (x) => (y) => (st) => {\n      const $0 = swapST(x)(y)(st);\n      if (x < y) {\n        return () => {\n          $0();\n          return reverseST(x + 1 | 0)(y - 1 | 0)(st)();\n        };\n      }\n      return () => {\n      };\n    };\n    return unfoldable1Array.unfoldr1((a) => $Tuple(\n      a,\n      (() => {\n        const $0 = findLastIndexImpl(\n          Just,\n          Nothing,\n          identity6,\n          zipWithImpl((a1) => (a2) => dictOrd.compare(a1)(a2) === \"GT\", a, sliceImpl(1, a.length, a))\n        );\n        if ($0.tag === \"Just\") {\n          if ($0._1 >= 0 && $0._1 < a.length) {\n            const $1 = a[$0._1];\n            const $2 = findLastIndexImpl(Just, Nothing, (v1) => dictOrd.compare($1)(v1) === \"GT\", a);\n            if ($2.tag === \"Just\") {\n              const $3 = $2._1;\n              return $Maybe(\n                \"Just\",\n                (() => {\n                  const st = [...a];\n                  swapST($0._1)($3)(st)();\n                  reverseST($0._1 + 1 | 0)(a.length - 1 | 0)(st)();\n                  return st;\n                })()\n              );\n            }\n            if ($2.tag === \"Nothing\") {\n              return Nothing;\n            }\n            fail();\n          }\n          return Nothing;\n        }\n        if ($0.tag === \"Nothing\") {\n          return Nothing;\n        }\n        fail();\n      })()\n    ));\n  };\n  var createPascalTriangle = (v) => {\n    if (v <= 0) {\n      return [];\n    }\n    return iterateN(unfoldable1Array)(v)((r) => zipWithImpl(\n      biAdd,\n      [semiringBigInt.zero, ...r],\n      [...r, semiringBigInt.zero]\n    ))([semiringBigInt.one]);\n  };\n  var pascalTriangle = /* @__PURE__ */ createPascalTriangle(64);\n  var combinations = (n) => (a) => {\n    if (n === 0) {\n      return [[]];\n    }\n    if (a.length === n) {\n      return [a];\n    }\n    if (a.length < n) {\n      return [];\n    }\n    if (n === 1) {\n      return arrayMap(singleton)(a);\n    }\n    const v = unconsImpl((v2) => Nothing, (x) => (xs) => $Maybe(\"Just\", { head: x, tail: xs }), a);\n    if (v.tag === \"Just\") {\n      const $0 = v._1.head;\n      return [...arrayMap((v1) => [$0, ...v1])(combinations(n - 1 | 0)(v._1.tail)), ...combinations(n)(v._1.tail)];\n    }\n    return [];\n  };\n  var combinationNumber = (combinationNumber$a0$copy) => (combinationNumber$a1$copy) => {\n    let combinationNumber$a0 = combinationNumber$a0$copy, combinationNumber$a1 = combinationNumber$a1$copy, combinationNumber$c = true, combinationNumber$r;\n    while (combinationNumber$c) {\n      const n = combinationNumber$a0, r = combinationNumber$a1;\n      if (n < 0 || r < 0) {\n        combinationNumber$c = false;\n        combinationNumber$r = semiringBigInt.zero;\n        continue;\n      }\n      if (r === 0) {\n        combinationNumber$c = false;\n        combinationNumber$r = semiringBigInt.one;\n        continue;\n      }\n      if (r === 1) {\n        combinationNumber$c = false;\n        combinationNumber$r = fromInt(n);\n        continue;\n      }\n      if ((n - r | 0) < r) {\n        combinationNumber$a0 = n;\n        combinationNumber$a1 = n - r | 0;\n        continue;\n      }\n      if (n < 64) {\n        combinationNumber$c = false;\n        combinationNumber$r = pascalTriangle[n][r];\n        continue;\n      }\n      const $0 = arrayMap(fromInt);\n      const $1 = product2($0(rangeImpl((n - r | 0) + 1 | 0, n)));\n      const $2 = product2($0(rangeImpl(1, r)));\n      combinationNumber$c = false;\n      combinationNumber$r = biDiv(biSub($1)(euclideanRingBigInt.mod($1)($2)))($2);\n    }\n    return combinationNumber$r;\n  };\n  var buildPartitionNumbers = (v) => {\n    if (v === 0) {\n      return $List(\"Cons\", [[]], Nil);\n    }\n    const $$new = (v1) => (v2) => {\n      if (v1.tag === \"Cons\") {\n        return [\n          ...$$new(v1._2)(v2 + 1 | 0),\n          ...arrayMap((v3) => [v2, ...v3])(filterImpl(\n            (x) => {\n              if (0 < x.length) {\n                return x[0] <= v2;\n              }\n              return 0 <= v2;\n            },\n            v1._1\n          ))\n        ];\n      }\n      return [];\n    };\n    const prev = buildPartitionNumbers(v - 1 | 0);\n    return $List(\"Cons\", $$new(prev)(1), prev);\n  };\n  var partitionNumber = (v) => {\n    if (v < 0) {\n      return [];\n    }\n    if (v === 0) {\n      return [[]];\n    }\n    const $0 = buildPartitionNumbers(v);\n    if ($0.tag === \"Nil\") {\n      return [];\n    }\n    if ($0.tag === \"Cons\") {\n      return $0._1;\n    }\n    fail();\n  };\n  var partitionNumbers = (v) => {\n    if (v < 0) {\n      return [];\n    }\n    if (v === 0) {\n      return [[[]]];\n    }\n    return fromFoldableImpl(foldableList.foldr, buildPartitionNumbers(v));\n  };\n\n  // node_modules/uuid/dist/esm-browser/regex.js\n  var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\n  // node_modules/uuid/dist/esm-browser/validate.js\n  function validate(uuid) {\n    return typeof uuid === \"string\" && regex_default.test(uuid);\n  }\n  var validate_default = validate;\n\n  // node_modules/uuid/dist/esm-browser/stringify.js\n  var byteToHex = [];\n  for (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 256).toString(16).slice(1));\n  }\n  function unsafeStringify(arr, offset = 0) {\n    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n  }\n\n  // node_modules/uuid/dist/esm-browser/parse.js\n  function parse(uuid) {\n    if (!validate_default(uuid)) {\n      throw TypeError(\"Invalid UUID\");\n    }\n    let v;\n    const arr = new Uint8Array(16);\n    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n    arr[1] = v >>> 16 & 255;\n    arr[2] = v >>> 8 & 255;\n    arr[3] = v & 255;\n    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n    arr[5] = v & 255;\n    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n    arr[7] = v & 255;\n    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n    arr[9] = v & 255;\n    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;\n    arr[11] = v / 4294967296 & 255;\n    arr[12] = v >>> 24 & 255;\n    arr[13] = v >>> 16 & 255;\n    arr[14] = v >>> 8 & 255;\n    arr[15] = v & 255;\n    return arr;\n  }\n  var parse_default = parse;\n\n  // node_modules/uuid/dist/esm-browser/v35.js\n  function stringToBytes(str) {\n    str = unescape(encodeURIComponent(str));\n    const bytes = [];\n    for (let i = 0; i < str.length; ++i) {\n      bytes.push(str.charCodeAt(i));\n    }\n    return bytes;\n  }\n  var DNS = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\";\n  var URL = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\n  function v35(name, version, hashfunc) {\n    function generateUUID(value, namespace, buf, offset) {\n      var _namespace;\n      if (typeof value === \"string\") {\n        value = stringToBytes(value);\n      }\n      if (typeof namespace === \"string\") {\n        namespace = parse_default(namespace);\n      }\n      if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n        throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n      }\n      let bytes = new Uint8Array(16 + value.length);\n      bytes.set(namespace);\n      bytes.set(value, namespace.length);\n      bytes = hashfunc(bytes);\n      bytes[6] = bytes[6] & 15 | version;\n      bytes[8] = bytes[8] & 63 | 128;\n      if (buf) {\n        offset = offset || 0;\n        for (let i = 0; i < 16; ++i) {\n          buf[offset + i] = bytes[i];\n        }\n        return buf;\n      }\n      return unsafeStringify(bytes);\n    }\n    try {\n      generateUUID.name = name;\n    } catch (err) {\n    }\n    generateUUID.DNS = DNS;\n    generateUUID.URL = URL;\n    return generateUUID;\n  }\n\n  // node_modules/uuid/dist/esm-browser/sha1.js\n  function f(s, x, y, z) {\n    switch (s) {\n      case 0:\n        return x & y ^ ~x & z;\n      case 1:\n        return x ^ y ^ z;\n      case 2:\n        return x & y ^ x & z ^ y & z;\n      case 3:\n        return x ^ y ^ z;\n    }\n  }\n  function ROTL(x, n) {\n    return x << n | x >>> 32 - n;\n  }\n  function sha1(bytes) {\n    const K = [1518500249, 1859775393, 2400959708, 3395469782];\n    const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n    if (typeof bytes === \"string\") {\n      const msg = unescape(encodeURIComponent(bytes));\n      bytes = [];\n      for (let i = 0; i < msg.length; ++i) {\n        bytes.push(msg.charCodeAt(i));\n      }\n    } else if (!Array.isArray(bytes)) {\n      bytes = Array.prototype.slice.call(bytes);\n    }\n    bytes.push(128);\n    const l = bytes.length / 4 + 2;\n    const N = Math.ceil(l / 16);\n    const M = new Array(N);\n    for (let i = 0; i < N; ++i) {\n      const arr = new Uint32Array(16);\n      for (let j = 0; j < 16; ++j) {\n        arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n      }\n      M[i] = arr;\n    }\n    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n    M[N - 1][14] = Math.floor(M[N - 1][14]);\n    M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;\n    for (let i = 0; i < N; ++i) {\n      const W = new Uint32Array(80);\n      for (let t = 0; t < 16; ++t) {\n        W[t] = M[i][t];\n      }\n      for (let t = 16; t < 80; ++t) {\n        W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n      }\n      let a = H[0];\n      let b = H[1];\n      let c = H[2];\n      let d = H[3];\n      let e = H[4];\n      for (let t = 0; t < 80; ++t) {\n        const s = Math.floor(t / 20);\n        const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n        e = d;\n        d = c;\n        c = ROTL(b, 30) >>> 0;\n        b = a;\n        a = T;\n      }\n      H[0] = H[0] + a >>> 0;\n      H[1] = H[1] + b >>> 0;\n      H[2] = H[2] + c >>> 0;\n      H[3] = H[3] + d >>> 0;\n      H[4] = H[4] + e >>> 0;\n    }\n    return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];\n  }\n  var sha1_default = sha1;\n\n  // node_modules/uuid/dist/esm-browser/v5.js\n  var v5 = v35(\"v5\", 80, sha1_default);\n  var v5_default = v5;\n\n  // output-es/Data.UUID/foreign.js\n  var getUUID5Impl = function(str) {\n    return function(namespace) {\n      return v5_default(str, namespace);\n    };\n  };\n  var validateV4UUID = validate_default;\n\n  // output-es/TcgCalculator.Types.Id/index.js\n  var namespaceTcgCalculator = /* @__PURE__ */ getUUID5Impl(\"tcg-calculator\")(\"00000000-0000-0000-0000-000000000000\");\n  var decodeJsonId = {\n    decodeJson: (json) => {\n      const $0 = _caseJson(\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        Right,\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        json\n      );\n      if ($0.tag === \"Left\") {\n        return $Either(\"Left\", $0._1);\n      }\n      if ($0.tag === \"Right\") {\n        return $Either(\"Right\", validateV4UUID($0._1) ? $0._1 : getUUID5Impl($0._1)(namespaceTcgCalculator));\n      }\n      fail();\n    }\n  };\n\n  // output-es/TcgCalculator.Types/index.js\n  var $ConditionMode = (tag) => tag;\n  var cardsIsSymbol = { reflectSymbol: () => \"cards\" };\n  var countIsSymbol = { reflectSymbol: () => \"count\" };\n  var modeIsSymbol = { reflectSymbol: () => \"mode\" };\n  var idIsSymbol = { reflectSymbol: () => \"id\" };\n  var nameIsSymbol = { reflectSymbol: () => \"name\" };\n  var AtLeast = /* @__PURE__ */ $ConditionMode(\"AtLeast\");\n  var JustDraw = /* @__PURE__ */ $ConditionMode(\"JustDraw\");\n  var Remains = /* @__PURE__ */ $ConditionMode(\"Remains\");\n  var JustRemains = /* @__PURE__ */ $ConditionMode(\"JustRemains\");\n  var Choice = /* @__PURE__ */ $ConditionMode(\"Choice\");\n  var LeftOne = /* @__PURE__ */ $ConditionMode(\"LeftOne\");\n  var LeftAll = /* @__PURE__ */ $ConditionMode(\"LeftAll\");\n  var readConditionMode = (v) => {\n    if (v === \"AtLeast\") {\n      return $Maybe(\"Just\", AtLeast);\n    }\n    if (v === \"JustDraw\") {\n      return $Maybe(\"Just\", JustDraw);\n    }\n    if (v === \"Remains\") {\n      return $Maybe(\"Just\", Remains);\n    }\n    if (v === \"JustRemains\") {\n      return $Maybe(\"Just\", JustRemains);\n    }\n    if (v === \"Choice\") {\n      return $Maybe(\"Just\", Choice);\n    }\n    if (v === \"LeftOne\") {\n      return $Maybe(\"Just\", LeftOne);\n    }\n    if (v === \"LeftAll\") {\n      return $Maybe(\"Just\", LeftAll);\n    }\n    return Nothing;\n  };\n  var decodeJsonConditionMode = {\n    decodeJson: (json) => {\n      const $0 = _caseJson(\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        Right,\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n        json\n      );\n      if ($0.tag === \"Left\") {\n        return $Either(\"Left\", $0._1);\n      }\n      if ($0.tag === \"Right\") {\n        const $1 = readConditionMode($0._1);\n        if ($1.tag === \"Nothing\") {\n          return $Either(\"Left\", $JsonDecodeError(\"UnexpectedValue\", json));\n        }\n        if ($1.tag === \"Just\") {\n          return $Either(\"Right\", $1._1);\n        }\n      }\n      fail();\n    }\n  };\n  var decodeJsonCondition = /* @__PURE__ */ decodeRecord(/* @__PURE__ */ gDecodeJsonCons(/* @__PURE__ */ (() => {\n    const $0 = decodeArray(decodeRecord(gDecodeJsonCons({\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", decodeInt(j._1));\n        }\n        return Nothing;\n      }\n    })(gDecodeJsonCons({\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", decodeJsonId.decodeJson(j._1));\n        }\n        return Nothing;\n      }\n    })(gDecodeJsonCons({\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\n            \"Just\",\n            _caseJson(\n              (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n              (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n              (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n              Right,\n              (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n              (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n              j._1\n            )\n          );\n        }\n        return Nothing;\n      }\n    })(gDecodeJsonNil)(nameIsSymbol)()())(idIsSymbol)()())(countIsSymbol)()())().decodeJson);\n    return {\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", $0(j._1));\n        }\n        return Nothing;\n      }\n    };\n  })())(/* @__PURE__ */ gDecodeJsonCons({\n    decodeJsonField: (j) => {\n      if (j.tag === \"Just\") {\n        return $Maybe(\"Just\", decodeInt(j._1));\n      }\n      return Nothing;\n    }\n  })(/* @__PURE__ */ gDecodeJsonCons({\n    decodeJsonField: (j) => {\n      if (j.tag === \"Just\") {\n        return $Maybe(\"Just\", decodeJsonConditionMode.decodeJson(j._1));\n      }\n      return Nothing;\n    }\n  })(gDecodeJsonNil)(modeIsSymbol)()())(countIsSymbol)()())(cardsIsSymbol)()())();\n\n  // output-es/TcgCalculator/index.js\n  var and3 = /* @__PURE__ */ and(foldableArray)(heytingAlgebraBoolean);\n  var greaterThanOrEq = (a1) => (a2) => a1 >= a2;\n  var maximum = /* @__PURE__ */ (() => maximumBy(foldableArray)(ordInt.compare))();\n  var distinctPermutations2 = /* @__PURE__ */ distinctPermutations(ordInt);\n  var min2 = (x) => (y) => {\n    const v = ordInt.compare(x)(y);\n    if (v === \"LT\") {\n      return x;\n    }\n    if (v === \"EQ\") {\n      return x;\n    }\n    if (v === \"GT\") {\n      return y;\n    }\n    fail();\n  };\n  var product3 = /* @__PURE__ */ (() => foldlArray(biMul)(semiringBigInt.one))();\n  var sumBy = (dictSemiring) => {\n    const semigroupAdditive1 = { append: (v) => (v1) => dictSemiring.add(v)(v1) };\n    return foldableArray.foldMap({ mempty: dictSemiring.zero, Semigroup0: () => semigroupAdditive1 });\n  };\n  var sumBy1 = /* @__PURE__ */ sumBy(semiringInt);\n  var sumBy2 = /* @__PURE__ */ sumBy(semiringBigInt);\n  var satisfyCondition = (dp) => all((v) => {\n    const $0 = v.card.id;\n    const $1 = find((x) => x.card.id === $0)(dp);\n    const draw = (() => {\n      if ($1.tag === \"Nothing\") {\n        return 0;\n      }\n      if ($1.tag === \"Just\") {\n        return $1._1.draw;\n      }\n      fail();\n    })();\n    return v.min <= draw && draw <= v.max;\n  });\n  var mkDrawPattern$p = (v) => (v1) => {\n    if (v1.length === 0) {\n      return [];\n    }\n    if (v1.length === 1 && v1[0].length === 0) {\n      return [[]];\n    }\n    const cardsLength = v.length;\n    const pattern$p = filterImpl(\n      (() => {\n        const $0 = zipWith(greaterThanOrEq)(sortBy((b) => (a) => ordInt.compare(a)(b))(arrayMap((v2) => v2.count)(v)));\n        return (a) => a.length <= cardsLength && and3($0(a));\n      })(),\n      v1\n    );\n    const cardCombinations = arrayMap((x) => combinations(x)(v))(rangeImpl(\n      0,\n      (() => {\n        const $0 = maximum(arrayMap(length)(pattern$p));\n        if ($0.tag === \"Nothing\") {\n          return 0;\n        }\n        if ($0.tag === \"Just\") {\n          return $0._1;\n        }\n        fail();\n      })()\n    ));\n    return arrayBind(pattern$p)((p) => {\n      const $0 = p.length;\n      const con = $0 >= 0 && $0 < cardCombinations.length ? cardCombinations[$0] : [];\n      return arrayBind(distinctPermutations2(p))((p$p) => filterImpl(\n        all((d) => d.draw <= d.card.count),\n        arrayMap(zipWith((v2) => (v3) => ({ draw: v2, card: v3 }))(p$p))(con)\n      ));\n    });\n  };\n  var mkConditionPattern = (mkConditionPattern$a0$copy) => {\n    let mkConditionPattern$a0 = mkConditionPattern$a0$copy, mkConditionPattern$c = true, mkConditionPattern$r;\n    while (mkConditionPattern$c) {\n      const v = mkConditionPattern$a0;\n      if (v.mode === \"AtLeast\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((p) => ({ card: p.card, min: p.draw, max: p.card.count }))(v1))(mkDrawPattern$p(v.cards)(partitionNumber(v.count)));\n        continue;\n      }\n      if (v.mode === \"JustDraw\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((card) => {\n          const $0 = find((x) => x.card.id === card.id)(v1);\n          const draw = (() => {\n            if ($0.tag === \"Nothing\") {\n              return 0;\n            }\n            if ($0.tag === \"Just\") {\n              return $0._1.draw;\n            }\n            fail();\n          })();\n          return { card, min: draw, max: draw };\n        })(v.cards))(mkDrawPattern$p(v.cards)(partitionNumber(v.count)));\n        continue;\n      }\n      if (v.mode === \"Remains\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((card) => ({\n          card,\n          min: 0,\n          max: (() => {\n            const $0 = find((x) => x.card.id === card.id)(v1);\n            if ($0.tag === \"Nothing\") {\n              return 0;\n            }\n            if ($0.tag === \"Just\") {\n              return $0._1.draw;\n            }\n            fail();\n          })()\n        }))(v.cards))(mkDrawPattern$p(v.cards)(partitionNumber(sumBy1((v1) => v1.count)(v.cards) - v.count | 0)));\n        continue;\n      }\n      if (v.mode === \"JustRemains\") {\n        mkConditionPattern$a0 = { mode: JustDraw, count: sumBy1((v1) => v1.count)(v.cards) - v.count | 0, cards: v.cards };\n        continue;\n      }\n      if (v.mode === \"Choice\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((p) => ({ card: p.card, min: 1, max: p.card.count }))(v1))(mkDrawPattern$p(v.cards)([\n          replicateImpl(v.count, 1)\n        ]));\n        continue;\n      }\n      if (v.mode === \"LeftOne\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((p) => ({ card: p.card, min: 0, max: p.card.count - 1 | 0 }))(v1))(mkDrawPattern$p(v.cards)([\n          replicateImpl(v.count, 1)\n        ]));\n        continue;\n      }\n      if (v.mode === \"LeftAll\") {\n        mkConditionPattern$c = false;\n        mkConditionPattern$r = arrayMap((v1) => arrayMap((p) => ({ card: p.card, min: 0, max: 0 }))(v1))(mkDrawPattern$p(v.cards)([\n          replicateImpl(v.count, 0)\n        ]));\n        continue;\n      }\n      fail();\n    }\n    return mkConditionPattern$r;\n  };\n  var mergeConditionPattern = (left) => (right) => arrayMap(foldable1NonEmptyArray.foldl1((v) => (v1) => ({ card: v.card, min: v.min + v1.min | 0, max: min2(v.max)(v1.max) })))(groupAllBy((x) => (y) => ordString.compare(x.card.id)(y.card.id))([...left, ...right]));\n  var isValidConditionPattern = /* @__PURE__ */ all((v) => v.min <= v.max && v.min <= v.card.count);\n  var generateDrawPatterns = (v) => {\n    const maxDrawCount = min2(v.hand)(sumBy1((v1) => v1.count)(v.cards));\n    return mkDrawPattern$p(v.cards)(concat((() => {\n      const $0 = ((maxDrawCount + v.others | 0) - v.hand | 0) + 1 | 0;\n      const $1 = partitionNumbers(maxDrawCount);\n      if ($0 < 1) {\n        return [];\n      }\n      return sliceImpl(0, $0, $1);\n    })()));\n  };\n  var calculatePatternCount = (v) => (pattern) => biMul(product3(arrayMap((v1) => combinationNumber(v1.card.count)(v1.draw))(pattern)))(combinationNumber(v.others)(v.hand - sumBy1((v1) => v1.draw)(pattern) | 0));\n  var buildConditionPattern = (conditions) => foldl1Impl(\n    (left) => (right) => arrayBind(left)((l) => arrayBind(right)((r) => {\n      const merged = mergeConditionPattern(l)(r);\n      if (isValidConditionPattern(merged)) {\n        return [merged];\n      }\n      return [];\n    })),\n    arrayMap(mkConditionPattern)(conditions)\n  );\n  var calculate = (deck) => (conditions) => {\n    const conditionPattern = arrayBind(conditions)(buildConditionPattern);\n    return sumBy2(calculatePatternCount(deck))(filterImpl((dp) => anyImpl(satisfyCondition(dp), conditionPattern), generateDrawPatterns(deck)));\n  };\n\n  // output-es/Web.Worker.GlobalScope/foreign.js\n  function postMessageImpl(data) {\n    return function(tr) {\n      return function() {\n        self.postMessage(data, tr.length > 0 ? tr : void 0);\n      };\n    };\n  }\n  function close() {\n    self.close();\n  }\n  function onMessage(f2) {\n    return function() {\n      self.onmessage = function(ev) {\n        f2(ev)();\n      };\n    };\n  }\n\n  // output-es/Web.Worker.MessageEvent/foreign.js\n  function data_(ev) {\n    return ev.data;\n  }\n\n  // output-es/Worker.Main/index.js\n  var decodeJson = /* @__PURE__ */ (() => decodeRecord(gDecodeJsonCons((() => {\n    const $0 = decodeArray(decodeNonEmptyArray(decodeJsonCondition.decodeJson));\n    return {\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", $0(j._1));\n        }\n        return Nothing;\n      }\n    };\n  })())(gDecodeJsonCons((() => {\n    const $0 = decodeRecord(gDecodeJsonCons((() => {\n      const $02 = decodeArray(decodeRecord(gDecodeJsonCons({\n        decodeJsonField: (j) => {\n          if (j.tag === \"Just\") {\n            return $Maybe(\"Just\", decodeInt(j._1));\n          }\n          return Nothing;\n        }\n      })(gDecodeJsonCons({\n        decodeJsonField: (j) => {\n          if (j.tag === \"Just\") {\n            return $Maybe(\"Just\", decodeJsonId.decodeJson(j._1));\n          }\n          return Nothing;\n        }\n      })(gDecodeJsonCons({\n        decodeJsonField: (j) => {\n          if (j.tag === \"Just\") {\n            return $Maybe(\n              \"Just\",\n              _caseJson(\n                (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n                (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n                (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n                Right,\n                (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n                (v) => $Either(\"Left\", $JsonDecodeError(\"TypeMismatch\", \"String\")),\n                j._1\n              )\n            );\n          }\n          return Nothing;\n        }\n      })(gDecodeJsonNil)({ reflectSymbol: () => \"name\" })()())({ reflectSymbol: () => \"id\" })()())({ reflectSymbol: () => \"count\" })()())().decodeJson);\n      return {\n        decodeJsonField: (j) => {\n          if (j.tag === \"Just\") {\n            return $Maybe(\"Just\", $02(j._1));\n          }\n          return Nothing;\n        }\n      };\n    })())(gDecodeJsonCons({\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", decodeInt(j._1));\n        }\n        return Nothing;\n      }\n    })(gDecodeJsonCons({\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", decodeInt(j._1));\n        }\n        return Nothing;\n      }\n    })(gDecodeJsonNil)({ reflectSymbol: () => \"others\" })()())({ reflectSymbol: () => \"hand\" })()())({ reflectSymbol: () => \"cards\" })()())();\n    return {\n      decodeJsonField: (j) => {\n        if (j.tag === \"Just\") {\n          return $Maybe(\"Just\", $0.decodeJson(j._1));\n        }\n        return Nothing;\n      }\n    };\n  })())(gDecodeJsonNil)({ reflectSymbol: () => \"deck\" })()())({ reflectSymbol: () => \"conditions\" })()())().decodeJson)();\n  var main = /* @__PURE__ */ onMessage((event) => {\n    const v = decodeJson(data_(event));\n    const $0 = (() => {\n      if (v.tag === \"Left\") {\n        return error(printJsonDecodeError(v._1));\n      }\n      if (v.tag === \"Right\") {\n        return postMessageImpl(toString(calculate(v._1.deck)(v._1.conditions)))([]);\n      }\n      fail();\n    })();\n    return () => {\n      $0();\n      return close();\n    };\n  });\n\n  // <stdin>\n  main();\n})();\n"],"names":["cb","mod","n","cmp","isNothing2","f2","__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","require_BigInteger","exports","module","bigInt2","undefined2","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","value","sign2","sign","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","trim2","length3","length","compareAbs","i2","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product4","a_i","j","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder2","divisor","quotient","divModAny","self2","Error","negate","abs3","abs","comparison","divMod1","quotientDigit","shift","result","divisorMostSignificantDigit","base","divMod2","guess","xlen","highx","highy","check","part","unshift","reverse","qSign","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","d","nPrev","prev","divide","next","modPow","plus","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","slice","c","ac","bd","abcd","times","_multiplyBySmall","divmod","remainder","over","pow","toString","_0","_1","_2","isNegative","exp2","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","roughLOB","max2","min3","gcd","String","shiftRight","remQuo","and","or","xor","integerLogarithm","tmp","p","e","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","pow4","toBase2","apply","map","valueOf","neg","Number","out","left","digit","toBaseString","join","parseStringValue","split2","split","decimalPlace","indexOf","test","max3","min4","parseNumberValue","toArray","str","zeros","toJSON","parseInt","i","minusOne","min","lcm","isInstance","usedRNG","random","low","range2","high","restricted","top","fromArray","define","amd","fail","$$Proxy","tag","$Maybe","Nothing","Just","value0","arrayMap","functorArray","arrayBind","$Either","Right","functorEither","m","applyEither","v1","Functor0","applicativeEither","pure","Apply0","peekImpl","just","nothing","xs","pokeImpl","ret","$Iterator","pushWhile","iter","array","$$break","$0","mx","$1","iterate","foldlArray","init","acc","len","foldableArray","foldr","foldl","foldMap","dictMonoid","mempty","Semigroup0","append","$Tuple","functorWithIndexArray","mapWithIndex","refEq","r1","r2","eqString","eqInt","unsafeCompareImpl","ordString","ordStringImpl","Eq0","ordInt","ordIntImpl","traverseArrayImpl","array1","array2","array3","concat2","ys","go","bot","pivot","identity3","traversableArray","traverse","dictApplicative","sequence","Foldable1","rangeImpl","end","step","replicateImpl","fill","count","fromFoldableImpl","Cons2","head","tail","emptyList","curryCons","listToArray","list","unconsImpl","empty2","findIndexImpl","findLastIndexImpl","xss","filterImpl","filter","sortByImpl2","fromOrdering","mergeFromTo","xs1","xs2","from","to","mid","k","sliceImpl","s","zipWithImpl","anyImpl","allImpl","zipWith","$2","sortBy","comp","singleton","groupBy","op","sub1","groupAllBy","find","all","unfoldable1Array","unfoldr1","unfoldr1ArrayImpl","v2","fromJust2","fst2","snd2","tuple","maybe","_caseJson","isNull","isBool","isNum","isStr","isArr","isObj","call","$JsonDecodeError","AtIndex","value1","AtKey","Named","MissingValue","printJsonDecodeError","err","JSON","stringify","$List","Nil","foldableList","b$1","go$a1$copy","go$a0","go$a1","go$c","go$r","go$a0$copy","fromCharCode","Symbol","iterator","fromCodePoint","codePointAt","traversableWithIndexArray","traverseWithIndex","sequence1","Traversable2","FunctorWithIndex0","traverse1","decodeJArray","decodeNonEmptyArray","decoder","$3","$4","decodeInt","decodeArray","$12","gDecodeJsonNil","gDecodeJson","decodeRecord","dictGDecodeJson","decodeJson","json","gDecodeJsonCons","dictDecodeJsonField","dictIsSymbol","object","fieldName","reflectSymbol","decodeJsonField","yes","v$1","rest","label","unsafeSet","rec","copy","key","import_big_integer","__copyProps","except","desc","get","enumerable","fromInt","default","biAdd","biMul","biSub","biMod","semiringBigInt","mul","euclideanRingBigInt","yy","foldl1Impl","heytingAlgebraBoolean","ff","tt","implies","disj","conj","b1","b2","swapST","st","identity6","product2","pascalTriangle","iterateN","dictUnfoldable1","combinations","combinationNumber","combinationNumber$a0$copy","combinationNumber$a1$copy","combinationNumber$a0","combinationNumber$a1","combinationNumber$c","combinationNumber$r","biDiv","buildPartitionNumbers","$$new","v3","partitionNumber","partitionNumbers","regex_default","validate_default","uuid","byteToHex","parse_default","TypeError","Uint8Array","ROTL","v5","v35","name","version","hashfunc","generateUUID","namespace","buf","offset","_namespace","stringToBytes","unescape","encodeURIComponent","bytes","charCodeAt","set","unsafeStringify","DNS","URL","K","H","msg","isArray","N","M","Uint32Array","W","T","f","z","getUUID5Impl","v5_default","namespaceTcgCalculator","decodeJsonId","validateV4UUID","countIsSymbol","idIsSymbol","nameIsSymbol","JustDraw","readConditionMode","decodeJsonConditionMode","decodeJsonCondition","and3","dictFoldable","semigroupConj1","dictHeytingAlgebra","greaterThanOrEq","a1","a2","maximum","distinctPermutations2","distinctPermutations","dictOrd","reverseST","min2","product3","sumBy","dictSemiring","semigroupAdditive1","sumBy1","sumBy2","satisfyCondition","dp","card","id","draw","mkDrawPattern$p","cardsLength","pattern$p","cardCombinations","con","p$p","mkConditionPattern","mkConditionPattern$a0$copy","mkConditionPattern$a0","mkConditionPattern$c","mkConditionPattern$r","mode","cards","mergeConditionPattern","right","foldable1NonEmptyArray","isValidConditionPattern","generateDrawPatterns","maxDrawCount","hand","others","calculatePatternCount","pattern","buildConditionPattern","conditions","merged","calculate","deck","conditionPattern","$02","main","event","data","ev","console","error","postMessageImpl","tr","self","postMessage","close","onmessage"],"version":3,"file":"worker.js.map"}